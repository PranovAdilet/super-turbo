import { NextRequest, NextResponse } from "next/server";
import { z } from "zod";

import {
  configureSuperduperAI,
  getSuperduperAIConfig,
} from "@/lib/config/superduperai";

// –°—Ö–µ–º–∞ –∑–∞–ø—Ä–æ—Å–∞ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π —Å –º–æ–¥–µ–ª—å—é
const modelImageGenerationSchema = z.object({
  generationId: z.string().optional(), // –î–µ–ª–∞–µ–º –Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–º
  prompt: z.string().min(1, "Prompt is required"),
  modelName: z.string().min(1, "Model name is required"),
  modelConfig: z
    .object({
      width: z.number().optional(),
      height: z.number().optional(),
      aspectRatio: z.string().optional(),
      style: z.string().optional(),
      shotSize: z.string().optional(),
    })
    .optional(),
  imageCount: z.number().min(1).max(3).default(1),
  status: z
    .enum(["pending", "processing", "completed", "error"])
    .default("processing"),
  progress: z.number().min(0).max(100).default(0),
  createdAt: z.string().optional(), // –î–µ–ª–∞–µ–º –Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–º
  paymentSessionId: z.string().optional(), // ID —Å–µ—Å—Å–∏–∏ –æ–ø–ª–∞—Ç—ã –¥–ª—è –ø—Ä—è–º–æ–π –æ–ø–ª–∞—Ç—ã
  paymentIntentId: z.string().optional(),
  sessionId: z.string().optional(),
  customerEmail: z.string().optional(),
  images: z
    .array(
      z.object({
        fileId: z.string(),
        url: z.string().optional(),
        thumbnailUrl: z.string().optional(),
        status: z
          .enum(["pending", "processing", "completed", "error"])
          .default("processing"),
      })
    )
    .optional(),
  error: z.string().optional(),
  // –ù–æ–≤—ã–µ –ø–æ–ª—è –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∫–∏ image-to-image
  imageFile: z.any().optional(), // File object
  generationType: z
    .enum([
      "text-to-image",
      "image-to-image",
      "text-to-video",
      "image-to-video",
    ])
    .default("text-to-image"),
});

type ModelImageGenerationData = z.infer<typeof modelImageGenerationSchema>;

import {
  saveGenerationData,
  loadGenerationData,
  GenerationData,
} from "@/lib/generation-store";

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è ModelImageGenerationData –≤ GenerationData
async function saveImageGenerationData(data: ModelImageGenerationData) {
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ generationId —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
  if (!data.generationId) {
    console.warn("‚ö†Ô∏è Cannot save generation data: generationId is undefined");
    return;
  }

  const generationData: GenerationData = {
    generationId: data.generationId,
    status: data.status,
    progress: data.progress,
    prompt: data.prompt,
    modelName: data.modelName,
    modelType: "image",
    paymentSessionId: data.paymentSessionId,
    createdAt: data.createdAt || new Date().toISOString(),
    error: data.error,
    images: data.images?.map((img) => ({
      fileId: img.fileId,
      status: img.status,
      url: img.url,
      thumbnailUrl: img.thumbnailUrl,
    })),
    generationType: data.generationType,
  };

  await saveGenerationData(generationData);
}

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –º–æ–¥–µ–ª–µ–π –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
const IMAGE_MODEL_CONFIGS = {
  "Google Imagen 4": {
    generation_config_name: "google-cloud/imagen4",
    width: 1080,
    height: 1080,
    aspectRatio: "1:1",
    style: "flux_watercolor",
    shotSize: "Medium Shot",
  },
  "GPT-Image-1": {
    generation_config_name: "azure-openai/gpt-image-1",
    width: 1024,
    height: 1024,
    aspectRatio: "1:1",
    // OpenAI GPT-Image-1 –Ω–µ —Ç—Ä–µ–±—É–µ—Ç style/shot_size ‚Äî –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —ç—Ç–∏ –ø–æ–ª—è
    style: undefined as unknown as string,
    shotSize: undefined as unknown as string,
  },
  "Flux Kontext": {
    generation_config_name: "comfyui/flux",
    width: 1024,
    height: 1024,
    aspectRatio: "1:1",
    style: "flux_steampunk",
    shotSize: "Medium Shot",
  },
  default: {
    generation_config_name: "comfyui/flux",
    width: 1024,
    height: 1024,
    aspectRatio: "1:1",
    style: "flux_watercolor",
    shotSize: "Medium Shot",
  },
};

// –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å –ø–æ–º–æ—â—å—é SuperDuperAI API
async function generateImageWithModel(
  prompt: string,
  modelName: string,
  imageCount: number,
  modelConfig?: {
    width?: number;
    height?: number;
    aspectRatio?: string;
    style?: string;
    shotSize?: string;
  },
  generationType: string = "text-to-image",
  imageFile?: File
): Promise<string[]> {
  console.log("üé® Starting model image generation:", {
    prompt,
    modelName,
    imageCount,
    generationType,
    hasImageFile: !!imageFile,
  });

  // –ö–æ–Ω—Ñ–∏–≥—É—Ä–∏—Ä—É–µ–º SuperDuperAI –∫–ª–∏–µ–Ω—Ç
  configureSuperduperAI();
  const config = getSuperduperAIConfig();

  // –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –º–æ–¥–µ–ª–∏
  const modelSettings =
    IMAGE_MODEL_CONFIGS[modelName as keyof typeof IMAGE_MODEL_CONFIGS] ||
    IMAGE_MODEL_CONFIGS.default;
  const finalConfig = { ...modelSettings, ...modelConfig };

  const fileIds = [];

  for (let i = 0; i < imageCount; i++) {
    try {
      let payload: {
        type: string;
        template_name: string | null;
        config: {
          prompt: string;
          negative_prompt: string;
          width: number;
          height: number;
          aspect_ratio: string;
          seed: number;
          generation_config_name: string;
          entity_ids: string[];
          references: Array<{ type: string; reference_id: string }>;
          shot_size?: string;
          qualityType?: string;
          style_name?: string;
        };
      };

      if (generationType === "image-to-image" && imageFile) {
        // –î–ª—è image-to-image –Ω—É–∂–Ω–æ –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª –∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –µ–≥–æ ID
        console.log("üì§ Uploading image file for image-to-image generation...");

        // –°–æ–∑–¥–∞–µ–º FormData –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        const uploadFormData = new FormData();
        uploadFormData.append("file", imageFile);

        const uploadResponse = await fetch(`${config.url}/api/v1/file/upload`, {
          method: "POST",
          headers: {
            Authorization: `Bearer ${config.token}`,
            "User-Agent": "SuperDuperAI-Landing/1.0",
          },
          body: uploadFormData,
        });

        if (!uploadResponse.ok) {
          throw new Error(`Failed to upload image: ${uploadResponse.status}`);
        }

        const uploadResult = await uploadResponse.json();
        const referenceImageId = uploadResult.id;

        console.log("‚úÖ Image uploaded successfully, ID:", referenceImageId);

        // –°–æ–∑–¥–∞–µ–º payload –¥–ª—è image-to-image
        payload = {
          type: "media",
          template_name: null,
          config: {
            prompt,
            negative_prompt: "",
            width: finalConfig.width,
            height: finalConfig.height,
            aspect_ratio: finalConfig.aspectRatio,
            seed:
              Math.floor(Math.random() * 1000000000000) +
              i +
              Date.now() +
              Math.floor(Math.random() * 1000),
            generation_config_name: finalConfig.generation_config_name,
            entity_ids: [],
            references: referenceImageId
              ? [
                  {
                    type: "source",
                    reference_id: referenceImageId,
                  },
                ]
              : [],
            ...(finalConfig.shotSize && { shot_size: finalConfig.shotSize }),
            ...(finalConfig.style && { style_name: finalConfig.style }),
            ...(finalConfig.style && { qualityType: "hd" }),
          },
        };
      } else {
        // –î–ª—è text-to-image –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π payload
        payload = {
          type: "media",
          template_name: null,
          config: {
            prompt,
            negative_prompt: "",
            width: finalConfig.width,
            height: finalConfig.height,
            aspect_ratio: finalConfig.aspectRatio,
            seed:
              Math.floor(Math.random() * 1000000000000) +
              i +
              Date.now() +
              Math.floor(Math.random() * 1000),
            generation_config_name: finalConfig.generation_config_name,
            entity_ids: [],
            references: [],
            ...(finalConfig.shotSize && { shot_size: finalConfig.shotSize }),
            ...(finalConfig.style && { style_name: finalConfig.style }),
            ...(finalConfig.style && { qualityType: "hd" }),
          },
        };
      }

      console.log("üì§ Sending request to SuperDuperAI:", payload);

      const response = await fetch(`${config.url}/api/v1/file/generate-image`, {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
          Authorization: `Bearer ${config.token}`,
          "User-Agent": "SuperDuperAI-Landing/1.0",
        },
        body: JSON.stringify(payload),
      });

      console.log(`üì° SuperDuperAI API Response Status: ${response.status}`);

      let result: { id?: string } | Array<{ id: string }>;

      if (!response.ok) {
        const errorText = await response.text();
        console.error("‚ùå SuperDuperAI API Error:", errorText);

        // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—à–∏–±–∫—É 409 (Integrity error) —Å –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–æ–π
        if (response.status === 409) {
          console.log("üîÑ Retrying due to integrity error...");
          // –ñ–¥–µ–º –Ω–µ–º–Ω–æ–≥–æ –∏ –ø–æ–≤—Ç–æ—Ä—è–µ–º –ø–æ–ø—ã—Ç–∫—É
          await new Promise((resolve) => setTimeout(resolve, 1000));

          // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–æ–≤—ã–π seed –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–∏
          const retryPayload = {
            ...payload,
            config: {
              ...payload.config,
              seed: Math.floor(Math.random() * 1000000000000) + Date.now(),
            },
          };

          const retryResponse = await fetch(
            `${config.url}/api/v1/file/generate-image`,
            {
              method: "POST",
              headers: {
                "Content-Type": "application/json",
                Authorization: `Bearer ${config.token}`,
                "User-Agent": "SuperDuperAI-Landing/1.0",
              },
              body: JSON.stringify(retryPayload),
            }
          );

          if (!retryResponse.ok) {
            const retryErrorText = await retryResponse.text();
            console.error("‚ùå SuperDuperAI API Retry Error:", retryErrorText);
            throw new Error(
              `SuperDuperAI API failed after retry: ${retryResponse.status} - ${retryErrorText}`
            );
          }

          // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–∏
          result = await retryResponse.json();
          console.log("‚úÖ SuperDuperAI retry response:", result);
        } else {
          throw new Error(
            `SuperDuperAI API failed: ${response.status} - ${errorText}`
          );
        }
      } else {
        result = await response.json();
        console.log("‚úÖ SuperDuperAI response:", result);
      }

      // –ò–∑–≤–ª–µ–∫–∞–µ–º file ID –∏–∑ –æ—Ç–≤–µ—Ç–∞
      let fileId: string;

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –º–∞—Å—Å–∏–≤–æ–º
      if (Array.isArray(result) && result.length > 0) {
        fileId = result[0].id;
      } else if (!Array.isArray(result) && result.id) {
        fileId = result.id;
      } else {
        throw new Error("No file ID returned from SuperDuperAI API");
      }

      if (!fileId) {
        throw new Error("No file ID returned from SuperDuperAI API");
      }

      fileIds.push(fileId);

      console.log(
        `‚úÖ Image ${i + 1}/${imageCount} generation started with fileId: ${fileId}`
      );
    } catch (error) {
      console.error(`‚ùå Error generating image ${i + 1}:`, error);
      throw error;
    }
  }

  return fileIds;
}

// –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å —Ñ–∞–π–ª–∞ —á–µ—Ä–µ–∑ SuperDuperAI API
async function checkFileStatus(
  fileId: string
): Promise<{ url?: string; thumbnailUrl?: string; status: string }> {
  try {
    configureSuperduperAI();
    const config = getSuperduperAIConfig();

    const response = await fetch(`${config.url}/api/v1/file/${fileId}`, {
      headers: {
        Authorization: `Bearer ${config.token}`,
        "Content-Type": "application/json",
      },
    });

    if (!response.ok) {
      console.error(
        `‚ùå Failed to check file ${fileId} status:`,
        response.status
      );
      return { status: "error" };
    }

    const fileData = await response.json();
    console.log(`üìÅ File ${fileId} status:`, fileData);

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–≤–µ—Ä—à–µ–Ω –ª–∏ —Ñ–∞–π–ª
    if (fileData.url) {
      return {
        url: fileData.url,
        thumbnailUrl: fileData.thumbnail_url,
        status: "completed",
      };
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–¥–∞—á–∏
    if (fileData.tasks && fileData.tasks.length > 0) {
      const latestTask = fileData.tasks[fileData.tasks.length - 1];
      if (latestTask.status === "error") {
        return { status: "error" };
      }
      if (latestTask.status === "in_progress") {
        return { status: "processing" };
      }
      if (latestTask.status === "completed") {
        // –ï—Å–ª–∏ –∑–∞–¥–∞—á–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞, –Ω–æ URL –µ—â–µ –Ω–µ—Ç, —Ñ–∞–π–ª –º–æ–∂–µ—Ç –±—ã—Ç—å –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏
        return { status: "processing" };
      }
    }

    // –î–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –±–µ–∑ –∑–∞–¥–∞—á –∏–ª–∏ —Å –ø—É—Å—Ç—ã–º–∏ —Ç–∞—Å–∫–∞–º–∏
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø —Ñ–∞–π–ª–∞ –∏ –¥—Ä—É–≥–∏–µ –ø—Ä–∏–∑–Ω–∞–∫–∏
    if (fileData.type === "image") {
      // –ï—Å–ª–∏ —ç—Ç–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏ –Ω–µ—Ç URL, –Ω–æ –µ—Å—Ç—å ID, –∑–Ω–∞—á–∏—Ç –æ–Ω–æ –µ—â–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è
      if (fileData.id && !fileData.url) {
        return { status: "processing" };
      }
    }

    // –ï—Å–ª–∏ –Ω–µ—Ç –∑–∞–¥–∞—á –∏–ª–∏ –æ–Ω–∏ –Ω–µ –∑–∞–≤–µ—Ä—à–µ–Ω—ã, —Ñ–∞–π–ª –≤—Å–µ –µ—â–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è
    return { status: "processing" };
  } catch (error) {
    console.error(`‚ùå Error checking file ${fileId}:`, error);
    return { status: "error" };
  }
}

// POST - –°–æ–∑–¥–∞–µ–º/–∑–∞–ø—É—Å–∫–∞–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
export async function POST(request: NextRequest) {
  try {
    let body: {
      modelName: string;
      prompt: string;
      paymentSessionId?: string;
      generationType?: string;
      imageCount?: number;
      [key: string]: string | number | undefined;
    };
    let imageFile: File | undefined;

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º Content-Type –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ç–∏–ø–∞ –∑–∞–ø—Ä–æ—Å–∞
    const contentType = request.headers.get("content-type");

    if (contentType && contentType.includes("multipart/form-data")) {
      // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º FormData
      const formData = await request.formData();
      body = {
        modelName: formData.get("modelName") as string,
        prompt: formData.get("prompt") as string,
        paymentSessionId: formData.get("paymentSessionId") as string,
        generationType: formData.get("generationType") as string,
        imageCount: 1,
      };

      // –ü–æ–ª—É—á–∞–µ–º —Ñ–∞–π–ª –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
      const file = formData.get("imageFile") as File;
      if (file) {
        imageFile = file;
        console.log("üìÅ Received image file:", file.name, file.size, file.type);
      }
    } else {
      // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º JSON
      body = await request.json();
    }

    console.log("üé® Model image generation request:", body);

    // –í–∞–ª–∏–¥–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å–∞
    const validatedData = modelImageGenerationSchema.parse(body);

    // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –ø–æ–ª—è
    const finalData = {
      ...validatedData,
      generationId: validatedData.generationId || `gen_${Date.now()}`,
      createdAt: validatedData.createdAt || new Date().toISOString(),
      imageFile: imageFile || validatedData.imageFile,
    };

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–ø–ª–∞—Ç—É –¥–ª—è –ø—Ä—è–º–æ–π –æ–ø–ª–∞—Ç—ã
    if (finalData.paymentSessionId) {
      console.log("üí≥ Checking payment session:", finalData.paymentSessionId);

      // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É —Å—Ç–∞—Ç—É—Å–∞ –æ–ø–ª–∞—Ç—ã —á–µ—Ä–µ–∑ Stripe API
      // –ü–æ–∫–∞ —á—Ç–æ –ø—Ä–æ—Å—Ç–æ –ª–æ–≥–∏—Ä—É–µ–º –∏ –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º
      console.log("‚úÖ Payment session provided, proceeding with generation...");
    } else {
      console.log(
        "‚ö†Ô∏è No payment session ID provided, but continuing for demo purposes"
      );
    }

    // –°—Ç–∞–±–∏–ª—å–Ω—ã–π userId: cookie ‚Üí fallback IP
    const cookieUid = request.cookies.get("superduperai_uid")?.value;
    const forwarded = request.headers.get("x-forwarded-for");
    const realIp = request.headers.get("x-real-ip");
    const ip = forwarded?.split(",")[0]?.trim() || realIp || "unknown";
    const _userId = cookieUid ? `demo-user-${cookieUid}` : `demo-user-${ip}`;

    console.log("‚úÖ Starting image generation...");

    // –ó–∞–ø—É—Å–∫–∞–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π —Å SuperDuperAI
    try {
      const fileIds = await generateImageWithModel(
        finalData.prompt,
        finalData.modelName,
        finalData.imageCount,
        finalData.modelConfig,
        finalData.generationType,
        finalData.imageFile
      );

      // –õ–æ–≥–∏—Ä—É–µ–º —É—Å–ø–µ—à–Ω—É—é –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –¥–ª—è –ø—Ä—è–º–æ–π –æ–ø–ª–∞—Ç—ã
      console.log(
        `‚úÖ Image generation completed for payment session: ${finalData.paymentSessionId || "demo"}`
      );

      // –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π —Å fileIds
      const images = fileIds.map((fileId) => ({
        fileId,
        status: "processing" as const,
        url: undefined,
        thumbnailUrl: undefined,
      }));

      // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å file IDs
      const updatedData: ModelImageGenerationData = {
        ...finalData,
        status: "processing",
        progress: 10, // –ù–∞—á–∞–ª—å–Ω—ã–π –ø—Ä–æ–≥—Ä–µ—Å—Å
        images,
      };

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –æ–±—â–µ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
      await saveImageGenerationData(updatedData);

      console.log("üé® Model image generation started:", {
        success: true,
        generationId: finalData.generationId,
        modelName: finalData.modelName,
        fileIds,
        status: "started",
        estimatedTime: finalData.imageCount * 30, // 30 —Å–µ–∫—É–Ω–¥ –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        message: "Model image generation started",
      });

      return NextResponse.json({
        success: true,
        generationId: finalData.generationId,
        taskId: fileIds[0], // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–µ—Ä–≤—ã–π fileId –∫–∞–∫ taskId
        modelName: finalData.modelName,
        fileIds,
        status: "started",
        estimatedTime: finalData.imageCount * 30,
        message: "Model image generation started",
      });
    } catch (error) {
      console.error("‚ùå Model image generation error:", error);

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ—à–∏–±–∫–∏
      const errorData: ModelImageGenerationData = {
        ...finalData,
        status: "error",
        error: error instanceof Error ? error.message : "Unknown error",
      };

      await saveImageGenerationData(errorData);

      return NextResponse.json(
        {
          success: false,
          error: "Failed to start image generation",
          details: error instanceof Error ? error.message : "Unknown error",
        },
        { status: 500 }
      );
    }
  } catch (error) {
    console.error("‚ùå Model image API error:", error);

    if (error instanceof z.ZodError) {
      return NextResponse.json(
        {
          success: false,
          error: "Invalid request data",
          details: error.errors,
        },
        { status: 400 }
      );
    }

    return NextResponse.json(
      {
        success: false,
        error: "Internal server error",
        details: error instanceof Error ? error.message : "Unknown error",
      },
      { status: 500 }
    );
  }
}

// GET - –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
export async function GET(request: NextRequest) {
  try {
    const { searchParams } = new URL(request.url);
    const generationId = searchParams.get("generationId");

    if (!generationId) {
      return NextResponse.json(
        {
          success: false,
          error: "Generation ID is required",
        },
        { status: 400 }
      );
    }

    // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑ –æ–±—â–µ–≥–æ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞
    const generationData = await loadGenerationData(generationId);

    if (!generationData) {
      return NextResponse.json(
        {
          success: false,
          error: "Generation not found",
        },
        { status: 404 }
      );
    }

    // –ï—Å–ª–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –≤—Å–µ –µ—â–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è, –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å —á–µ—Ä–µ–∑ SuperDuperAI API
    if (generationData.status === "processing" && generationData.images) {
      let allCompleted = true;
      let totalProgress = 0;
      const updatedImages = [];

      for (const image of generationData.images) {
        const fileStatus = await checkFileStatus(image.fileId);

        if (fileStatus.status === "completed" && fileStatus.url) {
          updatedImages.push({
            ...image,
            url: fileStatus.url,
            thumbnailUrl: fileStatus.thumbnailUrl,
            status: "completed" as const,
          });
          totalProgress += 100;
        } else if (fileStatus.status === "error") {
          updatedImages.push({
            ...image,
            status: "error" as const,
          });
          totalProgress += 0;
          allCompleted = false;
        } else {
          updatedImages.push({
            ...image,
            status: "processing" as const,
          });
          totalProgress += 50; // –í—Å–µ –µ—â–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è
          allCompleted = false;
        }
      }

      const averageProgress = Math.round(
        totalProgress / generationData.images.length
      );

      // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
      const updatedData: ModelImageGenerationData = {
        ...generationData,
        status: allCompleted ? "completed" : "processing",
        progress: averageProgress,
        images: updatedImages,
        imageCount: generationData.images?.length || 1, // –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ–¥–æ—Å—Ç–∞—é—â–µ–µ –ø–æ–ª–µ
        modelConfig: generationData.modelConfig || {}, // –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ–¥–æ—Å—Ç–∞—é—â–µ–µ –ø–æ–ª–µ
        // –£–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ generationType –∏–º–µ–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ç–∏–ø –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
        generationType:
          (generationData.generationType as
            | "text-to-image"
            | "image-to-image") || "text-to-image",
      };

      await saveImageGenerationData(updatedData);

      return NextResponse.json({
        success: true,
        ...updatedData,
      });
    }

    return NextResponse.json({
      success: true,
      ...generationData,
    });
  } catch (error) {
    console.error("‚ùå Status check error:", error);

    return NextResponse.json(
      {
        success: false,
        error: "Failed to check generation status",
        details: error instanceof Error ? error.message : "Unknown error",
      },
      { status: 500 }
    );
  }
}
