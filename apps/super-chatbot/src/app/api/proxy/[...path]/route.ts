import { type NextRequest, NextResponse } from "next/server";
import { auth } from "@/app/(auth)/auth";
import { getServerOpenAPI } from "@/lib/api/server-openapi";

/**
 * –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –ø—Ä–æ–∫—Å–∏ API —Ä–æ—É—Ç –¥–ª—è –≤—Å–µ—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ SuperDuperAI
 * –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –¥–æ–±–∞–≤–ª—è–µ—Ç —Ç–æ–∫–µ–Ω –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
 */
export async function GET(
  request: NextRequest,
  { params }: { params: Promise<{ path: string[] }> }
) {
  const { path } = await params;
  return handleProxyRequest(request, path, "GET");
}

export async function POST(
  request: NextRequest,
  { params }: { params: Promise<{ path: string[] }> }
) {
  const { path } = await params;
  return handleProxyRequest(request, path, "POST");
}

export async function PUT(
  request: NextRequest,
  { params }: { params: Promise<{ path: string[] }> }
) {
  const { path } = await params;
  return handleProxyRequest(request, path, "PUT");
}

export async function DELETE(
  request: NextRequest,
  { params }: { params: Promise<{ path: string[] }> }
) {
  const { path } = await params;
  return handleProxyRequest(request, path, "DELETE");
}

async function handleProxyRequest(
  request: NextRequest,
  path: string[],
  method: string
) {
  try {
    console.log(`üåê Proxy ${method} request for path:`, path);

    const session = await auth();
    if (!session?.user) {
      console.log("‚ùå Proxy: Unauthorized - no session");
      return NextResponse.json({ error: "Unauthorized" }, { status: 401 });
    }

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º OpenAPI —Å —Ç–æ–∫–µ–Ω–æ–º
    getServerOpenAPI();

    // –°—Ç—Ä–æ–∏–º URL –¥–ª—è SuperDuperAI API
    const apiPath = path.join("/");
    const superduperaiUrl = `${process.env.SUPERDUPERAI_URL || "https://dev-editor.superduperai.co"}/api/v1/${apiPath}`;

    console.log(`üéØ Proxy: Forwarding to ${superduperaiUrl}`);

    // –ü–æ–ª—É—á–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–ø—Ä–æ—Å–∞
    const { searchParams } = new URL(request.url);
    const queryString = searchParams.toString();
    const fullUrl = queryString
      ? `${superduperaiUrl}?${queryString}`
      : superduperaiUrl;

    // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–ª–æ –∑–∞–ø—Ä–æ—Å–∞
    let body: any = undefined;
    let bodyString: string | undefined = undefined;

    if (method !== "GET") {
      try {
        // –°–Ω–∞—á–∞–ª–∞ –ø–æ–ª—É—á–∞–µ–º —Ç–µ–ª–æ –∫–∞–∫ —Ç–µ–∫—Å—Ç
        bodyString = await request.text();

        // –ü—ã—Ç–∞–µ–º—Å—è —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å –∫–∞–∫ JSON
        if (bodyString.trim()) {
          body = JSON.parse(bodyString);
        }
      } catch {
        // –ï—Å–ª–∏ –Ω–µ —É–¥–∞–µ—Ç—Å—è —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å –∫–∞–∫ JSON, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∫–∞–∫ –µ—Å—Ç—å
        body = bodyString;
      }
    }

    // –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏
    const headers: Record<string, string> = {
      Authorization: `Bearer ${process.env.SUPERDUPERAI_TOKEN}`,
      "User-Agent": `SuperChatbot/3.0.22 (NextJS/${process.env.NODE_ENV || "development"})`,
    };

    // –î–æ–±–∞–≤–ª—è–µ–º Content-Type —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å body
    if (bodyString) {
      headers["Content-Type"] = "application/json";
    }

    // –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ SuperDuperAI API
    const response = await fetch(fullUrl, {
      method,
      headers,
      body: bodyString || undefined,
    });

    const responseData = await response.json();

    console.log(
      `‚úÖ Proxy: Response ${response.status} for ${method} ${apiPath}`
    );

    if (!response.ok) {
      console.log(`‚ùå Proxy: Error response:`, responseData);
      return NextResponse.json(
        { error: responseData.error || "API Error", details: responseData },
        { status: response.status }
      );
    }

    return NextResponse.json(responseData);
  } catch (error: any) {
    console.error("Proxy API Error:", error);

    return NextResponse.json(
      { error: "Internal server error", details: error.message },
      { status: 500 }
    );
  }
}
