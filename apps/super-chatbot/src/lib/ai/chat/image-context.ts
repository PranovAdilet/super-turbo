

export interface ImageContext {
  sourceImageUrl?: string;
  sourceImageId?: string;
  confidence: "high" | "medium" | "low";
  reasoning: string;
}

export interface ChatImage {
  url: string;
  id?: string;
  role: "user" | "assistant";
  timestamp: Date;
  prompt?: string;
  messageIndex: number;
}

/**
 * –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç —á–∞—Ç–∞ –∏ –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç, –∫ –∫–∞–∫–æ–º—É –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é –æ–±—Ä–∞—â–∞–µ—Ç—Å—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
 */
export async function analyzeImageContext(
  userMessage: string,
  chatImages: ChatImage[], // –ò–∑–º–µ–Ω–µ–Ω–æ —Å chatHistory: DBMessage[] –Ω–∞ chatImages: ChatImage[]
  currentMessageAttachments?: any[]
): Promise<ImageContext> {
  console.log("üîç analyzeImageContext: Starting analysis", {
    userMessage,
    chatImagesLength: chatImages.length,
    currentMessageAttachments: currentMessageAttachments,
  });

  // 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
  if (currentMessageAttachments?.length) {
    console.log("üîç analyzeImageContext: Checking current message attachments");
    const currentImage = currentMessageAttachments.find(
      (a: any) =>
        typeof a?.url === "string" &&
        /^https?:\/\//.test(a.url) &&
        String(a?.contentType || "").startsWith("image/")
    );

    if (currentImage?.url) {
      console.log(
        "üîç analyzeImageContext: Found image in current message:",
        currentImage.url
      );
      return {
        sourceImageUrl: currentImage.url,
        confidence: "high",
        reasoning: "–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–∞–π–¥–µ–Ω–æ –≤ —Ç–µ–∫—É—â–µ–º —Å–æ–æ–±—â–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è",
      };
    }
  }

  // 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ –∏—Å—Ç–æ—Ä–∏–∏ —á–∞—Ç–∞
  if (chatImages.length === 0) {
    console.log("üîç analyzeImageContext: No images found in chat history");
    return {
      confidence: "low",
      reasoning: "–í –∏—Å—Ç–æ—Ä–∏–∏ —á–∞—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π",
    };
  }

  console.log("üîç analyzeImageContext: Images from chat history:", {
    totalImages: chatImages.length,
    images: chatImages.map((img) => ({
      url: img.url,
      role: img.role,
      prompt: img.prompt,
      messageIndex: img.messageIndex,
    })),
  });

  if (chatImages.length === 0) {
    console.log("üîç analyzeImageContext: No images found in chat history");
    return {
      confidence: "low",
      reasoning: "–í –∏—Å—Ç–æ—Ä–∏–∏ —á–∞—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π",
    };
  }

  // 3. –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–∞ –ø—Ä–µ–¥–º–µ—Ç —Å—Å—ã–ª–æ–∫ –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
  const messageLower = userMessage.toLowerCase();
  console.log(
    "üîç analyzeImageContext: Analyzing message for image references:",
    messageLower
  );

  // –ü–æ–∏—Å–∫ –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º
  const imageReferences = analyzeImageReferences(messageLower, chatImages);
  console.log(
    "üîç analyzeImageContext: Found image references:",
    imageReferences
  );

  if (imageReferences.length > 0) {
    // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç–∏
    imageReferences.sort((a, b) => b.relevance - a.relevance);
    const bestMatch = imageReferences[0];
    console.log("üîç analyzeImageContext: Best match:", bestMatch);

    return {
      sourceImageUrl: bestMatch.image.url,
      sourceImageId: bestMatch.image.id,
      confidence: bestMatch.relevance > 0.7 ? "high" : "medium",
      reasoning: `–ù–∞–π–¥–µ–Ω–∞ —Å—Å—ã–ª–∫–∞ –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: ${bestMatch.reasoning}`,
    };
  }

  // 4. –ï—Å–ª–∏ –Ω–µ—Ç —è–≤–Ω—ã—Ö —Å—Å—ã–ª–æ–∫, –∏—Å–ø–æ–ª—å–∑—É–µ–º —ç–≤—Ä–∏—Å—Ç–∏–∫–∏
  console.log(
    "üîç analyzeImageContext: No explicit references found, trying heuristics"
  );
  const heuristicMatch = findImageByHeuristics(messageLower, chatImages);
  console.log("üîç analyzeImageContext: Heuristic match:", heuristicMatch);

  if (heuristicMatch) {
    return {
      sourceImageUrl: heuristicMatch.image.url,
      sourceImageId: heuristicMatch.image.id,
      confidence: "medium",
      reasoning: `–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤—ã–±—Ä–∞–Ω–æ –ø–æ —ç–≤—Ä–∏—Å—Ç–∏–∫–µ: ${heuristicMatch.reasoning}`,
    };
  }

  // 5. –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ—Å–ª–µ–¥–Ω–µ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
  console.log("üîç analyzeImageContext: Using fallback - last image in chat");
  const lastImage = chatImages[chatImages.length - 1];
  console.log("üîç analyzeImageContext: Last image:", {
    url: lastImage.url,
    role: lastImage.role,
    prompt: lastImage.prompt,
  });

  return {
    sourceImageUrl: lastImage.url,
    sourceImageId: lastImage.id,
    confidence: "low",
    reasoning: `–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ø–æ—Å–ª–µ–¥–Ω–µ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–∑ —á–∞—Ç–∞ (${lastImage.role === "assistant" ? "—Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ" : "–∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–µ"})`,
  };
}

/**
 * –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–∞ –ø—Ä–µ–¥–º–µ—Ç —Å—Å—ã–ª–æ–∫ –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
 */
function analyzeImageReferences(
  messageLower: string,
  chatImages: ChatImage[]
): Array<{ image: ChatImage; relevance: number; reasoning: string }> {
  console.log(
    "üîç analyzeImageReferences: Starting pattern matching for:",
    messageLower
  );
  const references: Array<{
    image: ChatImage;
    relevance: number;
    reasoning: string;
  }> = [];

  // –†—É—Å—Å–∫–∏–µ —Å—Å—ã–ª–∫–∏ –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
  const russianPatterns = [
    {
      pattern: /(—ç—Ç–æ|—ç—Ç–∞|—ç—Ç–æ—Ç)\s+(–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ|–∫–∞—Ä—Ç–∏–Ω–∫–∞|—Ñ–æ—Ç–æ|—Ä–∏—Å—É–Ω–æ–∫)/,
      weight: 0.9,
    },
    {
      pattern:
        /(—Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω[–∞-—è]+|—Å–æ–∑–¥–∞–Ω–Ω[–∞-—è]+)\s+(–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ|–∫–∞—Ä—Ç–∏–Ω–∫–∞|—Ñ–æ—Ç–æ)/,
      weight: 0.8,
    },
    {
      pattern: /(–ø–æ—Å–ª–µ–¥–Ω[–∞-—è]+|–ø—Ä–µ–¥—ã–¥—É—â[–∞-—è]+)\s+(–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ|–∫–∞—Ä—Ç–∏–Ω–∫–∞|—Ñ–æ—Ç–æ)/,
      weight: 0.7,
    },
    {
      pattern:
        /(–ø–µ—Ä–≤[–∞-—è]+|–≤—Ç–æ—Ä[–∞-—è]+|—Ç—Ä–µ—Ç—å[–∞-—è]+)\s+(–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ|–∫–∞—Ä—Ç–∏–Ω–∫–∞|—Ñ–æ—Ç–æ)/,
      weight: 0.6,
    },
    {
      pattern: /(–∑–∞–≥—Ä—É–∂–µ–Ω–Ω[–∞-—è]+|–∑–∞–≥—Ä—É–∂[–∞-—è]+)\s+(–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ|–∫–∞—Ä—Ç–∏–Ω–∫–∞|—Ñ–æ—Ç–æ)/,
      weight: 0.7,
    },
    { pattern: /(–Ω–∞\s+—ç—Ç–æ–º\s+–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏|–≤\s+—ç—Ç–æ–π\s+–∫–∞—Ä—Ç–∏–Ω–∫–µ)/, weight: 0.9 },
    {
      pattern:
        /(–∏–∑–º–µ–Ω–∏|–∏—Å–ø—Ä–∞–≤—å|–ø–æ–¥–ø—Ä–∞–≤—å|—Å–¥–µ–ª–∞–π)\s+(—ç—Ç–æ\s+–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ|—ç—Ç—É\s+–∫–∞—Ä—Ç–∏–Ω–∫—É)/,
      weight: 0.9,
    },
    {
      pattern:
        /(—Å–¥–µ–ª–∞–π\s+–≥–ª–∞–∑–∞\s+–≥–æ–ª—É–±—ã–º–∏|–∏–∑–º–µ–Ω–∏\s+—Ü–≤–µ—Ç|–ø–æ–¥–ø—Ä–∞–≤—å\s+—Ñ–æ–Ω|–¥–æ–±–∞–≤—å\s+–∫—Ä—ã–ª—å—è)/,
      weight: 0.8,
    },
  ];

  // –ê–Ω–≥–ª–∏–π—Å–∫–∏–µ —Å—Å—ã–ª–∫–∏ –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
  const englishPatterns = [
    { pattern: /(this|that)\s+(image|picture|photo|drawing)/, weight: 0.9 },
    { pattern: /(generated|created)\s+(image|picture|photo)/, weight: 0.8 },
    { pattern: /(last|previous|recent)\s+(image|picture|photo)/, weight: 0.7 },
    { pattern: /(first|second|third)\s+(image|picture|photo)/, weight: 0.6 },
    { pattern: /(uploaded|upload)\s+(image|picture|photo)/, weight: 0.7 },
    { pattern: /(on\s+this\s+image|in\s+this\s+picture)/, weight: 0.9 },
    {
      pattern: /(change|fix|edit|modify)\s+(this\s+image|this\s+picture)/,
      weight: 0.9,
    },
    {
      pattern:
        /(make\s+eyes\s+blue|change\s+color|fix\s+background|add\s+wings)/,
      weight: 0.8,
    },
  ];

  const allPatterns = [...russianPatterns, ...englishPatterns];

  allPatterns.forEach(({ pattern, weight }) => {
    if (pattern.test(messageLower)) {
      // –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –∫–∞–∫–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–º–µ–µ—Ç—Å—è –≤ –≤–∏–¥—É
      const targetImage = findTargetImageByPattern(
        pattern,
        messageLower,
        chatImages
      );
      if (targetImage) {
        references.push({
          image: targetImage,
          relevance: weight,
          reasoning: `–ù–∞–π–¥–µ–Ω–æ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ —Å –ø–∞—Ç—Ç–µ—Ä–Ω–æ–º: ${pattern.source}`,
        });
      }
    }
  });

  return references;
}

/**
 * –ù–∞—Ö–æ–¥–∏—Ç —Ü–µ–ª–µ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø–∞—Ç—Ç–µ—Ä–Ω–∞ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏
 */
function findTargetImageByPattern(
  pattern: RegExp,
  messageLower: string,
  chatImages: ChatImage[]
): ChatImage | null {
  console.log(
    "üîç findTargetImageByPattern: Finding target for pattern:",
    pattern.source
  );

  // –ï—Å–ª–∏ –ø–∞—Ç—Ç–µ—Ä–Ω —É–∫–∞–∑—ã–≤–∞–µ—Ç –Ω–∞ "—ç—Ç–æ" –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ, –∏—â–µ–º –ø–æ—Å–ª–µ–¥–Ω–µ–µ
  if (pattern.source.includes("—ç—Ç–æ") || pattern.source.includes("this")) {
    const result = chatImages[chatImages.length - 1] || null;
    console.log(
      "üîç findTargetImageByPattern: 'This' pattern, returning last image:",
      result?.url
    );
    return result;
  }

  // –ï—Å–ª–∏ –ø–∞—Ç—Ç–µ—Ä–Ω —É–∫–∞–∑—ã–≤–∞–µ—Ç –Ω–∞ –ø–æ—Ä—è–¥–∫–æ–≤—ã–π –Ω–æ–º–µ—Ä
  const orderMatch = messageLower.match(
    /(–ø–µ—Ä–≤[–∞-—è]+|–≤—Ç–æ—Ä[–∞-—è]+|—Ç—Ä–µ—Ç—å[–∞-—è]+|first|second|third)/
  );
  if (orderMatch) {
    const order = orderMatch[0];
    let index = 0;

    if (order.includes("–ø–µ—Ä–≤") || order.includes("first")) index = 0;
    else if (order.includes("–≤—Ç–æ—Ä") || order.includes("second")) index = 1;
    else if (order.includes("—Ç—Ä–µ—Ç—å") || order.includes("third")) index = 2;

    return chatImages[index] || null;
  }

  // –ï—Å–ª–∏ –ø–∞—Ç—Ç–µ—Ä–Ω —É–∫–∞–∑—ã–≤–∞–µ—Ç –Ω–∞ "–ø–æ—Å–ª–µ–¥–Ω–µ–µ" –∏–ª–∏ "–ø—Ä–µ–¥—ã–¥—É—â–µ–µ"
  if (pattern.source.includes("–ø–æ—Å–ª–µ–¥–Ω") || pattern.source.includes("last")) {
    return chatImages[chatImages.length - 1] || null;
  }

  if (
    pattern.source.includes("–ø—Ä–µ–¥—ã–¥—É—â") ||
    pattern.source.includes("previous")
  ) {
    return chatImages[chatImages.length - 2] || null;
  }

  // –ï—Å–ª–∏ –ø–∞—Ç—Ç–µ—Ä–Ω —É–∫–∞–∑—ã–≤–∞–µ—Ç –Ω–∞ "—Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ" –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
  if (
    pattern.source.includes("—Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω") ||
    pattern.source.includes("generated")
  ) {
    const generatedImages = chatImages.filter(
      (img) => img.role === "assistant"
    );
    return generatedImages[generatedImages.length - 1] || null;
  }

  // –ï—Å–ª–∏ –ø–∞—Ç—Ç–µ—Ä–Ω —É–∫–∞–∑—ã–≤–∞–µ—Ç –Ω–∞ "–∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–µ" –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
  if (
    pattern.source.includes("–∑–∞–≥—Ä—É–∂–µ–Ω–Ω") ||
    pattern.source.includes("uploaded")
  ) {
    const uploadedImages = chatImages.filter((img) => img.role === "user");
    return uploadedImages[uploadedImages.length - 1] || null;
  }

  return null;
}

/**
 * –ù–∞—Ö–æ–¥–∏—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–æ —ç–≤—Ä–∏—Å—Ç–∏–∫–∞–º, –µ—Å–ª–∏ —è–≤–Ω—ã–µ —Å—Å—ã–ª–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã
 */
function findImageByHeuristics(
  messageLower: string,
  chatImages: ChatImage[]
): { image: ChatImage; reasoning: string } | null {
  console.log(
    "üîç findImageByHeuristics: Analyzing message for edit intent:",
    messageLower
  );

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –∫–æ–Ω—Ç–µ–∫—Å—Ç "—Ç–æ–π –∂–µ –¥–µ–≤–æ—á–∫–∏/–ø–µ—Ä—Å–æ–Ω–∞–∂–∞"
  const samePersonPatterns = [
    /—Ç–æ–π\s+–∂–µ\s+–¥–µ–≤–æ—á–∫[–∞-—è]+/i,
    /—Ç–æ–π\s+–∂–µ\s+–¥–µ–≤—É—à–∫[–∞-—è]+/i,
    /—Ç–æ–≥–æ\s+–∂–µ\s+—á–µ–ª–æ–≤–µ–∫[–∞-—è]+/i,
    /same\s+girl/i,
    /same\s+person/i,
    /same\s+character/i,
    /the\s+same\s+girl/i,
    /the\s+same\s+person/i,
  ];

  const hasSamePersonContext = samePersonPatterns.some((pattern) =>
    pattern.test(messageLower)
  );
  if (hasSamePersonContext) {
    // –ò—â–µ–º –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ (assistant), —Ç–∞–∫ –∫–∞–∫ —ç—Ç–æ —Å–∫–æ—Ä–µ–µ –≤—Å–µ–≥–æ —Ç–æ, —á—Ç–æ –º—ã —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º
    const generatedImages = chatImages.filter(
      (img) => img.role === "assistant"
    );
    if (generatedImages.length > 0) {
      const lastGenerated = generatedImages[generatedImages.length - 1];
      console.log(
        "üîç findImageByHeuristics: Same person context, returning last generated image:",
        lastGenerated.url
      );
      return {
        image: lastGenerated,
        reasoning:
          "–∫–æ–Ω—Ç–µ–∫—Å—Ç '—Ç–æ–π –∂–µ –¥–µ–≤–æ—á–∫–∏' - –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ",
      };
    }
  }

  // –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏—Ç —Å–ª–æ–≤–∞ –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏–∏/—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏
  const editWords = [
    "–∏–∑–º–µ–Ω–∏",
    "–∏—Å–ø—Ä–∞–≤—å",
    "–ø–æ–¥–ø—Ä–∞–≤—å",
    "—Å–¥–µ–ª–∞–π",
    "–∑–∞–º–µ–Ω–∏",
    "—É–ª—É—á—à–∏",
    "–¥–æ–±–∞–≤—å",
    "change",
    "fix",
    "edit",
    "modify",
    "replace",
    "improve",
    "add",
  ];

  const hasEditIntent = editWords.some((word) => messageLower.includes(word));
  console.log("üîç findImageByHeuristics: Has edit intent:", hasEditIntent);

  if (hasEditIntent) {
    // –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ, –∑–∞—Ç–µ–º –ø–æ—Å–ª–µ–¥–Ω–µ–µ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–µ
    const generatedImages = chatImages.filter(
      (img) => img.role === "assistant"
    );
    const uploadedImages = chatImages.filter((img) => img.role === "user");

    let targetImage: ChatImage;
    let reasoning: string;

    if (generatedImages.length > 0) {
      targetImage = generatedImages[generatedImages.length - 1];
      reasoning =
        "–∫–æ–Ω—Ç–µ–∫—Å—Ç —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è - –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ";
    } else if (uploadedImages.length > 0) {
      targetImage = uploadedImages[uploadedImages.length - 1];
      reasoning =
        "–∫–æ–Ω—Ç–µ–∫—Å—Ç —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è - –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ø–æ—Å–ª–µ–¥–Ω–µ–µ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ";
    } else {
      targetImage = chatImages[chatImages.length - 1];
      reasoning =
        "–∫–æ–Ω—Ç–µ–∫—Å—Ç —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è - –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ø–æ—Å–ª–µ–¥–Ω–µ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ —á–∞—Ç–µ";
    }

    console.log(
      "üîç findImageByHeuristics: Edit intent detected, returning:",
      targetImage.url
    );
    return { image: targetImage, reasoning };
  }

  // –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏—Ç —Å–ª–æ–≤–∞ –æ —Å—Ç–∏–ª–µ/–∫–∞—á–µ—Å—Ç–≤–µ
  const styleWords = [
    "—Å—Ç–∏–ª—å",
    "–∫–∞—á–µ—Å—Ç–≤–æ",
    "—Ä–∞–∑–º–µ—Ä",
    "—Ü–≤–µ—Ç",
    "—Ñ–æ–Ω",
    "style",
    "quality",
    "size",
    "color",
    "background",
  ];

  const hasStyleIntent = styleWords.some((word) => messageLower.includes(word));
  if (hasStyleIntent) {
    const result = chatImages[chatImages.length - 1];
    return {
      image: result,
      reasoning: "–∫–æ–Ω—Ç–µ–∫—Å—Ç —Å—Ç–∏–ª—è/–∫–∞—á–µ—Å—Ç–≤–∞ - –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ø–æ—Å–ª–µ–¥–Ω–µ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ",
    };
  }

  return null;
}

/**
 * –ü–æ–ª—É—á–∞–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–∑ –∏—Å—Ç–æ—Ä–∏–∏ —á–∞—Ç–∞
 */
export async function getChatImages(chatId: string): Promise<ChatImage[]> {
  try {
    // –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π
    const { getMessagesByChatId } = await import("@/lib/db/queries");

    const messages = await getMessagesByChatId({ id: chatId });
    console.log("üîç getChatImages: Raw messages from DB:", {
      chatId,
      totalMessages: messages.length,
      messages: messages.map((msg) => ({
        id: msg.id,
        role: msg.role,
        hasAttachments: !!msg.attachments,
        attachmentsLength: Array.isArray(msg.attachments)
          ? msg.attachments.length
          : "not array",
        attachments: msg.attachments,
      })),
    });

    const chatImages: ChatImage[] = [];

    messages.forEach((msg, index) => {
      try {
        const attachments = msg.attachments as any[];
        console.log(`üîç Processing message ${index}:`, {
          role: msg.role,
          attachments: attachments,
          isArray: Array.isArray(attachments),
        });

        if (Array.isArray(attachments)) {
          attachments.forEach((att, attIndex) => {
            console.log(`üîç Processing attachment ${attIndex}:`, {
              url: att?.url,
              contentType: att?.contentType,
              name: att?.name,
              id: att?.id,
              isValidUrl:
                typeof att?.url === "string" && /^https?:\/\//.test(att?.url),
              isImage: String(att?.contentType || "").startsWith("image/"),
            });

            if (
              typeof att?.url === "string" &&
              /^https?:\/\//.test(att.url) &&
              String(att?.contentType || "").startsWith("image/")
            ) {
              // AICODE-DEBUG: –ò–∑–≤–ª–µ–∫–∞–µ–º fileId –∏–∑ –∏–º–µ–Ω–∏ –≤–ª–æ–∂–µ–Ω–∏—è
              let extractedFileId: string | undefined;
              let displayPrompt = att.name || "";
              const fileIdRegex = /\[FILE_ID:([a-f0-9-]+)\]\s*(.*)/;
              const match = att.name?.match(fileIdRegex);

              if (match) {
                extractedFileId = match[1]; // –ò–∑–≤–ª–µ–∫–∞–µ–º fileId
                displayPrompt = match[2].trim(); // –û—Å—Ç–∞–ª—å–Ω–∞—è —á–∞—Å—Ç—å –∏–º–µ–Ω–∏ - —ç—Ç–æ prompt
              }

              console.log("üîç getChatImages: FileId extraction:", {
                originalName: att.name,
                extractedFileId: extractedFileId || "none",
                displayPrompt: displayPrompt,
                fallbackReason: extractedFileId
                  ? "fileId found"
                  : "no fileId in name",
              });

              const chatImage = {
                url: att.url,
                id: extractedFileId || att.id, // –ò—Å–ø–æ–ª—å–∑—É–µ–º –∏–∑–≤–ª–µ—á–µ–Ω–Ω—ã–π fileId, fallback –∫ att.id
                role: msg.role as "user" | "assistant",
                timestamp: msg.createdAt,
                prompt: displayPrompt, // –ò—Å–ø–æ–ª—å–∑—É–µ–º –∏–∑–≤–ª–µ—á–µ–Ω–Ω—ã–π prompt
                messageIndex: index,
              };

              console.log("üîç Adding chat image:", chatImage);
              chatImages.push(chatImage);
            }
          });
        }
      } catch (error) {
        console.warn("Error parsing message attachments:", error);
      }
    });

    console.log("üîç getChatImages: Final result:", {
      totalImages: chatImages.length,
      images: chatImages.map((img) => ({
        url: img.url,
        role: img.role,
        prompt: img.prompt,
        messageIndex: img.messageIndex,
      })),
    });

    return chatImages;
  } catch (error) {
    console.error("Error getting chat images:", error);
    return [];
  }
}
