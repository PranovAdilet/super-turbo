import {
  semanticIndex,
  temporalAnalyzer,
  userPreferenceLearner,
  contextCache,
  generateMessageHash,
  CacheUtils,
} from "../context";

export interface VideoContext {
  sourceImageUrl?: string;
  sourceImageId?: string;
  confidence: "high" | "medium" | "low";
  reasoning: string;
  metadata?: Record<string, any>;
}

export interface ChatImage {
  url: string;
  id?: string;
  role: "user" | "assistant";
  timestamp: Date;
  prompt?: string;
  messageIndex: number;
  mediaType: "image";
}

/**
 * –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç —á–∞—Ç–∞ –¥–ª—è –≤–∏–¥–µ–æ-–≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
 * –§–æ–∫—É—Å–∏—Ä—É–µ—Ç—Å—è –Ω–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è—Ö
 */
interface MessageAttachment {
  url?: string;
  contentType?: string;
  name?: string;
  id?: string;
}

export async function analyzeVideoContext(
  userMessage: string,
  chatImages: ChatImage[],
  currentMessageAttachments?: MessageAttachment[],
  chatId?: string,
  userId?: string
): Promise<VideoContext> {
  console.log(
    "üé¨ analyzeVideoContext: Starting enhanced analysis with all 4 systems",
    {
      userMessage,
      chatImagesLength: chatImages.length,
      currentMessageAttachments: currentMessageAttachments,
      chatId,
      userId,
    }
  );

  // 1. –ö–≠–®–ò–†–û–í–ê–ù–ò–ï –ö–û–ù–¢–ï–ö–°–¢–ê - –ø—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à –ø–µ—Ä–≤—ã–º –¥–µ–ª–æ–º
  if (
    chatId &&
    CacheUtils.shouldUseCache(userMessage, currentMessageAttachments)
  ) {
    const messageHash = generateMessageHash(
      userMessage,
      currentMessageAttachments
    );
    const cachedContext = await contextCache.getCachedContext(
      chatId,
      messageHash,
      "video"
    );

    if (cachedContext) {
      console.log(`üéØ VideoContext: Cache HIT for video in chat ${chatId}`);
      return {
        sourceImageUrl: cachedContext.sourceUrl,
        sourceImageId: cachedContext.sourceId,
        confidence: cachedContext.confidence,
        reasoning: `–ö—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: ${cachedContext.reasoning}`,
        metadata: cachedContext.metadata,
      };
    }
  }

  // 2. –ü–†–û–í–ï–†–Ø–ï–ú –¢–ï–ö–£–©–ï–ï –°–û–û–ë–©–ï–ù–ò–ï –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π (image-to-video)
  if (currentMessageAttachments?.length) {
    console.log("üé¨ analyzeVideoContext: Checking current message attachments");
    const currentImage = currentMessageAttachments.find(
      (a: MessageAttachment) =>
        typeof a?.url === "string" &&
        /^https?:\/\//.test(a.url) &&
        String(a?.contentType || "").startsWith("image/")
    );

    if (currentImage?.url) {
      console.log(
        "üé¨ analyzeVideoContext: Found image in current message:",
        currentImage.url
      );

      const result = {
        sourceImageUrl: currentImage.url,
        sourceImageId: currentImage.id,
        confidence: "high" as const,
        reasoning:
          "–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–∞–π–¥–µ–Ω–æ –≤ —Ç–µ–∫—É—â–µ–º —Å–æ–æ–±—â–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è image-to-video",
        metadata: {
          source: "current_message",
          contentType: currentImage.contentType,
          timestamp: new Date().toISOString(),
        },
      };

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫—ç—à
      if (
        chatId &&
        CacheUtils.shouldUseCache(userMessage, currentMessageAttachments)
      ) {
        const messageHash = generateMessageHash(
          userMessage,
          currentMessageAttachments
        );
        await contextCache.setCachedContext(chatId, messageHash, "video", {
          sourceUrl: result.sourceImageUrl,
          sourceId: result.sourceImageId,
          mediaType: "video" as const,
          confidence: result.confidence,
          reasoning: result.reasoning,
          metadata: result.metadata,
        });
      }

      return result;
    }
  }

  // 3. –ü–†–û–í–ï–†–Ø–ï–ú –ò–°–¢–û–†–ò–Æ –ß–ê–¢–ê –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
  if (chatImages.length === 0) {
    console.log("üé¨ analyzeVideoContext: No images found in chat history");
    return {
      confidence: "low",
      reasoning: "–í –∏—Å—Ç–æ—Ä–∏–∏ —á–∞—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –¥–ª—è image-to-video",
      metadata: {
        source: "chat_history",
        totalImages: 0,
        timestamp: new Date().toISOString(),
      },
    };
  }

  console.log("üé¨ analyzeVideoContext: Images from chat history:", {
    totalImages: chatImages.length,
    images: chatImages.map((img) => ({
      url: img.url,
      role: img.role,
      prompt: img.prompt,
      messageIndex: img.messageIndex,
    })),
  });

  // 4. –§–ò–õ–¨–¢–†–£–ï–ú –¢–û–õ–¨–ö–û –ó–ê–ì–†–£–ñ–ï–ù–ù–´–ï –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï–ú –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è image-to-video
  const userImages = chatImages.filter((img) => img.role === "user");
  console.log(
    "üé¨ analyzeVideoContext: User uploaded images for video generation:",
    {
      totalUserImages: userImages.length,
      images: userImages.map((img) => ({
        url: img.url,
        prompt: img.prompt,
        messageIndex: img.messageIndex,
      })),
    }
  );

  if (userImages.length === 0) {
    console.log("üé¨ analyzeVideoContext: No user uploaded images found");
    return {
      confidence: "low",
      reasoning:
        "–í –∏—Å—Ç–æ—Ä–∏–∏ —á–∞—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –¥–ª—è image-to-video",
      metadata: {
        source: "chat_history",
        totalUserImages: 0,
        timestamp: new Date().toISOString(),
      },
    };
  }

  // 5. –ê–ù–ê–õ–ò–ó–ò–†–£–ï–ú –¢–ï–ö–°–¢ –°–û–û–ë–©–ï–ù–ò–Ø —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –≤—Å–µ—Ö 4 —Å–∏—Å—Ç–µ–º
  const messageLower = userMessage.toLowerCase();
  console.log(
    "üé¨ analyzeVideoContext: Analyzing message with all 4 systems:",
    messageLower
  );

  // 5.1. –í–†–ï–ú–ï–ù–ù–û–ô –ê–ù–ê–õ–ò–ó - –∏—â–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Å—Å—ã–ª–∫–∏
  let temporalMatch = null;
  try {
    console.log("üïí VideoContext: Analyzing temporal references...");
    const temporalMatches = await temporalAnalyzer.analyzeTemporalReferences(
      userMessage,
      userImages.map((img) => ({
        ...img,
        mediaType: "image" as const,
      }))
    );

    if (temporalMatches.length > 0 && temporalMatches[0].confidence > 0.6) {
      temporalMatch = temporalMatches[0];
      console.log("üïí VideoContext: Found temporal match:", {
        url: temporalMatch.media.url,
        confidence: temporalMatch.confidence,
        reasoning: temporalMatch.reasoning,
      });
    }
  } catch (error) {
    console.warn("üïí VideoContext: Temporal analysis failed:", error);
  }

  // 5.2. –°–ï–ú–ê–ù–¢–ò–ß–ï–°–ö–ò–ô –ü–û–ò–°–ö - –∏—â–µ–º –ø–æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–º—É
  let semanticMatch = null;
  try {
    console.log("üîç VideoContext: Analyzing semantic content...");
    const semanticResults = semanticIndex.search(messageLower, userImages);

    if (semanticResults.length > 0 && semanticResults[0].relevanceScore > 0.3) {
      semanticMatch = semanticResults[0];
      console.log("üîç VideoContext: Found semantic match:", {
        url: semanticMatch.image.url,
        score: semanticMatch.relevanceScore,
        reasoning: semanticMatch.reasoning,
      });
    }
  } catch (error) {
    console.warn("üîç VideoContext: Semantic search failed:", error);
  }

  // 5.3. –ü–û–ò–°–ö –ü–û –ö–õ–Æ–ß–ï–í–´–ú –°–õ–û–í–ê–ú (legacy –ø–æ–¥–¥–µ—Ä–∂–∫–∞)
  const imageReferences = await analyzeVideoImageReferences(
    messageLower,
    userImages
  );
  console.log(
    "üé¨ analyzeVideoContext: Found image references:",
    imageReferences
  );

  // 6. –í–´–ë–ò–†–ê–ï–ú –õ–£–ß–®–ò–ô –†–ï–ó–£–õ–¨–¢–ê–¢ –∏–∑ –≤—Å–µ—Ö —Å–∏—Å—Ç–µ–º
  let bestMatch = null;
  let bestScore = 0;
  let bestReasoning = "";
  let bestSource = "";

  // –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç 1: –í—Ä–µ–º–µ–Ω–Ω–æ–π –∞–Ω–∞–ª–∏–∑ (–≤—ã—Å—à–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç)
  if (temporalMatch && temporalMatch.confidence > bestScore) {
    bestMatch = temporalMatch.media;
    bestScore = temporalMatch.confidence;
    bestReasoning = `–í—Ä–µ–º–µ–Ω–Ω–∞—è —Å—Å—ã–ª–∫–∞: ${temporalMatch.reasoning}`;
    bestSource = "temporal";
  }

  // –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç 2: –°–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–π –ø–æ–∏—Å–∫
  if (semanticMatch && semanticMatch.relevanceScore > bestScore) {
    bestMatch = semanticMatch.image;
    bestScore = semanticMatch.relevanceScore;
    bestReasoning = `–°–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–π –ø–æ–∏—Å–∫: ${semanticMatch.reasoning}`;
    bestSource = "semantic";
  }

  // –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç 3: –ü–æ–∏—Å–∫ –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º (legacy)
  if (imageReferences.length > 0) {
    const keywordMatch = imageReferences.sort(
      (a, b) => b.relevance - a.relevance
    )[0];
    if (keywordMatch.relevance > bestScore) {
      bestMatch = keywordMatch.image;
      bestScore = keywordMatch.relevance;
      bestReasoning = `–ü–æ–∏—Å–∫ –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º: ${keywordMatch.reasoning}`;
      bestSource = "keywords";
    }
  }

  // –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç 4: –°–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–π –ø–æ–∏—Å–∫ –ø–æ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º (fallback)
  if (!bestMatch) {
    console.log(
      "üé¨ analyzeVideoContext: No explicit references found, trying semantic search on user images"
    );
    const fallbackSemanticMatch = await findUserImageBySemanticContent(
      messageLower,
      userImages
    );

    if (fallbackSemanticMatch) {
      bestMatch = fallbackSemanticMatch;
      bestScore = 0.5; // –°—Ä–µ–¥–Ω–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –¥–ª—è fallback
      bestReasoning = `Fallback —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–π –ø–æ–∏—Å–∫ —Å—Ä–µ–¥–∏ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π`;
      bestSource = "fallback_semantic";
    }
  }

  // 7. FALLBACK –ü–û–ò–°–ö –µ—Å–ª–∏ –æ—Å–Ω–æ–≤–Ω—ã–µ —Å–∏—Å—Ç–µ–º—ã –Ω–µ –¥–∞–ª–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
  if (!bestMatch) {
    console.log(
      "üé¨ analyzeVideoContext: No match found with main systems, trying fallback methods"
    );

    // Fallback 1: –ü–æ–∏—Å–∫ –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º
    const keywordMatch = findUserImageByKeywords(messageLower, userImages);
    if (keywordMatch) {
      bestMatch = keywordMatch;
      bestScore = 0.4;
      bestReasoning = `Fallback –ø–æ–∏—Å–∫ –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º: ${keywordMatch.reasoning}`;
      bestSource = "fallback_keywords";
    }

    // Fallback 2: –≠–≤—Ä–∏—Å—Ç–∏–∫–∏ –¥–ª—è –≤–∏–¥–µ–æ
    if (!bestMatch) {
      const heuristicMatch = findUserImageByVideoHeuristics(
        messageLower,
        userImages
      );
      if (heuristicMatch) {
        bestMatch = heuristicMatch.image;
        bestScore = 0.3;
        bestReasoning = `Fallback —ç–≤—Ä–∏—Å—Ç–∏–∫–∏ –¥–ª—è –≤–∏–¥–µ–æ: ${heuristicMatch.reasoning}`;
        bestSource = "fallback_heuristics";
      }
    }

    // Fallback 3: –ü–æ—Å–ª–µ–¥–Ω–µ–µ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
    if (!bestMatch && userImages.length > 0) {
      bestMatch = userImages[userImages.length - 1];
      bestScore = 0.2;
      bestReasoning =
        "Fallback: –ø–æ—Å–ª–µ–¥–Ω–µ–µ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ";
      bestSource = "fallback_last";
    }
  }

  // 8. –§–û–†–ú–ò–†–£–ï–ú –†–ï–ó–£–õ–¨–¢–ê–¢ —Å –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–º–∏
  if (bestMatch) {
    const confidence =
      bestScore > 0.7 ? "high" : bestScore > 0.4 ? "medium" : "low";

    const result = {
      sourceImageUrl: bestMatch.url,
      sourceImageId: bestMatch.id,
      confidence: confidence as "high" | "medium" | "low",
      reasoning: bestReasoning,
      metadata: {
        source: bestSource,
        score: bestScore,
        totalUserImages: userImages.length,
        timestamp: new Date().toISOString(),
        systems_used: {
          temporal: !!temporalMatch,
          semantic: !!semanticMatch,
          keywords: imageReferences.length > 0,
        },
      },
    };

    console.log("üé¨ analyzeVideoContext: Final result:", {
      sourceImageUrl: result.sourceImageUrl,
      confidence: result.confidence,
      reasoning: result.reasoning,
      metadata: result.metadata,
    });

    // 9. –°–û–•–†–ê–ù–Ø–ï–ú –í –ö–≠–®
    if (
      chatId &&
      CacheUtils.shouldUseCache(userMessage, currentMessageAttachments)
    ) {
      const messageHash = generateMessageHash(
        userMessage,
        currentMessageAttachments
      );
      await contextCache.setCachedContext(chatId, messageHash, "video", {
        sourceUrl: result.sourceImageUrl,
        sourceId: result.sourceImageId,
        mediaType: "video" as const,
        confidence: result.confidence,
        reasoning: result.reasoning,
        metadata: result.metadata,
      });
    }

    // 10. –ó–ê–ü–ò–°–´–í–ê–ï–ú –í–´–ë–û–† –î–õ–Ø –û–ë–£–ß–ï–ù–ò–Ø –ü–†–ï–î–ü–û–ß–¢–ï–ù–ò–ô
    if (userId && chatId) {
      try {
        await userPreferenceLearner.recordUserChoice(
          chatId,
          userId,
          userMessage,
          {
            url: result.sourceImageUrl!,
            id: result.sourceImageId,
            role: "user" as const,
            timestamp: new Date(),
            messageIndex: 0,
            mediaType: "image" as const,
          },
          userImages.map((img) => ({
            ...img,
            mediaType: "image" as const,
          })),
          bestScore,
          bestReasoning
        );
        console.log("üß† VideoContext: Recorded user choice for learning");
      } catch (error) {
        console.warn("üß† VideoContext: Failed to record user choice:", error);
      }
    }

    return result;
  }

  // 11. FALLBACK: –µ—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–µ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
  console.log(
    "üé¨ analyzeVideoContext: No matches found, using last user image as fallback"
  );
  const lastUserImage = userImages[userImages.length - 1];

  const fallbackResult = {
    sourceImageUrl: lastUserImage.url,
    sourceImageId: lastUserImage.id,
    confidence: "low" as const,
    reasoning: `Fallback: –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ø–æ—Å–ª–µ–¥–Ω–µ–µ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è image-to-video`,
    metadata: {
      source: "fallback_last",
      score: 0.1,
      totalUserImages: userImages.length,
      timestamp: new Date().toISOString(),
      systems_used: {
        temporal: false,
        semantic: false,
        keywords: false,
      },
    },
  };

  console.log("üé¨ analyzeVideoContext: Fallback result:", fallbackResult);
  return fallbackResult;
}

/**
 * –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–∞ –ø—Ä–µ–¥–º–µ—Ç —Å—Å—ã–ª–æ–∫ –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è –≤–∏–¥–µ–æ-–∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
 */
async function analyzeVideoImageReferences(
  messageLower: string,
  userImages: ChatImage[]
): Promise<Array<{ image: ChatImage; relevance: number; reasoning: string }>> {
  console.log(
    "üé¨ analyzeVideoImageReferences: Starting pattern matching for:",
    messageLower
  );

  const references: Array<{
    image: ChatImage;
    relevance: number;
    reasoning: string;
  }> = [];

  // –ü–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è —Å—Å—ã–ª–æ–∫ –Ω–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
  const userImagePatterns = [
    // –†—É—Å—Å–∫–∏–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã
    {
      pattern: /(—ç—Ç–æ|—ç—Ç–æ\s+–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ|—ç—Ç–∞\s+–∫–∞—Ä—Ç–∏–Ω–∫–∞|—ç—Ç–æ\s+—Ñ–æ—Ç–æ)/i,
      weight: 0.9,
      description: "–ü—Ä—è–º–∞—è —Å—Å—ã–ª–∫–∞ –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ",
    },
    {
      pattern:
        /(–∑–∞–≥—Ä—É–∂–µ–Ω–Ω[–∞-—è]+|–∑–∞–≥—Ä—É–∂[–∞-—è]+)\s+(–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ|–∫–∞—Ä—Ç–∏–Ω–∫[–∞-—è]+|—Ñ–æ—Ç–æ)/i,
      weight: 0.8,
      description: "–°—Å—ã–ª–∫–∞ –Ω–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ",
    },
    {
      pattern: /(–º–æ–µ|–º–æ[–µ—ë])\s+(–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ|–∫–∞—Ä—Ç–∏–Ω–∫[–∞-—è]+|—Ñ–æ—Ç–æ)/i,
      weight: 0.8,
      description: "–°—Å—ã–ª–∫–∞ –Ω–∞ —Å–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ",
    },
    {
      pattern:
        /(–ø–æ—Å–ª–µ–¥–Ω[–∞-—è]+|–ø—Ä–µ–¥—ã–¥—É—â[–∞-—è]+)\s+(–∑–∞–≥—Ä—É–∂–µ–Ω–Ω[–∞-—è]+|–∑–∞–≥—Ä—É–∂[–∞-—è]+)\s+(–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ|–∫–∞—Ä—Ç–∏–Ω–∫[–∞-—è]+|—Ñ–æ—Ç–æ)/i,
      weight: 0.7,
      description: "–°—Å—ã–ª–∫–∞ –Ω–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–µ/–ø—Ä–µ–¥—ã–¥—É—â–µ–µ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ",
    },
    {
      pattern:
        /(–ø–µ—Ä–≤[–∞-—è]+|–≤—Ç–æ—Ä[–∞-—è]+|—Ç—Ä–µ—Ç—å[–∞-—è]+)\s+(–∑–∞–≥—Ä—É–∂–µ–Ω–Ω[–∞-—è]+|–∑–∞–≥—Ä—É–∂[–∞-—è]+)\s+(–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ|–∫–∞—Ä—Ç–∏–Ω–∫[–∞-—è]+|—Ñ–æ—Ç–æ)/i,
      weight: 0.7,
      description: "–°—Å—ã–ª–∫–∞ –Ω–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–æ –ø–æ—Ä—è–¥–∫—É",
    },
    // –ü–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø–æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–º—É
    {
      pattern:
        /(—Ñ–æ—Ç–æ|–∫–∞—Ä—Ç–∏–Ω–∫[–∞-—è]+|–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ)\s+—Å\s+(–º–∞–ª—å—á–∏–∫|–ø–∞—Ä–µ–Ω—å|—á–µ–ª–æ–≤–µ–∫|–ª—é–¥–∏|–º—É–∂—á–∏–Ω–∞)/i,
      weight: 0.8,
      description: "–°—Å—ã–ª–∫–∞ –Ω–∞ —Ñ–æ—Ç–æ —Å –º–∞–ª—å—á–∏–∫–æ–º/–ø–∞—Ä–Ω–µ–º",
    },
    {
      pattern:
        /(—Ñ–æ—Ç–æ|–∫–∞—Ä—Ç–∏–Ω–∫[–∞-—è]+|–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ)\s+—Å\s+(–¥–µ–≤–æ—á–∫–∞|–∂–µ–Ω—â–∏–Ω–∞|–¥–µ–≤—É—à–∫–∞)/i,
      weight: 0.8,
      description: "–°—Å—ã–ª–∫–∞ –Ω–∞ —Ñ–æ—Ç–æ —Å –¥–µ–≤–æ—á–∫–æ–π/–∂–µ–Ω—â–∏–Ω–æ–π",
    },
    {
      pattern: /(—Ñ–æ—Ç–æ|–∫–∞—Ä—Ç–∏–Ω–∫[–∞-—è]+|–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ)\s+—Å\s+(–º–µ–¥–≤–µ–¥—å|bear)/i,
      weight: 0.8,
      description: "–°—Å—ã–ª–∫–∞ –Ω–∞ —Ñ–æ—Ç–æ —Å –º–µ–¥–≤–µ–¥–µ–º",
    },
    {
      pattern: /(—Ñ–æ—Ç–æ|–∫–∞—Ä—Ç–∏–Ω–∫[–∞-—è]+|–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ)\s+—Å\s+(—Å–æ–ª–Ω—Ü–µ|sun|–ª—É–Ω–∞|moon)/i,
      weight: 0.8,
      description: "–°—Å—ã–ª–∫–∞ –Ω–∞ —Ñ–æ—Ç–æ —Å —Å–æ–ª–Ω—Ü–µ–º/–ª—É–Ω–æ–π",
    },
    // –ê–Ω–≥–ª–∏–π—Å–∫–∏–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã
    {
      pattern: /(this|this\s+image|this\s+picture|this\s+photo)/i,
      weight: 0.9,
      description: "Direct reference to image",
    },
    {
      pattern: /(uploaded|my)\s+(image|picture|photo)/i,
      weight: 0.8,
      description: "Reference to uploaded image",
    },
    {
      pattern: /(last|previous)\s+(uploaded|my)\s+(image|picture|photo)/i,
      weight: 0.7,
      description: "Reference to last/previous uploaded image",
    },
    {
      pattern: /(first|second|third)\s+(uploaded|my)\s+(image|picture|photo)/i,
      weight: 0.7,
      description: "Reference to uploaded image by order",
    },
    // –ê–Ω–≥–ª–∏–π—Å–∫–∏–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø–æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–º—É
    {
      pattern: /(photo|picture|image)\s+with\s+(boy|man|people|person)/i,
      weight: 0.8,
      description: "Reference to photo with boy/man",
    },
    {
      pattern: /(photo|picture|image)\s+with\s+(girl|woman|lady)/i,
      weight: 0.8,
      description: "Reference to photo with girl/woman",
    },
    {
      pattern: /(photo|picture|image)\s+with\s+(bear|sun|moon)/i,
      weight: 0.8,
      description: "Reference to photo with bear/sun/moon",
    },
    {
      pattern: /(take|use)\s+(photo|picture|image)\s+with\s+(.+)/i,
      weight: 0.7,
      description: "Take/use photo with specific content",
    },
  ];

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–∞—Ç—Ç–µ—Ä–Ω—ã
  for (const { pattern, weight, description } of userImagePatterns) {
    if (pattern.test(messageLower)) {
      console.log(
        `üé¨ analyzeVideoImageReferences: Pattern matched: ${description}`
      );

      // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–∞–∫–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤—ã–±—Ä–∞—Ç—å
      let targetImage: ChatImage | null = null;
      let reasoning = description;

      if (messageLower.includes("–ø–æ—Å–ª–µ–¥–Ω") || messageLower.includes("last")) {
        targetImage = userImages[userImages.length - 1];
        reasoning += " - –ø–æ—Å–ª–µ–¥–Ω–µ–µ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ";
      } else if (
        messageLower.includes("–ø—Ä–µ–¥—ã–¥—É—â") ||
        messageLower.includes("previous")
      ) {
        targetImage =
          userImages[userImages.length - 2] ||
          userImages[userImages.length - 1];
        reasoning += " - –ø—Ä–µ–¥—ã–¥—É—â–µ–µ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ";
      } else if (
        messageLower.includes("–ø–µ—Ä–≤") ||
        messageLower.includes("first")
      ) {
        targetImage = userImages[0];
        reasoning += " - –ø–µ—Ä–≤–æ–µ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ";
      } else if (
        messageLower.includes("–≤—Ç–æ—Ä") ||
        messageLower.includes("second")
      ) {
        targetImage = userImages[1];
        reasoning += " - –≤—Ç–æ—Ä–æ–µ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ";
      } else if (
        messageLower.includes("—Ç—Ä–µ—Ç—å") ||
        messageLower.includes("third")
      ) {
        targetImage = userImages[2];
        reasoning += " - —Ç—Ä–µ—Ç—å–µ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ";
      } else {
        // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –±–µ—Ä–µ–º –ø–æ—Å–ª–µ–¥–Ω–µ–µ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        targetImage = userImages[userImages.length - 1];
        reasoning += " - –ø–æ—Å–ª–µ–¥–Ω–µ–µ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ";
      }

      if (targetImage) {
        references.push({
          image: targetImage,
          relevance: weight,
          reasoning,
        });
      }
    }
  }

  return references;
}

/**
 * –°–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–π –ø–æ–∏—Å–∫ –ø–æ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º
 */
async function findUserImageBySemanticContent(
  messageLower: string,
  userImages: ChatImage[]
): Promise<ChatImage | null> {
  console.log(
    "üé¨ findUserImageBySemanticContent: Starting semantic search for user images",
    {
      message: messageLower,
      userImagesCount: userImages.length,
    }
  );

  try {
    // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º –Ω–æ–≤—ã–π —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–π –∏–Ω–¥–µ–∫—Å
    const semanticResults = semanticIndex.search(messageLower, userImages);

    if (semanticResults.length > 0 && semanticResults[0].relevanceScore > 0.3) {
      const bestMatch = semanticResults[0];
      console.log(
        "üé¨ findUserImageBySemanticContent: Found semantic index match:",
        {
          url: bestMatch.image.url,
          score: Math.round(bestMatch.relevanceScore * 100) + "%",
          reasoning: bestMatch.reasoning,
          matchedKeywords: bestMatch.matchedKeywords,
        }
      );
      return bestMatch.image;
    }

    console.log("üé¨ findUserImageBySemanticContent: No semantic matches found");
    return null;
  } catch (error) {
    console.warn(
      "üé¨ findUserImageBySemanticContent: Semantic search failed:",
      error
    );
    return null;
  }
}

/**
 * –ü–æ–∏—Å–∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏
 */
function findUserImageByKeywords(
  messageLower: string,
  userImages: ChatImage[]
): { url: string; id?: string; reasoning: string } | null {
  console.log(
    "üé¨ findUserImageByKeywords: Starting keyword-based search for:",
    messageLower
  );

  // –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
  const keywordPatterns = [
    // –†—É—Å—Å–∫–∏–µ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞
    {
      keywords: ["–º–∞–ª—å—á–∏–∫", "–ø–∞—Ä–µ–Ω—å", "—á–µ–ª–æ–≤–µ–∫", "–º—É–∂—á–∏–Ω–∞"],
      description: "—Å –º–∞–ª—å—á–∏–∫–æ–º/–ø–∞—Ä–Ω–µ–º",
    },
    {
      keywords: ["–¥–µ–≤–æ—á–∫–∞", "–∂–µ–Ω—â–∏–Ω–∞", "–¥–µ–≤—É—à–∫–∞"],
      description: "—Å –¥–µ–≤–æ—á–∫–æ–π/–∂–µ–Ω—â–∏–Ω–æ–π",
    },
    { keywords: ["–º–µ–¥–≤–µ–¥—å", "bear"], description: "—Å –º–µ–¥–≤–µ–¥–µ–º" },
    {
      keywords: ["—Å–æ–ª–Ω—Ü–µ", "sun", "–ª—É–Ω–∞", "moon"],
      description: "—Å —Å–æ–ª–Ω—Ü–µ–º/–ª—É–Ω–æ–π",
    },
    { keywords: ["—Å–æ–±–∞–∫–∞", "dog", "–∫–æ—Ç", "cat"], description: "—Å –∂–∏–≤–æ—Ç–Ω—ã–º" },
    { keywords: ["–º–∞—à–∏–Ω–∞", "car", "–∞–≤—Ç–æ–º–æ–±–∏–ª—å"], description: "—Å –º–∞—à–∏–Ω–æ–π" },
    { keywords: ["–¥–æ–º", "house", "–∑–¥–∞–Ω–∏–µ"], description: "—Å –¥–æ–º–æ–º/–∑–¥–∞–Ω–∏–µ–º" },
    {
      keywords: ["–ø—Ä–∏—Ä–æ–¥–∞", "nature", "–ª–µ—Å", "forest"],
      description: "—Å –ø—Ä–∏—Ä–æ–¥–æ–π",
    },
    // –ê–Ω–≥–ª–∏–π—Å–∫–∏–µ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞
    {
      keywords: ["boy", "man", "person", "people"],
      description: "with boy/man",
    },
    { keywords: ["girl", "woman", "lady"], description: "with girl/woman" },
    { keywords: ["animal", "pet"], description: "with animal" },
    { keywords: ["landscape", "nature"], description: "with landscape" },
  ];

  // –ò—â–µ–º —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤
  for (const pattern of keywordPatterns) {
    const hasKeyword = pattern.keywords.some((keyword) =>
      messageLower.includes(keyword.toLowerCase())
    );

    if (hasKeyword) {
      console.log(
        `üé¨ findUserImageByKeywords: Found keyword pattern: ${pattern.description}`
      );

      // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–µ–µ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ–º
      const lastImage = userImages[userImages.length - 1];
      if (lastImage) {
        return {
          url: lastImage.url,
          id: lastImage.id,
          reasoning: `–Ω–∞–π–¥–µ–Ω–æ –ø–æ –∫–ª—é—á–µ–≤–æ–º—É —Å–ª–æ–≤—É "${pattern.description}" - –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ø–æ—Å–ª–µ–¥–Ω–µ–µ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ`,
        };
      }
    }
  }

  console.log("üé¨ findUserImageByKeywords: No keyword patterns matched");
  return null;
}

/**
 * –≠–≤—Ä–∏—Å—Ç–∏–∫–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ –≤–∏–¥–µ–æ-–∫–æ–Ω—Ç–µ–∫—Å—Ç–µ
 */
function findUserImageByVideoHeuristics(
  messageLower: string,
  userImages: ChatImage[]
): { image: ChatImage; reasoning: string } | null {
  console.log(
    "üé¨ findUserImageByVideoHeuristics: Analyzing message for video heuristics:",
    messageLower
  );

  // –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏—Ç —Å–ª–æ–≤–∞ –æ —Å–æ–∑–¥–∞–Ω–∏–∏ –≤–∏–¥–µ–æ –∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
  const videoCreationWords = [
    "—Å–¥–µ–ª–∞–π –≤–∏–¥–µ–æ",
    "—Å–æ–∑–¥–∞–π –≤–∏–¥–µ–æ",
    "—Å–≥–µ–Ω–µ—Ä–∏—Ä—É–π –≤–∏–¥–µ–æ",
    "—Å–¥–µ–ª–∞–π —Ä–æ–ª–∏–∫",
    "—Å–æ–∑–¥–∞–π —Ä–æ–ª–∏–∫",
    "—Å–≥–µ–Ω–µ—Ä–∏—Ä—É–π —Ä–æ–ª–∏–∫",
    "–æ–∂–∏–≤–∏",
    "–∞–Ω–∏–º–∏—Ä—É–π",
    "—Å–¥–µ–ª–∞–π –¥–≤–∏–∂—É—â–∏–º—Å—è",
    "make video",
    "create video",
    "generate video",
    "animate",
    "bring to life",
    "make it move",
  ];

  const hasVideoCreationIntent = videoCreationWords.some((word) =>
    messageLower.includes(word.toLowerCase())
  );

  console.log(
    "üé¨ findUserImageByVideoHeuristics: Has video creation intent:",
    hasVideoCreationIntent
  );

  if (hasVideoCreationIntent) {
    // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ—Å–ª–µ–¥–Ω–µ–µ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
    const lastUserImage = userImages[userImages.length - 1];
    console.log(
      "üé¨ findUserImageByVideoHeuristics: Video creation intent detected, returning:",
      lastUserImage.url
    );
    return {
      image: lastUserImage,
      reasoning:
        "–Ω–∞–º–µ—Ä–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–∏—è –≤–∏–¥–µ–æ - –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ø–æ—Å–ª–µ–¥–Ω–µ–µ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ",
    };
  }

  return null;
}
