import { semanticIndex } from "../context/semantic-index";

export interface VideoContext {
  sourceImageUrl?: string;
  sourceImageId?: string;
  confidence: "high" | "medium" | "low";
  reasoning: string;
}

export interface ChatImage {
  url: string;
  id?: string;
  role: "user" | "assistant";
  timestamp: Date;
  prompt?: string;
  messageIndex: number;
  mediaType: "image";
}

/**
 * –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç —á–∞—Ç–∞ –¥–ª—è –≤–∏–¥–µ–æ-–≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
 * –§–æ–∫—É—Å–∏—Ä—É–µ—Ç—Å—è –Ω–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è—Ö
 */
interface MessageAttachment {
  url?: string;
  contentType?: string;
  name?: string;
  id?: string;
}

export async function analyzeVideoContext(
  userMessage: string,
  chatImages: ChatImage[],
  currentMessageAttachments?: MessageAttachment[]
): Promise<VideoContext> {
  console.log("üé¨ analyzeVideoContext: Starting analysis", {
    userMessage,
    chatImagesLength: chatImages.length,
    currentMessageAttachments: currentMessageAttachments,
  });

  // 1. –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
  const userImages = chatImages.filter((img) => img.role === "user");
  console.log("üé¨ analyzeVideoContext: User uploaded images:", {
    totalUserImages: userImages.length,
    images: userImages.map((img) => ({
      url: img.url,
      prompt: img.prompt,
      messageIndex: img.messageIndex,
    })),
  });

  if (userImages.length === 0) {
    console.log("üé¨ analyzeVideoContext: No user uploaded images found");
    return {
      confidence: "low",
      reasoning:
        "–í –∏—Å—Ç–æ—Ä–∏–∏ —á–∞—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π",
    };
  }

  // 2. –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–∞ –ø—Ä–µ–¥–º–µ—Ç —Å—Å—ã–ª–æ–∫ –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
  const messageLower = userMessage.toLowerCase();
  console.log(
    "üé¨ analyzeVideoContext: Analyzing message for image references:",
    messageLower
  );

  // –ü–æ–∏—Å–∫ –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º –¥–ª—è –≤–∏–¥–µ–æ-–∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
  const imageReferences = await analyzeVideoImageReferences(
    messageLower,
    userImages
  );
  console.log(
    "üé¨ analyzeVideoContext: Found image references:",
    imageReferences
  );

  if (imageReferences.length > 0) {
    // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç–∏
    imageReferences.sort((a, b) => b.relevance - a.relevance);
    const bestMatch = imageReferences[0];
    console.log("üé¨ analyzeVideoContext: Best match:", {
      image: bestMatch.image,
      relevance: bestMatch.relevance,
      reasoning: bestMatch.reasoning,
    });

    return {
      sourceImageUrl: bestMatch.image.url,
      sourceImageId: bestMatch.image.id,
      confidence: bestMatch.relevance > 0.7 ? "high" : "medium",
      reasoning: `–ù–∞–π–¥–µ–Ω–∞ —Å—Å—ã–ª–∫–∞ –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: ${bestMatch.reasoning}`,
    };
  }

  // 3. –ï—Å–ª–∏ –Ω–µ—Ç —è–≤–Ω—ã—Ö —Å—Å—ã–ª–æ–∫, –ø—Ä–æ–±—É–µ–º —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–π –ø–æ–∏—Å–∫ –ø–æ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º
  console.log(
    "üé¨ analyzeVideoContext: No explicit references found, trying semantic search on user images"
  );
  const semanticMatch = await findUserImageBySemanticContent(
    messageLower,
    userImages
  );
  console.log("üé¨ analyzeVideoContext: Semantic match:", semanticMatch);

  if (semanticMatch) {
    return {
      sourceImageUrl: semanticMatch.url,
      sourceImageId: semanticMatch.id,
      confidence: "medium",
      reasoning: `–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–∞–π–¥–µ–Ω–æ –ø–æ —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–æ–º—É –ø–æ–∏—Å–∫—É —Å—Ä–µ–¥–∏ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º`,
    };
  }

  // 3.5. –ï—Å–ª–∏ —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–π –ø–æ–∏—Å–∫ –Ω–µ –¥–∞–ª —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤, –ø—Ä–æ–±—É–µ–º –ø–æ–∏—Å–∫ –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏
  console.log(
    "üé¨ analyzeVideoContext: No semantic match found, trying keyword-based fallback search"
  );
  const keywordMatch = findUserImageByKeywords(messageLower, userImages);
  console.log("üé¨ analyzeVideoContext: Keyword match:", keywordMatch);

  if (keywordMatch) {
    return {
      sourceImageUrl: keywordMatch.url,
      sourceImageId: keywordMatch.id,
      confidence: "medium",
      reasoning: `–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–∞–π–¥–µ–Ω–æ –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º: ${keywordMatch.reasoning}`,
    };
  }

  // 4. –ï—Å–ª–∏ —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–π –ø–æ–∏—Å–∫ –Ω–µ –¥–∞–ª —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤, –∏—Å–ø–æ–ª—å–∑—É–µ–º —ç–≤—Ä–∏—Å—Ç–∏–∫–∏ –¥–ª—è –≤–∏–¥–µ–æ
  console.log(
    "üé¨ analyzeVideoContext: No semantic match found, trying video heuristics"
  );
  const heuristicMatch = findUserImageByVideoHeuristics(
    messageLower,
    userImages
  );
  console.log("üé¨ analyzeVideoContext: Heuristic match:", heuristicMatch);

  if (heuristicMatch) {
    return {
      sourceImageUrl: heuristicMatch.image.url,
      sourceImageId: heuristicMatch.image.id,
      confidence: "medium",
      reasoning: `–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤—ã–±—Ä–∞–Ω–æ –ø–æ —ç–≤—Ä–∏—Å—Ç–∏–∫–µ –¥–ª—è –≤–∏–¥–µ–æ: ${heuristicMatch.reasoning}`,
    };
  }

  // 5. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –∫–∞–∫ fallback
  if (currentMessageAttachments?.length) {
    console.log(
      "üé¨ analyzeVideoContext: Checking current message attachments as fallback"
    );
    const currentImage = currentMessageAttachments.find(
      (a: MessageAttachment) =>
        typeof a?.url === "string" &&
        /^https?:\/\//.test(a.url) &&
        String(a?.contentType || "").startsWith("image/")
    );

    if (currentImage?.url) {
      console.log(
        "üé¨ analyzeVideoContext: Found image in current message as fallback:",
        currentImage.url
      );
      return {
        sourceImageUrl: currentImage.url,
        sourceImageId: currentImage.id,
        confidence: "medium",
        reasoning:
          "–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–∞–π–¥–µ–Ω–æ –≤ —Ç–µ–∫—É—â–µ–º —Å–æ–æ–±—â–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (fallback)",
      };
    }
  }

  // 6. –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ—Å–ª–µ–¥–Ω–µ–µ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
  console.log(
    "üé¨ analyzeVideoContext: Using final fallback - last user uploaded image"
  );
  const lastUserImage = userImages[userImages.length - 1];
  console.log("üé¨ analyzeVideoContext: Last user image:", {
    url: lastUserImage.url,
    prompt: lastUserImage.prompt,
  });

  return {
    sourceImageUrl: lastUserImage.url,
    sourceImageId: lastUserImage.id,
    confidence: "low",
    reasoning: `–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ø–æ—Å–ª–µ–¥–Ω–µ–µ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ`,
  };
}

/**
 * –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–∞ –ø—Ä–µ–¥–º–µ—Ç —Å—Å—ã–ª–æ–∫ –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è –≤–∏–¥–µ–æ-–∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
 */
async function analyzeVideoImageReferences(
  messageLower: string,
  userImages: ChatImage[]
): Promise<Array<{ image: ChatImage; relevance: number; reasoning: string }>> {
  console.log(
    "üé¨ analyzeVideoImageReferences: Starting pattern matching for:",
    messageLower
  );

  const references: Array<{
    image: ChatImage;
    relevance: number;
    reasoning: string;
  }> = [];

  // –ü–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è —Å—Å—ã–ª–æ–∫ –Ω–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
  const userImagePatterns = [
    // –†—É—Å—Å–∫–∏–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã
    {
      pattern: /(—ç—Ç–æ|—ç—Ç–æ\s+–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ|—ç—Ç–∞\s+–∫–∞—Ä—Ç–∏–Ω–∫–∞|—ç—Ç–æ\s+—Ñ–æ—Ç–æ)/i,
      weight: 0.9,
      description: "–ü—Ä—è–º–∞—è —Å—Å—ã–ª–∫–∞ –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ",
    },
    {
      pattern:
        /(–∑–∞–≥—Ä—É–∂–µ–Ω–Ω[–∞-—è]+|–∑–∞–≥—Ä—É–∂[–∞-—è]+)\s+(–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ|–∫–∞—Ä—Ç–∏–Ω–∫[–∞-—è]+|—Ñ–æ—Ç–æ)/i,
      weight: 0.8,
      description: "–°—Å—ã–ª–∫–∞ –Ω–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ",
    },
    {
      pattern: /(–º–æ–µ|–º–æ[–µ—ë])\s+(–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ|–∫–∞—Ä—Ç–∏–Ω–∫[–∞-—è]+|—Ñ–æ—Ç–æ)/i,
      weight: 0.8,
      description: "–°—Å—ã–ª–∫–∞ –Ω–∞ —Å–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ",
    },
    {
      pattern:
        /(–ø–æ—Å–ª–µ–¥–Ω[–∞-—è]+|–ø—Ä–µ–¥—ã–¥—É—â[–∞-—è]+)\s+(–∑–∞–≥—Ä—É–∂–µ–Ω–Ω[–∞-—è]+|–∑–∞–≥—Ä—É–∂[–∞-—è]+)\s+(–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ|–∫–∞—Ä—Ç–∏–Ω–∫[–∞-—è]+|—Ñ–æ—Ç–æ)/i,
      weight: 0.7,
      description: "–°—Å—ã–ª–∫–∞ –Ω–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–µ/–ø—Ä–µ–¥—ã–¥—É—â–µ–µ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ",
    },
    {
      pattern:
        /(–ø–µ—Ä–≤[–∞-—è]+|–≤—Ç–æ—Ä[–∞-—è]+|—Ç—Ä–µ—Ç—å[–∞-—è]+)\s+(–∑–∞–≥—Ä—É–∂–µ–Ω–Ω[–∞-—è]+|–∑–∞–≥—Ä—É–∂[–∞-—è]+)\s+(–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ|–∫–∞—Ä—Ç–∏–Ω–∫[–∞-—è]+|—Ñ–æ—Ç–æ)/i,
      weight: 0.7,
      description: "–°—Å—ã–ª–∫–∞ –Ω–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–æ –ø–æ—Ä—è–¥–∫—É",
    },
    // –ü–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø–æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–º—É
    {
      pattern:
        /(—Ñ–æ—Ç–æ|–∫–∞—Ä—Ç–∏–Ω–∫[–∞-—è]+|–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ)\s+—Å\s+(–º–∞–ª—å—á–∏–∫|–ø–∞—Ä–µ–Ω—å|—á–µ–ª–æ–≤–µ–∫|–ª—é–¥–∏|–º—É–∂—á–∏–Ω–∞)/i,
      weight: 0.8,
      description: "–°—Å—ã–ª–∫–∞ –Ω–∞ —Ñ–æ—Ç–æ —Å –º–∞–ª—å—á–∏–∫–æ–º/–ø–∞—Ä–Ω–µ–º",
    },
    {
      pattern:
        /(—Ñ–æ—Ç–æ|–∫–∞—Ä—Ç–∏–Ω–∫[–∞-—è]+|–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ)\s+—Å\s+(–¥–µ–≤–æ—á–∫–∞|–∂–µ–Ω—â–∏–Ω–∞|–¥–µ–≤—É—à–∫–∞)/i,
      weight: 0.8,
      description: "–°—Å—ã–ª–∫–∞ –Ω–∞ —Ñ–æ—Ç–æ —Å –¥–µ–≤–æ—á–∫–æ–π/–∂–µ–Ω—â–∏–Ω–æ–π",
    },
    {
      pattern: /(—Ñ–æ—Ç–æ|–∫–∞—Ä—Ç–∏–Ω–∫[–∞-—è]+|–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ)\s+—Å\s+(–º–µ–¥–≤–µ–¥—å|bear)/i,
      weight: 0.8,
      description: "–°—Å—ã–ª–∫–∞ –Ω–∞ —Ñ–æ—Ç–æ —Å –º–µ–¥–≤–µ–¥–µ–º",
    },
    {
      pattern: /(—Ñ–æ—Ç–æ|–∫–∞—Ä—Ç–∏–Ω–∫[–∞-—è]+|–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ)\s+—Å\s+(—Å–æ–ª–Ω—Ü–µ|sun|–ª—É–Ω–∞|moon)/i,
      weight: 0.8,
      description: "–°—Å—ã–ª–∫–∞ –Ω–∞ —Ñ–æ—Ç–æ —Å —Å–æ–ª–Ω—Ü–µ–º/–ª—É–Ω–æ–π",
    },
    // –ê–Ω–≥–ª–∏–π—Å–∫–∏–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã
    {
      pattern: /(this|this\s+image|this\s+picture|this\s+photo)/i,
      weight: 0.9,
      description: "Direct reference to image",
    },
    {
      pattern: /(uploaded|my)\s+(image|picture|photo)/i,
      weight: 0.8,
      description: "Reference to uploaded image",
    },
    {
      pattern: /(last|previous)\s+(uploaded|my)\s+(image|picture|photo)/i,
      weight: 0.7,
      description: "Reference to last/previous uploaded image",
    },
    {
      pattern: /(first|second|third)\s+(uploaded|my)\s+(image|picture|photo)/i,
      weight: 0.7,
      description: "Reference to uploaded image by order",
    },
    // –ê–Ω–≥–ª–∏–π—Å–∫–∏–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø–æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–º—É
    {
      pattern: /(photo|picture|image)\s+with\s+(boy|man|people|person)/i,
      weight: 0.8,
      description: "Reference to photo with boy/man",
    },
    {
      pattern: /(photo|picture|image)\s+with\s+(girl|woman|lady)/i,
      weight: 0.8,
      description: "Reference to photo with girl/woman",
    },
    {
      pattern: /(photo|picture|image)\s+with\s+(bear|sun|moon)/i,
      weight: 0.8,
      description: "Reference to photo with bear/sun/moon",
    },
    {
      pattern: /(take|use)\s+(photo|picture|image)\s+with\s+(.+)/i,
      weight: 0.7,
      description: "Take/use photo with specific content",
    },
  ];

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–∞—Ç—Ç–µ—Ä–Ω—ã
  for (const { pattern, weight, description } of userImagePatterns) {
    if (pattern.test(messageLower)) {
      console.log(
        `üé¨ analyzeVideoImageReferences: Pattern matched: ${description}`
      );

      // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–∞–∫–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤—ã–±—Ä–∞—Ç—å
      let targetImage: ChatImage | null = null;
      let reasoning = description;

      if (messageLower.includes("–ø–æ—Å–ª–µ–¥–Ω") || messageLower.includes("last")) {
        targetImage = userImages[userImages.length - 1];
        reasoning += " - –ø–æ—Å–ª–µ–¥–Ω–µ–µ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ";
      } else if (
        messageLower.includes("–ø—Ä–µ–¥—ã–¥—É—â") ||
        messageLower.includes("previous")
      ) {
        targetImage =
          userImages[userImages.length - 2] ||
          userImages[userImages.length - 1];
        reasoning += " - –ø—Ä–µ–¥—ã–¥—É—â–µ–µ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ";
      } else if (
        messageLower.includes("–ø–µ—Ä–≤") ||
        messageLower.includes("first")
      ) {
        targetImage = userImages[0];
        reasoning += " - –ø–µ—Ä–≤–æ–µ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ";
      } else if (
        messageLower.includes("–≤—Ç–æ—Ä") ||
        messageLower.includes("second")
      ) {
        targetImage = userImages[1];
        reasoning += " - –≤—Ç–æ—Ä–æ–µ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ";
      } else if (
        messageLower.includes("—Ç—Ä–µ—Ç—å") ||
        messageLower.includes("third")
      ) {
        targetImage = userImages[2];
        reasoning += " - —Ç—Ä–µ—Ç—å–µ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ";
      } else {
        // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –±–µ—Ä–µ–º –ø–æ—Å–ª–µ–¥–Ω–µ–µ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        targetImage = userImages[userImages.length - 1];
        reasoning += " - –ø–æ—Å–ª–µ–¥–Ω–µ–µ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ";
      }

      if (targetImage) {
        references.push({
          image: targetImage,
          relevance: weight,
          reasoning,
        });
      }
    }
  }

  return references;
}

/**
 * –°–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–π –ø–æ–∏—Å–∫ –ø–æ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º
 */
async function findUserImageBySemanticContent(
  messageLower: string,
  userImages: ChatImage[]
): Promise<ChatImage | null> {
  console.log(
    "üé¨ findUserImageBySemanticContent: Starting semantic search for user images",
    {
      message: messageLower,
      userImagesCount: userImages.length,
    }
  );

  try {
    // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º –Ω–æ–≤—ã–π —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–π –∏–Ω–¥–µ–∫—Å
    const semanticResults = semanticIndex.search(messageLower, userImages);

    if (semanticResults.length > 0 && semanticResults[0].relevanceScore > 0.3) {
      const bestMatch = semanticResults[0];
      console.log(
        "üé¨ findUserImageBySemanticContent: Found semantic index match:",
        {
          url: bestMatch.image.url,
          score: Math.round(bestMatch.relevanceScore * 100) + "%",
          reasoning: bestMatch.reasoning,
          matchedKeywords: bestMatch.matchedKeywords,
        }
      );
      return bestMatch.image;
    }

    console.log("üé¨ findUserImageBySemanticContent: No semantic matches found");
    return null;
  } catch (error) {
    console.warn(
      "üé¨ findUserImageBySemanticContent: Semantic search failed:",
      error
    );
    return null;
  }
}

/**
 * –ü–æ–∏—Å–∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏
 */
function findUserImageByKeywords(
  messageLower: string,
  userImages: ChatImage[]
): { url: string; id?: string; reasoning: string } | null {
  console.log(
    "üé¨ findUserImageByKeywords: Starting keyword-based search for:",
    messageLower
  );

  // –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
  const keywordPatterns = [
    // –†—É—Å—Å–∫–∏–µ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞
    {
      keywords: ["–º–∞–ª—å—á–∏–∫", "–ø–∞—Ä–µ–Ω—å", "—á–µ–ª–æ–≤–µ–∫", "–º—É–∂—á–∏–Ω–∞"],
      description: "—Å –º–∞–ª—å—á–∏–∫–æ–º/–ø–∞—Ä–Ω–µ–º",
    },
    {
      keywords: ["–¥–µ–≤–æ—á–∫–∞", "–∂–µ–Ω—â–∏–Ω–∞", "–¥–µ–≤—É—à–∫–∞"],
      description: "—Å –¥–µ–≤–æ—á–∫–æ–π/–∂–µ–Ω—â–∏–Ω–æ–π",
    },
    { keywords: ["–º–µ–¥–≤–µ–¥—å", "bear"], description: "—Å –º–µ–¥–≤–µ–¥–µ–º" },
    {
      keywords: ["—Å–æ–ª–Ω—Ü–µ", "sun", "–ª—É–Ω–∞", "moon"],
      description: "—Å —Å–æ–ª–Ω—Ü–µ–º/–ª—É–Ω–æ–π",
    },
    { keywords: ["—Å–æ–±–∞–∫–∞", "dog", "–∫–æ—Ç", "cat"], description: "—Å –∂–∏–≤–æ—Ç–Ω—ã–º" },
    { keywords: ["–º–∞—à–∏–Ω–∞", "car", "–∞–≤—Ç–æ–º–æ–±–∏–ª—å"], description: "—Å –º–∞—à–∏–Ω–æ–π" },
    { keywords: ["–¥–æ–º", "house", "–∑–¥–∞–Ω–∏–µ"], description: "—Å –¥–æ–º–æ–º/–∑–¥–∞–Ω–∏–µ–º" },
    {
      keywords: ["–ø—Ä–∏—Ä–æ–¥–∞", "nature", "–ª–µ—Å", "forest"],
      description: "—Å –ø—Ä–∏—Ä–æ–¥–æ–π",
    },
    // –ê–Ω–≥–ª–∏–π—Å–∫–∏–µ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞
    {
      keywords: ["boy", "man", "person", "people"],
      description: "with boy/man",
    },
    { keywords: ["girl", "woman", "lady"], description: "with girl/woman" },
    { keywords: ["animal", "pet"], description: "with animal" },
    { keywords: ["landscape", "nature"], description: "with landscape" },
  ];

  // –ò—â–µ–º —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤
  for (const pattern of keywordPatterns) {
    const hasKeyword = pattern.keywords.some((keyword) =>
      messageLower.includes(keyword.toLowerCase())
    );

    if (hasKeyword) {
      console.log(
        `üé¨ findUserImageByKeywords: Found keyword pattern: ${pattern.description}`
      );

      // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–µ–µ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ–º
      const lastImage = userImages[userImages.length - 1];
      if (lastImage) {
        return {
          url: lastImage.url,
          id: lastImage.id,
          reasoning: `–Ω–∞–π–¥–µ–Ω–æ –ø–æ –∫–ª—é—á–µ–≤–æ–º—É —Å–ª–æ–≤—É "${pattern.description}" - –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ø–æ—Å–ª–µ–¥–Ω–µ–µ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ`,
        };
      }
    }
  }

  console.log("üé¨ findUserImageByKeywords: No keyword patterns matched");
  return null;
}

/**
 * –≠–≤—Ä–∏—Å—Ç–∏–∫–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ –≤–∏–¥–µ–æ-–∫–æ–Ω—Ç–µ–∫—Å—Ç–µ
 */
function findUserImageByVideoHeuristics(
  messageLower: string,
  userImages: ChatImage[]
): { image: ChatImage; reasoning: string } | null {
  console.log(
    "üé¨ findUserImageByVideoHeuristics: Analyzing message for video heuristics:",
    messageLower
  );

  // –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏—Ç —Å–ª–æ–≤–∞ –æ —Å–æ–∑–¥–∞–Ω–∏–∏ –≤–∏–¥–µ–æ –∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
  const videoCreationWords = [
    "—Å–¥–µ–ª–∞–π –≤–∏–¥–µ–æ",
    "—Å–æ–∑–¥–∞–π –≤–∏–¥–µ–æ",
    "—Å–≥–µ–Ω–µ—Ä–∏—Ä—É–π –≤–∏–¥–µ–æ",
    "—Å–¥–µ–ª–∞–π —Ä–æ–ª–∏–∫",
    "—Å–æ–∑–¥–∞–π —Ä–æ–ª–∏–∫",
    "—Å–≥–µ–Ω–µ—Ä–∏—Ä—É–π —Ä–æ–ª–∏–∫",
    "–æ–∂–∏–≤–∏",
    "–∞–Ω–∏–º–∏—Ä—É–π",
    "—Å–¥–µ–ª–∞–π –¥–≤–∏–∂—É—â–∏–º—Å—è",
    "make video",
    "create video",
    "generate video",
    "animate",
    "bring to life",
    "make it move",
  ];

  const hasVideoCreationIntent = videoCreationWords.some((word) =>
    messageLower.includes(word.toLowerCase())
  );

  console.log(
    "üé¨ findUserImageByVideoHeuristics: Has video creation intent:",
    hasVideoCreationIntent
  );

  if (hasVideoCreationIntent) {
    // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ—Å–ª–µ–¥–Ω–µ–µ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
    const lastUserImage = userImages[userImages.length - 1];
    console.log(
      "üé¨ findUserImageByVideoHeuristics: Video creation intent detected, returning:",
      lastUserImage.url
    );
    return {
      image: lastUserImage,
      reasoning:
        "–Ω–∞–º–µ—Ä–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–∏—è –≤–∏–¥–µ–æ - –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ø–æ—Å–ª–µ–¥–Ω–µ–µ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ",
    };
  }

  return null;
}
