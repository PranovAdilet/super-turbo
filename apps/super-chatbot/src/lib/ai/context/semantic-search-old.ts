/**
 * –°–∏—Å—Ç–µ–º–∞ —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø–æ–∏—Å–∫–∞ –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è –ø–æ–Ω–∏–º–∞–Ω–∏—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
 * –ò—Å–ø–æ–ª—å–∑—É–µ—Ç –≤–µ–∫—Ç–æ—Ä–Ω—ã–µ embeddings –¥–ª—è –ø–æ–∏—Å–∫–∞ —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏ –ø–æ—Ö–æ–∂–∏—Ö –º–µ–¥–∏–∞
 */

import type { ChatMedia } from "./universal-context";

interface SemanticMatch {
  media: ChatMedia;
  similarity: number;
  reasoning: string;
  matchedKeywords: string[];
}

interface EmbeddingVector {
  values: number[];
  metadata: {
    mediaId: string;
    text: string;
    timestamp: number;
  };
}

/**
 * –ü—Ä–æ—Å—Ç–æ–π –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–æ–≥–æ —Å—Ö–æ–¥—Å—Ç–≤–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤
 * –í –±—É–¥—É—â–µ–º –º–æ–∂–µ—Ç –±—ã—Ç—å –∑–∞–º–µ–Ω–µ–Ω –Ω–∞ –ø–æ–ª–Ω–æ—Ü–µ–Ω–Ω—ã–π –≤–µ–∫—Ç–æ—Ä–Ω—ã–π –ø–æ–∏—Å–∫ —Å embeddings
 */
export class SemanticContextAnalyzer {
  private keywordEmbeddings = new Map<string, number[]>();
  private mediaEmbeddings = new Map<string, EmbeddingVector>();

  // –í–µ—Å–∞ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
  private readonly weights = {
    prompt: 1.0,
    fileName: 0.8,
    url: 0.3,
    role: 0.2,
  };

  /**
   * –ù–∞—Ö–æ–¥–∏—Ç —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏ –ø–æ—Ö–æ–∂–∏–µ –º–µ–¥–∏–∞-—Ñ–∞–π–ª—ã
   */
  async findSimilarMedia(
    query: string,
    chatMedia: ChatMedia[],
    threshold: number = 0.6
  ): Promise<SemanticMatch[]> {
    console.log(
      `üîç SemanticSearch: Searching for "${query}" in ${chatMedia.length} media files`
    );

    const queryKeywords = this.extractKeywords(query);
    const matches: SemanticMatch[] = [];

    for (const media of chatMedia) {
      const similarity = await this.calculateSimilarity(queryKeywords, media);

      if (similarity >= threshold) {
        const matchedKeywords = this.findMatchedKeywords(queryKeywords, media);
        matches.push({
          media,
          similarity,
          reasoning: `–°–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–æ–µ —Å—Ö–æ–¥—Å—Ç–≤–æ: ${Math.round(similarity * 100)}% (${matchedKeywords.join(", ")})`,
          matchedKeywords,
        });
      }
    }

    // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —É–±—ã–≤–∞–Ω–∏—é —Å—Ö–æ–¥—Å—Ç–≤–∞
    matches.sort((a, b) => b.similarity - a.similarity);

    console.log(
      `üéØ SemanticSearch: Found ${matches.length} similar media files`
    );
    return matches;
  }

  /**
   * –ò–∑–≤–ª–µ–∫–∞–µ—Ç –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –∏–∑ —Ç–µ–∫—Å—Ç–∞
   */
  private extractKeywords(text: string): string[] {
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤
    // –∏–∑ —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–æ–≥–æ –∏–Ω–¥–µ–∫—Å–∞ –¥–ª—è –∫–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç–∏
    const { semanticIndex } = require('./semantic-index');
    return semanticIndex.extractKeywords(text);
      // –ü—Ä–∏—Ä–æ–¥–∞
      nature: [
        "–ª—É–Ω–∞",
        "moon",
        "—Å–æ–ª–Ω—Ü–µ",
        "sun",
        "–∑–≤–µ–∑–¥—ã",
        "stars",
        "–Ω–µ–±–æ",
        "sky",
        "–æ–±–ª–∞–∫–∞",
        "clouds",
        "–¥–æ–∂–¥—å",
        "rain",
        "—Å–Ω–µ–≥",
        "snow",
        "–ª–µ—Å",
        "forest",
        "–º–æ—Ä–µ",
        "sea",
        "–≥–æ—Ä—ã",
        "mountains",
      ],

      // –ñ–∏–≤–æ—Ç–Ω—ã–µ
      animals: [
        "—Å–æ–±–∞–∫–∞",
        "dog",
        "–∫–æ—à–∫–∞",
        "cat",
        "–ø—Ç–∏—Ü–∞",
        "bird",
        "—Ä—ã–±–∞",
        "fish",
        "–ª–æ—à–∞–¥—å",
        "horse",
        "–∫–æ—Ä–æ–≤–∞",
        "cow",
      ],

      // –õ—é–¥–∏
      people: [
        "–¥–µ–≤–æ—á–∫–∞",
        "girl",
        "–º–∞–ª—å—á–∏–∫",
        "boy",
        "—Ä–µ–±–µ–Ω–æ–∫",
        "child",
        "—Å–µ–º—å—è",
        "family",
        "—á–µ–ª–æ–≤–µ–∫",
        "person",
        "–∂–µ–Ω—â–∏–Ω–∞",
        "woman",
        "–º—É–∂—á–∏–Ω–∞",
        "man",
      ],

      // –¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç
      transport: [
        "–º–∞—à–∏–Ω–∞",
        "car",
        "—Å–∞–º–æ–ª–µ—Ç",
        "airplane",
        "–ø–æ–µ–∑–¥",
        "train",
        "–≤–µ–ª–æ—Å–∏–ø–µ–¥",
        "bicycle",
        "–º–æ—Ç–æ—Ü–∏–∫–ª",
        "motorcycle",
        "–∫–æ—Ä–∞–±–ª—å",
        "ship",
      ],

      // –ó–¥–∞–Ω–∏—è
      buildings: [
        "–¥–æ–º",
        "house",
        "–∑–∞–º–æ–∫",
        "castle",
        "—Ü–µ—Ä–∫–æ–≤—å",
        "church",
        "—à–∫–æ–ª–∞",
        "school",
        "–±–æ–ª—å–Ω–∏—Ü–∞",
        "hospital",
      ],

      // –ï–¥–∞
      food: [
        "–ø–∏—Ü—Ü–∞",
        "pizza",
        "—Ç–æ—Ä—Ç",
        "cake",
        "—Ñ—Ä—É–∫—Ç—ã",
        "fruits",
        "–æ–≤–æ—â–∏",
        "vegetables",
      ],

      // –¶–≤–µ—Ç–∞
      colors: [
        "–∫—Ä–∞—Å–Ω—ã–π",
        "red",
        "—Å–∏–Ω–∏–π",
        "blue",
        "–∑–µ–ª–µ–Ω—ã–π",
        "green",
        "–∂–µ–ª—Ç—ã–π",
        "yellow",
        "—á–µ—Ä–Ω—ã–π",
        "black",
        "–±–µ–ª—ã–π",
        "white",
      ],

      // –≠–º–æ—Ü–∏–∏
      emotions: [
        "—Å—á–∞—Å—Ç–ª–∏–≤—ã–π",
        "happy",
        "–≥—Ä—É—Å—Ç–Ω—ã–π",
        "sad",
        "–∑–ª–æ–π",
        "angry",
        "—É—Å—Ç–∞–ª—ã–π",
        "tired",
      ],

      // –°—Ç–∏–ª–∏
      styles: [
        "—Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–π",
        "realistic",
        "–º—É–ª—å—Ç—Ñ–∏–ª—å–º",
        "cartoon",
        "–∞–Ω–∏–º–µ",
        "anime",
        "—Ñ—ç–Ω—Ç–µ–∑–∏",
        "fantasy",
        "–Ω–∞—É—á–Ω–∞—è —Ñ–∞–Ω—Ç–∞—Å—Ç–∏–∫–∞",
        "sci-fi",
      ],
    };

    // –ò—Å–ø–æ–ª—å–∑—É–µ–º —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤
    // –∏–∑ —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–æ–≥–æ –∏–Ω–¥–µ–∫—Å–∞ –¥–ª—è –∫–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç–∏
    const { semanticIndex } = require('./semantic-index');
    return semanticIndex.extractKeywords(text);
  }

  /**
   * –í—ã—á–∏—Å–ª—è–µ—Ç —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–æ–µ —Å—Ö–æ–¥—Å—Ç–≤–æ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–æ–º –∏ –º–µ–¥–∏–∞-—Ñ–∞–π–ª–æ–º
   */
  private async calculateSimilarity(
    queryKeywords: string[],
    media: ChatMedia
  ): Promise<number> {
    let totalScore = 0;
    let maxPossibleScore = 0;

    // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø—Ä–æ–º–ø—Ç –º–µ–¥–∏–∞-—Ñ–∞–π–ª–∞
    if (media.prompt) {
      const promptKeywords = this.extractKeywords(media.prompt);
      const promptScore = this.calculateKeywordOverlap(
        queryKeywords,
        promptKeywords
      );
      totalScore += promptScore * this.weights.prompt;
      maxPossibleScore += this.weights.prompt;
    }

    // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∏–º—è —Ñ–∞–π–ª–∞
    if (media.url) {
      const fileName = media.url.split("/").pop() || "";
      const fileNameKeywords = this.extractKeywords(fileName);
      const fileNameScore = this.calculateKeywordOverlap(
        queryKeywords,
        fileNameKeywords
      );
      totalScore += fileNameScore * this.weights.fileName;
      maxPossibleScore += this.weights.fileName;
    }

    // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–æ–ª—å (–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å vs –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç)
    if (media.role === "assistant") {
      // –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–º–µ—é—Ç –Ω–µ–±–æ–ª—å—à–æ–π –±–æ–Ω—É—Å
      totalScore += 0.1 * this.weights.role;
    }
    maxPossibleScore += this.weights.role;

    // –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    const similarity = maxPossibleScore > 0 ? totalScore / maxPossibleScore : 0;

    console.log(
      `üîç SemanticSearch: Similarity for ${media.url}: ${Math.round(similarity * 100)}%`
    );
    return similarity;
  }

  /**
   * –í—ã—á–∏—Å–ª—è–µ—Ç –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏–µ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤
   */
  private calculateKeywordOverlap(
    keywords1: string[],
    keywords2: string[]
  ): number {
    if (keywords1.length === 0 || keywords2.length === 0) return 0;

    const set1 = new Set(keywords1.map((k) => k.toLowerCase()));
    const set2 = new Set(keywords2.map((k) => k.toLowerCase()));

    const intersection = new Set([...set1].filter((x) => set2.has(x)));
    const union = new Set([...set1, ...set2]);

    // –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –ñ–∞–∫–∫–∞—Ä–∞ –¥–ª—è –∏–∑–º–µ—Ä–µ–Ω–∏—è —Å—Ö–æ–¥—Å—Ç–≤–∞
    return intersection.size / union.size;
  }

  /**
   * –ù–∞—Ö–æ–¥–∏—Ç —Å–æ–≤–ø–∞–¥–∞—é—â–∏–µ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞
   */
  private findMatchedKeywords(
    queryKeywords: string[],
    media: ChatMedia
  ): string[] {
    const matched: string[] = [];

    if (media.prompt) {
      const promptKeywords = this.extractKeywords(media.prompt);
      const promptMatches = queryKeywords.filter((q) =>
        promptKeywords.some((p) => p.toLowerCase() === q.toLowerCase())
      );
      matched.push(...promptMatches);
    }

    if (media.url) {
      const fileName = media.url.split("/").pop() || "";
      const fileNameKeywords = this.extractKeywords(fileName);
      const fileNameMatches = queryKeywords.filter((q) =>
        fileNameKeywords.some((f) => f.toLowerCase() === q.toLowerCase())
      );
      matched.push(...fileNameMatches);
    }

    return [...new Set(matched)];
  }

  /**
   * –°–æ–∑–¥–∞–µ—Ç –≤–µ–∫—Ç–æ—Ä–Ω–æ–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ (—É–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)
   */
  private createTextVector(text: string): number[] {
    const keywords = this.extractKeywords(text);
    const vector = new Array(100).fill(0); // –£–ø—Ä–æ—â–µ–Ω–Ω—ã–π –≤–µ–∫—Ç–æ—Ä —Ä–∞–∑–º–µ—Ä–Ω–æ—Å—Ç–∏ 100

    // –ó–∞–ø–æ–ª–Ω—è–µ–º –≤–µ–∫—Ç–æ—Ä –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤
    keywords.forEach((keyword, index) => {
      const hash = this.simpleHash(keyword);
      vector[hash % 100] += 1;
    });

    return vector;
  }

  /**
   * –ü—Ä–æ—Å—Ç–∞—è —Ö—ç—à-—Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –≤–µ–∫—Ç–æ—Ä–æ–≤
   */
  private simpleHash(str: string): number {
    let hash = 0;
    for (let i = 0; i < str.length; i++) {
      const char = str.charCodeAt(i);
      hash = (hash << 5) - hash + char;
      hash = hash & hash; // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ 32-–±–∏—Ç–Ω–æ–µ —á–∏—Å–ª–æ
    }
    return Math.abs(hash);
  }

  /**
   * –í—ã—á–∏—Å–ª—è–µ—Ç –∫–æ—Å–∏–Ω—É—Å–Ω–æ–µ —Å—Ö–æ–¥—Å—Ç–≤–æ –º–µ–∂–¥—É –≤–µ–∫—Ç–æ—Ä–∞–º–∏
   */
  private cosineSimilarity(vecA: number[], vecB: number[]): number {
    if (vecA.length !== vecB.length) return 0;

    let dotProduct = 0;
    let normA = 0;
    let normB = 0;

    for (let i = 0; i < vecA.length; i++) {
      dotProduct += vecA[i] * vecB[i];
      normA += vecA[i] * vecA[i];
      normB += vecB[i] * vecB[i];
    }

    if (normA === 0 || normB === 0) return 0;

    return dotProduct / (Math.sqrt(normA) * Math.sqrt(normB));
  }

  /**
   * –ù–∞—Ö–æ–¥–∏—Ç –º–µ–¥–∏–∞-—Ñ–∞–π–ª—ã –ø–æ —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–æ–º—É –æ–ø–∏—Å–∞–Ω–∏—é
   */
  async findBySemanticDescription(
    description: string,
    chatMedia: ChatMedia[]
  ): Promise<ChatMedia[]> {
    console.log(
      `üîç SemanticSearch: Finding media by description: "${description}"`
    );

    const matches = await this.findSimilarMedia(description, chatMedia, 0.3);
    return matches.map((match) => match.media);
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø–æ–∏—Å–∫–∞
   */
  getStats(): {
    totalEmbeddings: number;
    averageSimilarity: number;
    topKeywords: Array<{ keyword: string; frequency: number }>;
  } {
    const keywordFreq = new Map<string, number>();

    // –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —á–∞—Å—Ç–æ—Ç—É –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤
    for (const embedding of this.mediaEmbeddings.values()) {
      const keywords = this.extractKeywords(embedding.metadata.text);
      keywords.forEach((keyword) => {
        keywordFreq.set(keyword, (keywordFreq.get(keyword) || 0) + 1);
      });
    }

    const topKeywords = Array.from(keywordFreq.entries())
      .sort((a, b) => b[1] - a[1])
      .slice(0, 10)
      .map(([keyword, frequency]) => ({ keyword, frequency }));

    return {
      totalEmbeddings: this.mediaEmbeddings.size,
      averageSimilarity: 0, // –ë—É–¥–µ—Ç –≤—ã—á–∏—Å–ª—è—Ç—å—Å—è –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
      topKeywords,
    };
  }
}

/**
 * –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–∞
 */
export const semanticAnalyzer = new SemanticContextAnalyzer();
