'use client';

import useSWR from 'swr';
import type { UIArtifact } from '@/components/artifacts/artifact';
import { useCallback, useMemo, useEffect } from 'react';
import type { UIMessage } from 'ai';
import {
  saveArtifactToStorage,
  loadArtifactFromStorage,
  clearArtifactFromStorage,
  restoreArtifactFromData,
} from '@/lib/utils/artifact-persistence';

export const initialArtifactData: UIArtifact = {
  documentId: 'init',
  content: '',
  kind: 'text',
  title: '',
  status: 'idle',
  isVisible: false,
  boundingBox: {
    top: 0,
    left: 0,
    width: 0,
    height: 0,
  },
};

type Selector<T> = (state: UIArtifact) => T;

export function useArtifactSelector<Selected>(selector: Selector<Selected>) {
  const { data: localArtifact } = useSWR<UIArtifact>('artifact', null, {
    fallbackData: initialArtifactData,
  });

  const selectedValue = useMemo(() => {
    if (!localArtifact) return selector(initialArtifactData);
    return selector(localArtifact);
  }, [localArtifact, selector]);

  return selectedValue;
}

// –ü—Ä–æ—Å—Ç–æ–π —Ö—É–∫ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–∞–º–∏
export const useArtifact = (chatId?: string, initialMessages?: UIMessage[]) => {
  console.log('üîç useArtifact hook called with:', {
    chatId,
    initialMessagesLength: initialMessages?.length,
  });

  const { data: localArtifact, mutate: setLocalArtifact } = useSWR<UIArtifact>(
    'artifact',
    null,
    {
      fallbackData: initialArtifactData,
    },
  );

  const artifact = useMemo(() => {
    return localArtifact || initialArtifactData;
  }, [localArtifact]);

  const setArtifact = useCallback(
    (updaterFn: UIArtifact | ((currentArtifact: UIArtifact) => UIArtifact)) => {
      console.log('üîç setArtifact called with chatId:', chatId);

      setLocalArtifact((currentArtifact) => {
        const artifactToUpdate = currentArtifact || initialArtifactData;

        let newArtifact: UIArtifact;
        if (typeof updaterFn === 'function') {
          newArtifact = updaterFn(artifactToUpdate);
        } else {
          newArtifact = updaterFn;
        }

        // –£–ª—É—á—à–µ–Ω–Ω–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ localStorage
        if (chatId && typeof window !== 'undefined') {
          console.log('üíæ Artifact state changed:', {
            chatId,
            documentId: newArtifact.documentId,
            status: newArtifact.status,
            isVisible: newArtifact.isVisible,
            kind: newArtifact.kind,
          });

          // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∞—Ä—Ç–µ—Ñ–∞–∫—Ç –µ—Å–ª–∏ –æ–Ω –∏–º–µ–µ—Ç —Ä–µ–∞–ª—å–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç –∏–ª–∏ —Å—Ç–∞—Ç—É—Å
          const shouldSave =
            newArtifact.documentId !== 'init' ||
            (newArtifact.status !== 'idle' && newArtifact.status !== 'error') ||
            newArtifact.content ||
            newArtifact.title ||
            newArtifact.isVisible;

          if (shouldSave) {
            // –ò—Å–ø–æ–ª—å–∑—É–µ–º —É—Ç–∏–ª–∏—Ç—É –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
            console.log('üíæ Saving artifact to storage:', {
              chatId,
              artifact: newArtifact,
            });
            saveArtifactToStorage(chatId, newArtifact);
          } else {
            // –û—á–∏—â–∞–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —ç—Ç–æ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
            console.log(
              'üóëÔ∏è Clearing artifact from storage (init state):',
              chatId,
            );
            clearArtifactFromStorage(chatId);
          }
        } else {
          console.log('‚ö†Ô∏è Skipping save - no chatId or window:', {
            chatId,
            hasWindow: typeof window !== 'undefined',
            chatIdType: typeof chatId,
          });
        }

        return newArtifact;
      });
    },
    [setLocalArtifact, chatId],
  );

  const { data: localArtifactMetadata, mutate: setLocalArtifactMetadata } =
    useSWR<any>(
      () =>
        artifact.documentId ? `artifact-metadata-${artifact.documentId}` : null,
      null,
      {
        fallbackData: null,
      },
    );

  // –£–ª—É—á—à–µ–Ω–Ω–æ–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —á–∞—Ç–∞
  useEffect(() => {
    console.log('üîç useArtifact useEffect triggered:', {
      chatId,
      window: typeof window,
      chatIdType: typeof chatId,
    });

    if (chatId && typeof window !== 'undefined') {
      console.log('üîç Loading artifact from storage for chatId:', chatId);
      const savedData = loadArtifactFromStorage(chatId);
      console.log('üîç Loaded data from storage:', savedData);

      if (savedData) {
        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –≤–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—Ç—å –∞—Ä—Ç–µ—Ñ–∞–∫—Ç
        const shouldRestore =
          (savedData.documentId && savedData.documentId !== 'init') ||
          savedData.isVisible ||
          savedData.status === 'streaming' ||
          savedData.status === 'pending' ||
          savedData.status === 'completed' ||
          savedData.content ||
          savedData.title;

        console.log('üîç Should restore artifact:', shouldRestore, {
          documentId: savedData.documentId,
          isVisible: savedData.isVisible,
          status: savedData.status,
        });

        if (shouldRestore) {
          console.log('üîÑ Restoring artifact:', {
            ...savedData,
            content: savedData.content
              ? `${savedData.content.substring(0, 100)}...`
              : 'empty',
          });

          const restoredArtifact = restoreArtifactFromData(savedData);
          setLocalArtifact((draft) => {
            console.log('üîç Setting restored artifact:', restoredArtifact);
            return {
              ...draft,
              ...restoredArtifact,
              boundingBox: draft?.boundingBox || {
                top: 0,
                left: 0,
                width: 0,
                height: 0,
              },
            };
          });
        } else {
          // –û—á–∏—â–∞–µ–º –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã–µ –∞—Ä—Ç–µ—Ñ–∞–∫—Ç—ã
          console.log('üóëÔ∏è Clearing inactive artifact for chatId:', chatId);
          clearArtifactFromStorage(chatId);
        }
      } else {
        console.log('üîç No saved data found for chatId:', chatId);
      }
    } else {
      console.log('üîç Skipping restoration - no chatId or window:', {
        chatId,
        hasWindow: typeof window !== 'undefined',
        chatIdType: typeof chatId,
      });
    }
  }, [chatId, setLocalArtifact]);

  // Expose artifact globally for debugging
  useEffect(() => {
    if (typeof window !== 'undefined') {
      (window as any).artifactInstance = {
        artifact,
        setArtifact,
        metadata: localArtifactMetadata,
        setMetadata: setLocalArtifactMetadata,
      };
    }
  }, [artifact, setArtifact, localArtifactMetadata, setLocalArtifactMetadata]);

  const updateMessages = useCallback((newMessages: UIMessage[]) => {
    // –ù–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ —É–ø—Ä–æ—â–µ–Ω–Ω–æ–π –≤–µ—Ä—Å–∏–∏
  }, []);

  const metadata = localArtifactMetadata || null;

  const setMetadata = useCallback(
    (updaterFn: any | ((currentMetadata: any) => any)) => {
      setLocalArtifactMetadata((currentMetadata: any) => {
        if (typeof updaterFn === 'function') {
          return updaterFn(currentMetadata);
        } else {
          return updaterFn;
        }
      });
    },
    [setLocalArtifactMetadata],
  );

  return useMemo(
    () => ({
      artifact,
      setArtifact,
      metadata,
      setMetadata,
      updateMessages,
    }),
    [artifact, setArtifact, metadata, setMetadata, updateMessages],
  );
};

// –•—É–∫ –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ (–±–µ–∑ chatId) - –ø—Ä–æ—Å—Ç–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç useArtifact
export const useArtifactLegacy = () => {
  console.log('üîç useArtifactLegacy called - using fallback without chatId');
  return useArtifact();
};

// –•—É–∫ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞—Ö, –∫–æ—Ç–æ—Ä—ã–µ –¥–æ–ª–∂–Ω—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–æ–Ω—Ç–µ–∫—Å—Ç
// –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ useArtifactContext –Ω–∞–ø—Ä—è–º—É—é –≤ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞—Ö
