#!/usr/bin/env node

/**
 * –°–∫—Ä–∏–ø—Ç –¥–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∏–º–ø–æ—Ä—Ç–æ–≤ –ø–æ—Å–ª–µ –º–∏–≥—Ä–∞—Ü–∏–∏ –Ω–∞ –æ–±—â–∏–µ –ø–∞–∫–µ—Ç—ã
 */

const fs = require('fs');
const path = require('path');

// –ú–∞–ø–ø–∏–Ω–≥ —Å—Ç–∞—Ä—ã—Ö –ø—É—Ç–µ–π –Ω–∞ –Ω–æ–≤—ã–µ –ø–∞–∫–µ—Ç—ã
const IMPORT_MAPPING = {
  // UI –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã - –∞–±—Å–æ–ª—é—Ç–Ω—ã–µ –ø—É—Ç–∏
  '@/components/ui/button': '@turbo-super/ui',
  '@/components/ui/card': '@turbo-super/ui',
  '@/components/ui/input': '@turbo-super/ui',
  '@/components/ui/badge': '@turbo-super/ui',
  '@/components/ui/tabs': '@turbo-super/ui',
  '@/components/ui/textarea': '@turbo-super/ui',
  '@/components/ui/label': '@turbo-super/ui',
  '@/components/ui/separator': '@turbo-super/ui',
  '@/components/ui/skeleton': '@turbo-super/ui',
  '@/components/ui/dialog': '@turbo-super/ui',
  
  // UI –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã - –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–µ –ø—É—Ç–∏
  './ui/button': '@turbo-super/ui',
  './ui/card': '@turbo-super/ui',
  './ui/input': '@turbo-super/ui',
  './ui/badge': '@turbo-super/ui',
  './ui/tabs': '@turbo-super/ui',
  './ui/textarea': '@turbo-super/ui',
  './ui/label': '@turbo-super/ui',
  './ui/separator': '@turbo-super/ui',
  './ui/skeleton': '@turbo-super/ui',
  './ui/dialog': '@turbo-super/ui',
  
  // –£—Ç–∏–ª–∏—Ç—ã –∏ —Ö—É–∫–∏
  '@/lib/utils': '@turbo-super/ui',
  '@/lib/format': '@turbo-super/shared',
  '@/lib/validation': '@turbo-super/shared',
  '@/hooks/use-debounce': '@turbo-super/shared',
  '@/hooks/use-local-storage': '@turbo-super/shared',
  '@/hooks/use-media-query': '@turbo-super/shared',
  '@/hooks/use-click-outside': '@turbo-super/shared',
  
  // –¢–∏–ø—ã –∏ –∫–æ–Ω—Å—Ç–∞–Ω—Ç—ã
  '@/types/artifact-types': '@turbo-super/data',
  '@/types/websocket-types': '@turbo-super/data',
  '@/lib/constants': '@turbo-super/data',
};

function walkDirectory(dir, callback) {
  const files = fs.readdirSync(dir);
  
  for (const file of files) {
    const filePath = path.join(dir, file);
    const stat = fs.statSync(filePath);
    
    if (stat.isDirectory() && !file.startsWith('.') && file !== 'node_modules') {
      walkDirectory(filePath, callback);
    } else if (stat.isFile() && /\.(ts|tsx|js|jsx)$/.test(file)) {
      callback(filePath);
    }
  }
}

function fixImports(content, filePath) {
  let modified = false;
  let newContent = content;
  
  // –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ –∏–º–ø–æ—Ä—Ç—ã –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–∞–∫–µ—Ç–∞
  const packageImports = {};
  
  // –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ –∏–º–ø–æ—Ä—Ç—ã —Å –¥–µ—Å—Ç—Ä—É–∫—Ç—É—Ä–∏–∑–∞—Ü–∏–µ–π
  for (const [oldPath, newPackage] of Object.entries(IMPORT_MAPPING)) {
    const destructureRegex = new RegExp(`import\\s*{([^}]+)}\\s+from\\s+['"]${oldPath.replace(/[.*+?^${}()|[\]\\]/g, '\\$&')}['"];?`, 'g');
    
    let match;
    while ((match = destructureRegex.exec(newContent)) !== null) {
      if (!packageImports[newPackage]) {
        packageImports[newPackage] = new Set();
      }
      
      // –†–∞–∑–±–∏—Ä–∞–µ–º –∏–º–ø–æ—Ä—Ç—ã –∏ –¥–æ–±–∞–≤–ª—è–µ–º –∏—Ö –≤ –Ω–∞–±–æ—Ä
      const imports = match[1].split(',').map(imp => imp.trim());
      imports.forEach(imp => {
        if (imp) {
          packageImports[newPackage].add(imp);
        }
      });
      
      modified = true;
    }
  }
  
  // –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –∏–º–ø–æ—Ä—Ç—ã
  for (const [oldPath] of Object.entries(IMPORT_MAPPING)) {
    const destructureRegex = new RegExp(`import\\s*{[^}]*}\\s+from\\s+['"]${oldPath.replace(/[.*+?^${}()|[\]\\]/g, '\\$&')}['"];?\\s*`, 'g');
    newContent = newContent.replace(destructureRegex, '');
  }
  
  // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∏–º–ø–æ—Ä—Ç—ã
  const importStatements = [];
  for (const [packageName, imports] of Object.entries(packageImports)) {
    if (imports.size > 0) {
      const importList = Array.from(imports).join(', ');
      importStatements.push(`import { ${importList} } from '${packageName}';`);
    }
  }
  
  // –í—Å—Ç–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ –∏–º–ø–æ—Ä—Ç—ã –≤ –Ω–∞—á–∞–ª–æ —Ñ–∞–π–ª–∞ (–ø–æ—Å–ª–µ –¥—Ä—É–≥–∏—Ö –∏–º–ø–æ—Ä—Ç–æ–≤)
  if (importStatements.length > 0) {
    const importBlock = importStatements.join('\n');
    
    // –ù–∞—Ö–æ–¥–∏–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –∏–º–ø–æ—Ä—Ç –≤ —Ñ–∞–π–ª–µ
    const lastImportRegex = /(import\s+[^;]+;?\s*)(?=\n(?!import))/g;
    const lastMatch = [...newContent.matchAll(lastImportRegex)].pop();
    
    if (lastMatch) {
      const insertPosition = lastMatch.index + lastMatch[0].length;
      newContent = newContent.slice(0, insertPosition) + '\n' + importBlock + newContent.slice(insertPosition);
    } else {
      // –ï—Å–ª–∏ –Ω–µ—Ç –¥—Ä—É–≥–∏—Ö –∏–º–ø–æ—Ä—Ç–æ–≤, –¥–æ–±–∞–≤–ª—è–µ–º –≤ –Ω–∞—á–∞–ª–æ
      newContent = importBlock + '\n' + newContent;
    }
  }
  
  if (modified) {
    console.log(`  ‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω: ${path.relative(process.cwd(), filePath)}`);
  }
  
  return newContent;
}

function main() {
  console.log('üîß –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –∏–º–ø–æ—Ä—Ç—ã –ø–æ—Å–ª–µ –º–∏–≥—Ä–∞—Ü–∏–∏...\n');
  
  const apps = ['apps/super-landing', 'apps/super-chatbot'];
  let totalFixed = 0;
  
  for (const app of apps) {
    if (fs.existsSync(app)) {
      console.log(`üìÅ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º: ${app}`);
      let appFixed = 0;
      
      walkDirectory(app, (filePath) => {
        try {
          const content = fs.readFileSync(filePath, 'utf8');
          const newContent = fixImports(content, filePath);
          
          if (newContent !== content) {
            fs.writeFileSync(filePath, newContent, 'utf8');
            appFixed++;
          }
        } catch (error) {
          console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ ${filePath}:`, error.message);
        }
      });
      
      console.log(`  üìä –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ —Ñ–∞–π–ª–æ–≤: ${appFixed}\n`);
      totalFixed += appFixed;
    }
  }
  
  console.log(`üéâ –ú–∏–≥—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –í—Å–µ–≥–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–æ —Ñ–∞–π–ª–æ–≤: ${totalFixed}`);
}

if (require.main === module) {
  main();
} 