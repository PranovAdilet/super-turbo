#!/usr/bin/env node

/**
 * –°–∫—Ä–∏–ø—Ç –¥–ª—è –º–∏–≥—Ä–∞—Ü–∏–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π –Ω–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –æ–±—â–∏—Ö –ø–∞–∫–µ—Ç–æ–≤
 * –ó–∞–º–µ–Ω—è–µ—Ç –ª–æ–∫–∞–ª—å–Ω—ã–µ –∏–º–ø–æ—Ä—Ç—ã –Ω–∞ –∏–º–ø–æ—Ä—Ç—ã –∏–∑ @turbo-super/ui –∏ @turbo-super/shared
 */

const fs = require('fs')
const path = require('path')
const { execSync } = require('child_process')

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –º–∏–≥—Ä–∞—Ü–∏–∏
const MIGRATION_CONFIG = {
  // –ö–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –¥–ª—è –º–∏–≥—Ä–∞—Ü–∏–∏ –∏–∑ @turbo-super/ui
  uiComponents: {
    'Button': '@turbo-super/ui',
    'Card': '@turbo-super/ui',
    'CardContent': '@turbo-super/ui',
    'CardHeader': '@turbo-super/ui',
    'CardTitle': '@turbo-super/ui',
    'CardDescription': '@turbo-super/ui',
    'CardFooter': '@turbo-super/ui',
    'Input': '@turbo-super/ui',
    'Badge': '@turbo-super/ui',
    'Tabs': '@turbo-super/ui',
    'TabsList': '@turbo-super/ui',
    'TabsTrigger': '@turbo-super/ui',
    'TabsContent': '@turbo-super/ui',
    'Textarea': '@turbo-super/ui',
    'Label': '@turbo-super/ui',
    'Separator': '@turbo-super/ui',
  },
  
  // –£—Ç–∏–ª–∏—Ç—ã –¥–ª—è –º–∏–≥—Ä–∞—Ü–∏–∏ –∏–∑ @turbo-super/shared
  sharedUtils: {
    'formatDate': '@turbo-super/shared',
    'formatDateTime': '@turbo-super/shared',
    'formatRelativeTime': '@turbo-super/shared',
    'formatNumber': '@turbo-super/shared',
    'formatFileSize': '@turbo-super/shared',
    'formatDuration': '@turbo-super/shared',
    'truncateText': '@turbo-super/shared',
    'capitalizeFirst': '@turbo-super/shared',
    'slugify': '@turbo-super/shared',
    'formatCurrency': '@turbo-super/shared',
    'formatPercentage': '@turbo-super/shared',
    'isValidEmail': '@turbo-super/shared',
    'isValidUrl': '@turbo-super/shared',
    'isValidPhone': '@turbo-super/shared',
    'isValidPassword': '@turbo-super/shared',
    'isValidFileSize': '@turbo-super/shared',
    'isValidFileType': '@turbo-super/shared',
    'isValidTextLength': '@turbo-super/shared',
    'validateRequired': '@turbo-super/shared',
    'validateObject': '@turbo-super/shared',
    'hasErrors': '@turbo-super/shared',
    'isValidId': '@turbo-super/shared',
    'isValidUUID': '@turbo-super/shared',
    'isValidDate': '@turbo-super/shared',
    'isValidNumberRange': '@turbo-super/shared',
    'isValidArray': '@turbo-super/shared',
    'useDebounce': '@turbo-super/shared',
    'useLocalStorage': '@turbo-super/shared',
    'useMediaQuery': '@turbo-super/shared',
    'useClickOutside': '@turbo-super/shared',
    'useIsMobile': '@turbo-super/shared',
    'useIsTablet': '@turbo-super/shared',
    'useIsDesktop': '@turbo-super/shared',
    'useIsDarkMode': '@turbo-super/shared',
    'useIsReducedMotion': '@turbo-super/shared',
  },
  
  // –¢–∏–ø—ã –¥–ª—è –º–∏–≥—Ä–∞—Ü–∏–∏ –∏–∑ @turbo-super/data
  dataTypes: {
    'Artifact': '@turbo-super/data',
    'ImageArtifact': '@turbo-super/data',
    'VideoArtifact': '@turbo-super/data',
    'TextArtifact': '@turbo-super/data',
    'SheetArtifact': '@turbo-super/data',
    'ScriptArtifact': '@turbo-super/data',
    'ApiResponse': '@turbo-super/data',
    'PaginatedResponse': '@turbo-super/data',
    'User': '@turbo-super/data',
    'Session': '@turbo-super/data',
    'Message': '@turbo-super/data',
    'Chat': '@turbo-super/data',
    'AI_MODELS': '@turbo-super/data',
    'STATUS': '@turbo-super/data',
    'ARTIFACT_TYPES': '@turbo-super/data',
    'USER_ROLES': '@turbo-super/data',
    'MESSAGE_ROLES': '@turbo-super/data',
    'API_ENDPOINTS': '@turbo-super/data',
    'IMAGE_SIZES': '@turbo-super/data',
    'VIDEO_SIZES': '@turbo-super/data',
    'FILE_FORMATS': '@turbo-super/data',
    'LIMITS': '@turbo-super/data',
    'PAGINATION': '@turbo-super/data',
    'TIME': '@turbo-super/data',
    'ERROR_CODES': '@turbo-super/data',
    'NOTIFICATION_TYPES': '@turbo-super/data',
  }
}

// –ü–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è –ø–æ–∏—Å–∫–∞ –∏–º–ø–æ—Ä—Ç–æ–≤
const IMPORT_PATTERNS = {
  // –õ–æ–∫–∞–ª—å–Ω—ã–µ –∏–º–ø–æ—Ä—Ç—ã –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
  localComponents: /import\s*{\s*([^}]+)\s*}\s*from\s*['"]@\/components\/ui\/([^'"]+)['"]/g,
  
  // –õ–æ–∫–∞–ª—å–Ω—ã–µ –∏–º–ø–æ—Ä—Ç—ã —É—Ç–∏–ª–∏—Ç
  localUtils: /import\s*{\s*([^}]+)\s*}\s*from\s*['"]@\/lib\/utils['"]/g,
  
  // –õ–æ–∫–∞–ª—å–Ω—ã–µ –∏–º–ø–æ—Ä—Ç—ã —Ç–∏–ø–æ–≤
  localTypes: /import\s*{\s*([^}]+)\s*}\s*from\s*['"]@\/types\/([^'"]+)['"]/g,
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–µ–∫—É—Ä—Å–∏–≤–Ω–æ–≥–æ –æ–±—Ö–æ–¥–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π
function walkDirectory(dir, callback) {
  const files = fs.readdirSync(dir)
  
  for (const file of files) {
    const filePath = path.join(dir, file)
    const stat = fs.statSync(filePath)
    
    if (stat.isDirectory() && !file.startsWith('.') && file !== 'node_modules') {
      walkDirectory(filePath, callback)
    } else if (stat.isFile() && (file.endsWith('.tsx') || file.endsWith('.ts'))) {
      callback(filePath)
    }
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–º–µ–Ω—ã –∏–º–ø–æ—Ä—Ç–æ–≤
function replaceImports(content, filePath) {
  let modified = false
  let newContent = content
  
  // –ó–∞–º–µ–Ω—è–µ–º –∏–º–ø–æ—Ä—Ç—ã –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
  newContent = newContent.replace(IMPORT_PATTERNS.localComponents, (match, imports, componentPath) => {
    const importNames = imports.split(',').map(name => name.trim())
    const componentName = path.basename(componentPath, path.extname(componentPath))
    
    if (MIGRATION_CONFIG.uiComponents[componentName]) {
      modified = true
      return `import { ${importNames.join(', ')} } from '${MIGRATION_CONFIG.uiComponents[componentName]}'`
    }
    
    return match
  })
  
  // –ó–∞–º–µ–Ω—è–µ–º –∏–º–ø–æ—Ä—Ç—ã —É—Ç–∏–ª–∏—Ç
  newContent = newContent.replace(IMPORT_PATTERNS.localUtils, (match, imports) => {
    const importNames = imports.split(',').map(name => name.trim())
    const migratedImports = []
    const remainingImports = []
    
    for (const importName of importNames) {
      if (MIGRATION_CONFIG.sharedUtils[importName]) {
        migratedImports.push(importName)
      } else {
        remainingImports.push(importName)
      }
    }
    
    if (migratedImports.length > 0) {
      modified = true
      const newImports = []
      
      // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –∏–º–ø–æ—Ä—Ç—ã –ø–æ –ø–∞–∫–µ—Ç–∞–º
      const packageGroups = {}
      for (const importName of migratedImports) {
        const packageName = MIGRATION_CONFIG.sharedUtils[importName]
        if (!packageGroups[packageName]) {
          packageGroups[packageName] = []
        }
        packageGroups[packageName].push(importName)
      }
      
      // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–µ –∏–º–ø–æ—Ä—Ç—ã
      for (const [packageName, names] of Object.entries(packageGroups)) {
        newImports.push(`import { ${names.join(', ')} } from '${packageName}'`)
      }
      
      // –î–æ–±–∞–≤–ª—è–µ–º –æ—Å—Ç–∞–≤—à–∏–µ—Å—è –ª–æ–∫–∞–ª—å–Ω—ã–µ –∏–º–ø–æ—Ä—Ç—ã
      if (remainingImports.length > 0) {
        newImports.push(`import { ${remainingImports.join(', ')} } from '@/lib/utils'`)
      }
      
      return newImports.join('\n')
    }
    
    return match
  })
  
  // –ó–∞–º–µ–Ω—è–µ–º –∏–º–ø–æ—Ä—Ç—ã —Ç–∏–ø–æ–≤
  newContent = newContent.replace(IMPORT_PATTERNS.localTypes, (match, imports, typePath) => {
    const importNames = imports.split(',').map(name => name.trim())
    const migratedImports = []
    const remainingImports = []
    
    for (const importName of importNames) {
      if (MIGRATION_CONFIG.dataTypes[importName]) {
        migratedImports.push(importName)
      } else {
        remainingImports.push(importName)
      }
    }
    
    if (migratedImports.length > 0) {
      modified = true
      const newImports = []
      
      // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –∏–º–ø–æ—Ä—Ç—ã –ø–æ –ø–∞–∫–µ—Ç–∞–º
      const packageGroups = {}
      for (const importName of migratedImports) {
        const packageName = MIGRATION_CONFIG.dataTypes[importName]
        if (!packageGroups[packageName]) {
          packageGroups[packageName] = []
        }
        packageGroups[packageName].push(importName)
      }
      
      // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–µ –∏–º–ø–æ—Ä—Ç—ã
      for (const [packageName, names] of Object.entries(packageGroups)) {
        newImports.push(`import { ${names.join(', ')} } from '${packageName}'`)
      }
      
      // –î–æ–±–∞–≤–ª—è–µ–º –æ—Å—Ç–∞–≤—à–∏–µ—Å—è –ª–æ–∫–∞–ª—å–Ω—ã–µ –∏–º–ø–æ—Ä—Ç—ã
      if (remainingImports.length > 0) {
        newImports.push(`import { ${remainingImports.join(', ')} } from '@/types/${typePath}'`)
      }
      
      return newImports.join('\n')
    }
    
    return match
  })
  
  return { content: newContent, modified }
}

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –º–∏–≥—Ä–∞—Ü–∏–∏
function migrateApp(appPath) {
  console.log(`\nüîß –ú–∏–≥—Ä–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è: ${appPath}`)
  
  let totalFiles = 0
  let modifiedFiles = 0
  
  walkDirectory(appPath, (filePath) => {
    totalFiles++
    
    try {
      const content = fs.readFileSync(filePath, 'utf8')
      const { content: newContent, modified } = replaceImports(content, filePath)
      
      if (modified) {
        fs.writeFileSync(filePath, newContent)
        modifiedFiles++
        console.log(`  ‚úÖ ${path.relative(process.cwd(), filePath)}`)
      }
    } catch (error) {
      console.error(`  ‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ ${filePath}:`, error.message)
    }
  })
  
  console.log(`  üìä –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Ñ–∞–π–ª–æ–≤: ${totalFiles}, –∏–∑–º–µ–Ω–µ–Ω–æ: ${modifiedFiles}`)
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
function removeDuplicatedFiles(appPath) {
  console.log(`\nüóëÔ∏è  –£–¥–∞–ª–µ–Ω–∏–µ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ –≤: ${appPath}`)
  
  const filesToRemove = [
    'src/components/ui/button.tsx',
    'src/components/ui/card.tsx',
    'src/components/ui/input.tsx',
    'src/components/ui/badge.tsx',
    'src/components/ui/tabs.tsx',
    'src/components/ui/textarea.tsx',
    'src/components/ui/label.tsx',
    'src/components/ui/separator.tsx',
  ]
  
  let removedFiles = 0
  
  for (const file of filesToRemove) {
    const filePath = path.join(appPath, file)
    if (fs.existsSync(filePath)) {
      try {
        fs.unlinkSync(filePath)
        removedFiles++
        console.log(`  ‚úÖ –£–¥–∞–ª–µ–Ω: ${file}`)
      } catch (error) {
        console.error(`  ‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è ${file}:`, error.message)
      }
    }
  }
  
  console.log(`  üìä –£–¥–∞–ª–µ–Ω–æ —Ñ–∞–π–ª–æ–≤: ${removedFiles}`)
}

// –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
function main() {
  console.log('üöÄ –ù–∞—á–∏–Ω–∞–µ–º –º–∏–≥—Ä–∞—Ü–∏—é –Ω–∞ –æ–±—â–∏–µ –ø–∞–∫–µ—Ç—ã...')
  
  const apps = ['apps/super-landing', 'apps/super-chatbot']
  
  for (const app of apps) {
    if (fs.existsSync(app)) {
      migrateApp(app)
      removeDuplicatedFiles(app)
    } else {
      console.log(`‚ö†Ô∏è  –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ: ${app}`)
    }
  }
  
  console.log('\n‚úÖ –ú–∏–≥—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!')
  console.log('\nüìã –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:')
  console.log('1. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏: pnpm install')
  console.log('2. –°–æ–±–µ—Ä–∏—Ç–µ –ø–∞–∫–µ—Ç—ã: pnpm build')
  console.log('3. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ, —á—Ç–æ –≤—Å–µ —Ä–∞–±–æ—Ç–∞–µ—Ç: pnpm dev')
  console.log('4. –ò—Å–ø—Ä–∞–≤—å—Ç–µ –æ—Å—Ç–∞–≤—à–∏–µ—Å—è –æ—à–∏–±–∫–∏ –∏–º–ø–æ—Ä—Ç–æ–≤ –≤—Ä—É—á–Ω—É—é')
}

// –ó–∞–ø—É—Å–∫ —Å–∫—Ä–∏–ø—Ç–∞
if (require.main === module) {
  main()
}

module.exports = { migrateApp, removeDuplicatedFiles } 