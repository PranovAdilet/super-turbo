"use client";

import { Suspense } from "react";
import { ScriptGeneratorForm } from "./script-generator-form";
import { Separator } from "@turbo-super/ui";
import { FileText, Sparkles, Zap, Lightbulb } from "lucide-react";
import { useState } from "react";
import { ScriptGenerationParams } from "../../types";

interface ScriptGeneratorPageProps {
  onGenerate?: (params: ScriptGenerationParams) => Promise<string>;
  onError?: (error: string) => void;
  onSuccess?: (result: string) => void;
  title?: string;
  description?: string;
}

export function ScriptGeneratorPage({
  onGenerate,
  onError,
  onSuccess,
  title = "AI Script Generator",
  description = "Generate professional scripts for videos, podcasts, presentations, commercials, and stories. Create engaging content with the right tone and structure for your target audience.",
}: ScriptGeneratorPageProps) {
  const [isGenerating, setIsGenerating] = useState(false);
  const [generatedScript, setGeneratedScript] = useState<string>("");

  const handleGenerate = async (params: ScriptGenerationParams) => {
    try {
      setIsGenerating(true);
      setGeneratedScript("");

      if (onGenerate) {
        const result = await onGenerate(params);
        setGeneratedScript(result);
        onSuccess?.(result);
      } else {
        // Mock generation for demo
        await new Promise((resolve) => setTimeout(resolve, 2000));
        const mockScript = `[${params.scriptType.toUpperCase()} SCRIPT]

Title: ${params.prompt}

Duration: ${params.duration} seconds
Tone: ${params.tone}
Target Audience: ${params.targetAudience}

[OPENING]
${params.prompt}

[MAIN CONTENT]
This is a ${params.tone} script about ${params.prompt}. 
${params.context ? `Additional context: ${params.context}` : ""}

[CLOSING]
Thank you for your attention.

---
Generated by SuperDuperAI Script Generator`;

        setGeneratedScript(mockScript);
        onSuccess?.(mockScript);
      }
    } catch (error) {
      const errorMessage =
        error instanceof Error ? error.message : "Failed to generate script";
      onError?.(errorMessage);
    } finally {
      setIsGenerating(false);
    }
  };

  const copyToClipboard = async () => {
    if (generatedScript) {
      try {
        await navigator.clipboard.writeText(generatedScript);
        // You could add a toast notification here
      } catch (error) {
        console.error("Failed to copy to clipboard:", error);
      }
    }
  };

  const reset = () => {
    setGeneratedScript("");
  };

  return (
    <div className="space-y-8">
      {/* Header */}
      <div className="text-center space-y-4">
        <div className="flex items-center justify-center space-x-2">
          <div className="p-3 rounded-full bg-green-100">
            <FileText className="size-8 text-green-600" />
          </div>
          <h1 className="text-4xl font-bold bg-gradient-to-r from-green-600 to-teal-600 bg-clip-text text-transparent">
            {title}
          </h1>
        </div>

        <p className="text-lg text-gray-600 max-w-2xl mx-auto">{description}</p>

        {/* Feature highlights */}
        <div className="flex items-center justify-center space-x-8 text-sm text-gray-500">
          <div className="flex items-center space-x-2">
            <Sparkles className="size-4" />
            <span>Professional Scripts</span>
          </div>
          <div className="flex items-center space-x-2">
            <Zap className="size-4" />
            <span>Multiple Formats</span>
          </div>
          <div className="flex items-center space-x-2">
            <Lightbulb className="size-4" />
            <span>Engaging Content</span>
          </div>
        </div>
      </div>

      <Separator />

      {/* Main content */}
      <div className="max-w-4xl mx-auto">
        <Suspense fallback={<div>Loading form...</div>}>
          <ScriptGeneratorForm
            onGenerate={handleGenerate}
            isGenerating={isGenerating}
            generatedScript={generatedScript}
            onCopyScript={copyToClipboard}
            onReset={reset}
          />
        </Suspense>
      </div>

      {/* Tips Section */}
      <div className="max-w-4xl mx-auto">
        <div className="bg-green-50 border border-green-200 rounded-lg p-6">
          <h3 className="text-lg font-semibold text-green-900 mb-4 flex items-center gap-2">
            <Lightbulb className="size-5" />
            Tips for Better Scripts
          </h3>
          <div className="grid grid-cols-1 md:grid-cols-2 gap-4 text-sm text-green-800">
            <div>
              <h4 className="font-medium mb-2">Clear Structure</h4>
              <p>
                Include opening, main content, and closing sections for better
                flow and engagement.
              </p>
            </div>
            <div>
              <h4 className="font-medium mb-2">Know Your Audience</h4>
              <p>
                Tailor the tone, language, and content to match your target
                audience's preferences.
              </p>
            </div>
            <div>
              <h4 className="font-medium mb-2">Call to Action</h4>
              <p>
                Include clear next steps or actions you want your audience to
                take.
              </p>
            </div>
            <div>
              <h4 className="font-medium mb-2">Timing Matters</h4>
              <p>
                Consider the duration and pace when writing for different script
                types.
              </p>
            </div>
          </div>
        </div>
      </div>

      {/* Footer info */}
      <div className="text-center text-sm text-gray-500 border-t pt-8">
        <p>
          Powered by <strong>SuperDuperAI</strong> • Professional script
          generation for various content types • Create engaging,
          well-structured content for your audience
        </p>
      </div>
    </div>
  );
}
