{"version":3,"sources":["../src/components/Veo3PromptGenerator.tsx","../src/components/PromptBuilder.tsx","../src/components/MoodboardUploader.tsx","../src/components/PromptPreview.tsx","../src/components/AIEnhancement.tsx","../src/components/PromptHistory.tsx","../src/utils/index.ts","../src/constants/index.ts"],"sourcesContent":["\"use client\";\r\n\r\nimport { useState, useEffect } from \"react\";\r\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@turbo-super/ui\";\r\nimport { BookOpen } from \"lucide-react\";\r\nimport { PromptBuilder } from \"./PromptBuilder\";\r\nimport { PromptPreview } from \"./PromptPreview\";\r\nimport { AIEnhancement } from \"./AIEnhancement\";\r\nimport { PromptHistory } from \"./PromptHistory\";\r\nimport {\r\n  PromptData,\r\n  EnhancementInfo,\r\n  MoodboardImage,\r\n  PresetOptions,\r\n  HistoryItem,\r\n  Character,\r\n} from \"../types\";\r\nimport {\r\n  generatePrompt,\r\n  createRandomPromptData,\r\n  copyToClipboard as copyToClipboardUtil,\r\n  getLocaleLanguage,\r\n} from \"../utils\";\r\nimport { PRESET_OPTIONS, DEFAULT_VALUES } from \"../constants\";\r\n\r\ninterface Veo3PromptGeneratorProps {\r\n  enhancePromptFunction?: (params: {\r\n    prompt: string;\r\n    customLimit: number;\r\n    model: string;\r\n    focusType?: string;\r\n    includeAudio: boolean;\r\n    promptData: PromptData;\r\n    moodboard?: {\r\n      enabled: boolean;\r\n      images: MoodboardImage[];\r\n    };\r\n  }) => Promise<{\r\n    enhancedPrompt: string;\r\n    model?: string;\r\n    characterLimit?: number;\r\n    characterCount?: number;\r\n    targetCharacters?: number;\r\n    metadata?: any;\r\n  }>;\r\n  MoodboardUploader?: React.ComponentType<{\r\n    images: MoodboardImage[];\r\n    setImages: (images: MoodboardImage[]) => void;\r\n  }>;\r\n  showInfoBanner?: boolean;\r\n  className?: string;\r\n}\r\n\r\nexport function Veo3PromptGenerator({\r\n  enhancePromptFunction,\r\n  MoodboardUploader,\r\n  showInfoBanner = true,\r\n  className = \"\",\r\n}: Veo3PromptGeneratorProps) {\r\n  const [promptData, setPromptData] = useState<PromptData>({\r\n    scene: \"\",\r\n    style: \"\",\r\n    camera: \"\",\r\n    characters: [{ id: \"default\", name: \"\", description: \"\", speech: \"\" }],\r\n    action: \"\",\r\n    lighting: \"\",\r\n    mood: \"\",\r\n    language: \"English\",\r\n  });\r\n  const [generatedPrompt, setGeneratedPrompt] = useState(\"\");\r\n  const [enhancedPrompt, setEnhancedPrompt] = useState(\"\");\r\n  const [isEnhancing, setIsEnhancing] = useState(false);\r\n  const [enhanceError, setEnhanceError] = useState(\"\");\r\n  const [customCharacterLimit, setCustomCharacterLimit] = useState<number>(\r\n    DEFAULT_VALUES.CHARACTER_LIMIT\r\n  );\r\n  const [selectedModel] = useState<\"gpt-4.1\">(\"gpt-4.1\");\r\n  const [promptHistory, setPromptHistory] = useState<HistoryItem[]>([]);\r\n  const [showSettings, setShowSettings] = useState(false);\r\n  const [copied, setCopied] = useState(false);\r\n  const [enhancementInfo, setEnhancementInfo] =\r\n    useState<EnhancementInfo | null>(null);\r\n  const [activeTab, setActiveTab] = useState(\"builder\");\r\n  const [selectedFocusTypes, setSelectedFocusTypes] = useState<\r\n    Array<\"character\" | \"action\" | \"cinematic\" | \"safe\">\r\n  >([\"safe\"]);\r\n  const [includeAudio, setIncludeAudio] = useState<boolean>(\r\n    DEFAULT_VALUES.INCLUDE_AUDIO\r\n  );\r\n  const [moodboardEnabled, setMoodboardEnabled] = useState<boolean>(\r\n    DEFAULT_VALUES.MOODBOARD_ENABLED\r\n  );\r\n  const [moodboardImages, setMoodboardImages] = useState<MoodboardImage[]>([]);\r\n\r\n  // Load history from localStorage\r\n  useEffect(() => {\r\n    const savedHistory = localStorage.getItem(\"veo3-prompt-history\");\r\n    if (savedHistory) {\r\n      try {\r\n        const parsed = JSON.parse(savedHistory);\r\n        const historyWithDates = parsed.map((item: any) => ({\r\n          ...item,\r\n          timestamp: new Date(item.timestamp),\r\n        }));\r\n        setPromptHistory(historyWithDates);\r\n      } catch (error) {\r\n        console.error(\"Failed to load prompt history:\", error);\r\n      }\r\n    }\r\n  }, []);\r\n\r\n  // Save history to localStorage\r\n  useEffect(() => {\r\n    if (promptHistory.length > 0) {\r\n      localStorage.setItem(\r\n        \"veo3-prompt-history\",\r\n        JSON.stringify(promptHistory)\r\n      );\r\n    }\r\n  }, [promptHistory]);\r\n\r\n  // Generate prompt when promptData changes\r\n  useEffect(() => {\r\n    const hasValidCharacter = promptData.characters.some(\r\n      (char) => char.name || char.description\r\n    );\r\n    if (promptData.scene || hasValidCharacter) {\r\n      const prompt = generatePrompt(promptData);\r\n      setGeneratedPrompt(prompt);\r\n    }\r\n  }, [promptData]);\r\n\r\n  // Set language based on locale\r\n  useEffect(() => {\r\n    const defaultLanguage = getLocaleLanguage();\r\n    setPromptData((prev) => ({ ...prev, language: defaultLanguage }));\r\n  }, []);\r\n\r\n  const addCharacter = () => {\r\n    setPromptData((prev) => ({\r\n      ...prev,\r\n      characters: [\r\n        ...prev.characters,\r\n        { id: Date.now().toString(), name: \"\", description: \"\", speech: \"\" },\r\n      ],\r\n    }));\r\n  };\r\n\r\n  const updateCharacter = (\r\n    id: string,\r\n    field: keyof Character,\r\n    value: string\r\n  ) => {\r\n    setPromptData((prev) => ({\r\n      ...prev,\r\n      characters: prev.characters.map((char) =>\r\n        char.id === id ? { ...char, [field]: value } : char\r\n      ),\r\n    }));\r\n  };\r\n\r\n  const removeCharacter = (id: string) => {\r\n    setPromptData((prev) => ({\r\n      ...prev,\r\n      characters: prev.characters.filter((char) => char.id !== id),\r\n    }));\r\n  };\r\n\r\n  const clearAll = () => {\r\n    const emptyData: PromptData = {\r\n      scene: \"\",\r\n      style: \"\",\r\n      camera: \"\",\r\n      characters: [],\r\n      action: \"\",\r\n      lighting: \"\",\r\n      mood: \"\",\r\n      language: \"English\",\r\n    };\r\n    setPromptData(emptyData);\r\n    setGeneratedPrompt(\"\");\r\n    setEnhancedPrompt(\"\");\r\n    setEnhanceError(\"\");\r\n  };\r\n\r\n  const saveToHistory = (\r\n    basicPrompt: string,\r\n    enhancedPrompt: string,\r\n    length: string,\r\n    model: string,\r\n    promptData: PromptData\r\n  ) => {\r\n    const newHistoryItem: HistoryItem = {\r\n      id: Date.now().toString(),\r\n      timestamp: new Date(),\r\n      basicPrompt,\r\n      enhancedPrompt,\r\n      length,\r\n      model,\r\n      promptData,\r\n    };\r\n    setPromptHistory((prev) => {\r\n      const updated = [newHistoryItem, ...prev];\r\n      return updated.slice(0, 10);\r\n    });\r\n  };\r\n\r\n  const clearHistory = () => {\r\n    setPromptHistory([]);\r\n    localStorage.removeItem(\"veo3-prompt-history\");\r\n  };\r\n\r\n  const randomizePrompt = () => {\r\n    const randomData = createRandomPromptData();\r\n    setPromptData(randomData);\r\n  };\r\n\r\n  const copyToClipboard = async (text: string) => {\r\n    const success = await copyToClipboardUtil(text);\r\n    if (success) {\r\n      setCopied(true);\r\n      setTimeout(() => setCopied(false), 2000);\r\n    }\r\n  };\r\n\r\n  const loadFromHistory = (historyItem: HistoryItem) => {\r\n    setPromptData(historyItem.promptData);\r\n    setGeneratedPrompt(historyItem.basicPrompt);\r\n    setEnhancedPrompt(historyItem.enhancedPrompt);\r\n    if (historyItem.length) {\r\n      const match = historyItem.length.match(/(\\d+)/);\r\n      if (match) {\r\n        const charLimit = parseInt(match[1]);\r\n        if (charLimit >= 200 && charLimit <= 10000) {\r\n          setCustomCharacterLimit(charLimit);\r\n        }\r\n      }\r\n    }\r\n  };\r\n\r\n  const toggleFocusType = (\r\n    focusType: \"character\" | \"action\" | \"cinematic\" | \"safe\"\r\n  ) => {\r\n    setSelectedFocusTypes((prev) => {\r\n      if (prev.includes(focusType)) {\r\n        return prev.filter((type) => type !== focusType);\r\n      } else {\r\n        return [...prev, focusType];\r\n      }\r\n    });\r\n  };\r\n\r\n  const enhancePrompt = async (focusType?: string) => {\r\n    if (!enhancePromptFunction) {\r\n      console.warn(\"No enhance function provided\");\r\n      return;\r\n    }\r\n\r\n    let promptToEnhance = \"\";\r\n    if (activeTab === \"enhance\" && enhancedPrompt.trim()) {\r\n      promptToEnhance = enhancedPrompt.trim();\r\n    } else if (generatedPrompt.trim()) {\r\n      promptToEnhance = generatedPrompt.trim();\r\n    } else {\r\n      return;\r\n    }\r\n\r\n    setIsEnhancing(true);\r\n    setEnhanceError(\"\");\r\n\r\n    try {\r\n      const data = await enhancePromptFunction({\r\n        prompt: promptToEnhance,\r\n        customLimit: customCharacterLimit,\r\n        model: selectedModel,\r\n        focusType: focusType,\r\n        includeAudio: includeAudio,\r\n        promptData: promptData,\r\n        ...(moodboardEnabled && moodboardImages.length > 0\r\n          ? {\r\n              moodboard: {\r\n                enabled: true,\r\n                images: moodboardImages.map((img) => ({\r\n                  id: img.id,\r\n                  url: img.url,\r\n                  base64: img.base64,\r\n                  tags: img.tags,\r\n                  description: img.description,\r\n                  weight: img.weight,\r\n                })),\r\n              },\r\n            }\r\n          : {}),\r\n      });\r\n\r\n      if (data.enhancedPrompt) {\r\n        setEnhancedPrompt(data.enhancedPrompt);\r\n        setEnhancementInfo({\r\n          model: data.model || selectedModel,\r\n          modelName: data.model || selectedModel,\r\n          length: `${data.characterLimit || customCharacterLimit} chars`,\r\n          actualCharacters: data.characterCount || data.enhancedPrompt.length,\r\n          targetCharacters: data.targetCharacters || customCharacterLimit,\r\n        });\r\n\r\n        const basicPromptForHistory =\r\n          activeTab === \"enhance\" && enhancedPrompt.trim()\r\n            ? promptToEnhance\r\n            : generatedPrompt;\r\n        saveToHistory(\r\n          basicPromptForHistory,\r\n          data.enhancedPrompt,\r\n          `${data.characterLimit || customCharacterLimit} chars`,\r\n          data.model || selectedModel,\r\n          promptData\r\n        );\r\n      } else {\r\n        throw new Error(\"No enhanced prompt received\");\r\n      }\r\n    } catch (error) {\r\n      console.error(\"Enhancement error:\", error);\r\n      setEnhanceError(\r\n        error instanceof Error ? error.message : \"Failed to enhance prompt\"\r\n      );\r\n    } finally {\r\n      setIsEnhancing(false);\r\n    }\r\n  };\r\n\r\n  const enhanceWithSelectedFocus = async () => {\r\n    if (selectedFocusTypes.length === 0) {\r\n      await enhancePrompt();\r\n    } else {\r\n      await enhancePrompt(selectedFocusTypes.join(\",\"));\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className={`max-w-6xl mx-auto ${className}`}>\r\n      {/* Info Banner */}\r\n      {showInfoBanner && (\r\n        <div className=\"mb-6 p-4 bg-gradient-to-r from-green-50/10 to-blue-50/10 dark:from-green-950/20 dark:to-blue-950/20 border border-green-200/20 dark:border-green-600/20 rounded-lg\">\r\n          <div className=\"flex items-start gap-3\">\r\n            <div className=\"flex-shrink-0 w-8 h-8 bg-green-100/20 dark:bg-green-900/30 rounded-full flex items-center justify-center\">\r\n              <BookOpen className=\"w-4 h-4 text-green-600 dark:text-green-400\" />\r\n            </div>\r\n            <div className=\"flex-1\">\r\n              <h3 className=\"font-semibold text-green-900 dark:text-green-100 mb-1\">\r\n                Master VEO3 Video Generation\r\n              </h3>\r\n              <p className=\"text-sm text-green-700 dark:text-green-300 mb-2\">\r\n                Learn professional prompting techniques and best practices for\r\n                Google&apos;s most advanced AI video model.\r\n              </p>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      )}\r\n\r\n      <Tabs\r\n        value={activeTab}\r\n        onValueChange={setActiveTab}\r\n        className=\"space-y-6\"\r\n      >\r\n        <TabsList className=\"grid w-full grid-cols-3\">\r\n          <TabsTrigger value=\"builder\">Prompt Builder</TabsTrigger>\r\n          <TabsTrigger value=\"enhance\">AI Enhancement</TabsTrigger>\r\n          <TabsTrigger value=\"history\">\r\n            History ({promptHistory.length}/10)\r\n          </TabsTrigger>\r\n        </TabsList>\r\n\r\n        <TabsContent value=\"builder\">\r\n          <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\r\n            <PromptBuilder\r\n              promptData={promptData}\r\n              setPromptData={setPromptData}\r\n              addCharacter={addCharacter}\r\n              updateCharacter={updateCharacter}\r\n              removeCharacter={removeCharacter}\r\n              presetOptions={PRESET_OPTIONS}\r\n              moodboardEnabled={moodboardEnabled}\r\n              setMoodboardEnabled={setMoodboardEnabled}\r\n              moodboardImages={moodboardImages}\r\n              setMoodboardImages={setMoodboardImages}\r\n              MoodboardUploader={MoodboardUploader}\r\n            />\r\n            <PromptPreview\r\n              generatedPrompt={generatedPrompt}\r\n              setGeneratedPrompt={setGeneratedPrompt}\r\n              randomizePrompt={randomizePrompt}\r\n              clearAll={clearAll}\r\n              copyToClipboard={copyToClipboard}\r\n              copied={copied}\r\n              setActiveTab={setActiveTab}\r\n              isEnhancing={isEnhancing}\r\n              enhancePrompt={enhancePrompt}\r\n            />\r\n          </div>\r\n        </TabsContent>\r\n\r\n        <TabsContent value=\"enhance\">\r\n          <AIEnhancement\r\n            enhancedPrompt={enhancedPrompt}\r\n            setEnhancedPrompt={setEnhancedPrompt}\r\n            enhanceWithSelectedFocus={enhanceWithSelectedFocus}\r\n            isEnhancing={isEnhancing}\r\n            enhanceError={enhanceError}\r\n            enhancementInfo={enhancementInfo}\r\n            selectedFocusTypes={selectedFocusTypes}\r\n            toggleFocusType={toggleFocusType}\r\n            includeAudio={includeAudio}\r\n            setIncludeAudio={setIncludeAudio}\r\n            customCharacterLimit={customCharacterLimit}\r\n            setCustomCharacterLimit={setCustomCharacterLimit}\r\n            showSettings={showSettings}\r\n            setShowSettings={setShowSettings}\r\n            copied={copied}\r\n            copyToClipboard={copyToClipboard}\r\n          />\r\n        </TabsContent>\r\n\r\n        <TabsContent value=\"history\">\r\n          <PromptHistory\r\n            promptHistory={promptHistory}\r\n            loadFromHistory={loadFromHistory}\r\n            clearHistory={clearHistory}\r\n            setActiveTab={setActiveTab}\r\n          />\r\n        </TabsContent>\r\n      </Tabs>\r\n    </div>\r\n  );\r\n}\r\n","import {\r\n  Card,\r\n  CardHeader,\r\n  CardTitle,\r\n  CardContent,\r\n  Button,\r\n  Textarea,\r\n  Label,\r\n  Badge,\r\n} from \"@turbo-super/ui\";\r\nimport { Trash2 } from \"lucide-react\";\r\nimport { Character, PromptData, PresetOptions, MoodboardImage } from \"../types\";\r\nimport { MoodboardUploader as DefaultMoodboardUploader } from \"./MoodboardUploader\";\r\n\r\ninterface PromptBuilderProps {\r\n  promptData: PromptData;\r\n  setPromptData: (data: PromptData) => void;\r\n  addCharacter: () => void;\r\n  updateCharacter: (id: string, field: keyof Character, value: string) => void;\r\n  removeCharacter: (id: string) => void;\r\n  presetOptions: PresetOptions;\r\n  moodboardEnabled?: boolean;\r\n  setMoodboardEnabled?: (enabled: boolean) => void;\r\n  moodboardImages?: MoodboardImage[];\r\n  setMoodboardImages?: (images: MoodboardImage[]) => void;\r\n  MoodboardUploader?: React.ComponentType<{\r\n    images: MoodboardImage[];\r\n    setImages: (images: MoodboardImage[]) => void;\r\n  }>;\r\n}\r\n\r\nexport function PromptBuilder({\r\n  promptData,\r\n  setPromptData,\r\n  addCharacter,\r\n  updateCharacter,\r\n  removeCharacter,\r\n  presetOptions,\r\n  moodboardEnabled = false,\r\n  setMoodboardEnabled,\r\n  moodboardImages = [],\r\n  setMoodboardImages,\r\n  MoodboardUploader,\r\n}: PromptBuilderProps) {\r\n  return (\r\n    <Card>\r\n      <CardHeader>\r\n        <CardTitle>VEO3 Prompt Builder</CardTitle>\r\n      </CardHeader>\r\n      <CardContent className=\"space-y-4\">\r\n        {/* Scene Description */}\r\n        <div className=\"space-y-2 p-4 border-l-4 border-blue-500 bg-blue-950/20 rounded-lg\">\r\n          <Label\r\n            htmlFor=\"scene\"\r\n            className=\"flex items-center gap-2 text-blue-300 font-medium\"\r\n          >\r\n            🎬 Scene Description\r\n          </Label>\r\n          <Textarea\r\n            id=\"scene\"\r\n            placeholder=\"Describe the main scene (e.g., A cozy coffee shop in the morning)\"\r\n            value={promptData.scene}\r\n            onChange={(e) =>\r\n              setPromptData({ ...promptData, scene: e.target.value })\r\n            }\r\n            className=\"min-h-[80px] border-blue-600 bg-blue-950/10 focus:border-blue-400 focus:ring-blue-400\"\r\n          />\r\n        </div>\r\n        {/* Characters */}\r\n        <div className=\"space-y-4 p-4 border-l-4 border-green-500 bg-green-950/20 rounded-lg\">\r\n          <div className=\"flex items-center justify-between\">\r\n            <Label className=\"flex items-center gap-2 text-green-300 font-medium\">\r\n              👥 Characters ({promptData.characters.length})\r\n            </Label>\r\n            <Button\r\n              type=\"button\"\r\n              variant=\"outline\"\r\n              size=\"sm\"\r\n              onClick={addCharacter}\r\n              className=\"text-xs border-green-600 text-green-300 hover:bg-green-950/30\"\r\n            >\r\n              + Add Character\r\n            </Button>\r\n          </div>\r\n          {promptData.characters.length === 0 && (\r\n            <div className=\"text-sm text-muted-foreground p-4 border border-dashed rounded-lg text-center\">\r\n              No characters added yet. Click &quot;Add Character&quot; to start.\r\n            </div>\r\n          )}\r\n          {promptData.characters.map((character, index) => (\r\n            <div\r\n              key={character.id}\r\n              className=\"p-4 border border-green-600 bg-green-950/10 rounded-lg space-y-3\"\r\n            >\r\n              <div className=\"flex items-center justify-between\">\r\n                <Label className=\"text-sm font-medium\">\r\n                  Character {index + 1}\r\n                </Label>\r\n                {promptData.characters.length > 1 && (\r\n                  <Button\r\n                    type=\"button\"\r\n                    variant=\"ghost\"\r\n                    size=\"sm\"\r\n                    onClick={() => removeCharacter(character.id)}\r\n                    className=\"text-red-500 hover:text-red-700 size-6 p-0\"\r\n                  >\r\n                    <Trash2 className=\"size-3\" />\r\n                  </Button>\r\n                )}\r\n              </div>\r\n              <div className=\"grid grid-cols-1 gap-3\">\r\n                <div>\r\n                  <Label\r\n                    htmlFor={`char-name-${character.id}`}\r\n                    className=\"text-xs\"\r\n                  >\r\n                    Name\r\n                  </Label>\r\n                  <input\r\n                    id={`char-name-${character.id}`}\r\n                    type=\"text\"\r\n                    placeholder=\"Character name (e.g., Sarah, Vendor)\"\r\n                    value={character.name}\r\n                    onChange={(e) =>\r\n                      updateCharacter(character.id, \"name\", e.target.value)\r\n                    }\r\n                    className=\"w-full px-3 py-2 border border-green-600 bg-green-950/10 rounded-md text-sm focus:outline-none focus:ring-2 focus:ring-green-400 focus:border-transparent\"\r\n                  />\r\n                </div>\r\n                <div>\r\n                  <Label\r\n                    htmlFor={`char-desc-${character.id}`}\r\n                    className=\"text-xs\"\r\n                  >\r\n                    Description\r\n                  </Label>\r\n                  <Textarea\r\n                    id={`char-desc-${character.id}`}\r\n                    placeholder=\"Describe the character (e.g., A young woman with wavy brown hair)\"\r\n                    value={character.description}\r\n                    onChange={(e) =>\r\n                      updateCharacter(\r\n                        character.id,\r\n                        \"description\",\r\n                        e.target.value\r\n                      )\r\n                    }\r\n                    className=\"min-h-[60px] text-sm border-green-600 bg-green-950/10 focus:border-green-400 focus:ring-green-400\"\r\n                  />\r\n                </div>\r\n                <div className=\"relative\">\r\n                  <div className=\"flex items-center gap-2\">\r\n                    <Label\r\n                      htmlFor={`char-speech-${character.id}`}\r\n                      className=\"text-xs\"\r\n                    >\r\n                      Speech/Dialogue\r\n                    </Label>\r\n                    {character.speech && (\r\n                      <Badge\r\n                        variant=\"secondary\"\r\n                        className=\"text-xs px-2 py-0.5\"\r\n                      >\r\n                        🎙️ Has Voice\r\n                      </Badge>\r\n                    )}\r\n                  </div>\r\n                  <Textarea\r\n                    id={`char-speech-${character.id}`}\r\n                    placeholder=\"What they say (e.g., Hello there! or Привет!)\"\r\n                    value={character.speech}\r\n                    onChange={(e) =>\r\n                      updateCharacter(character.id, \"speech\", e.target.value)\r\n                    }\r\n                    className={`min-h-[50px] text-sm border-green-600 bg-green-950/10 focus:border-green-400 focus:ring-green-400 ${character.speech ? \"border-blue-400 bg-blue-950/20\" : \"\"}`}\r\n                  />\r\n                  {character.speech && (\r\n                    <div className=\"mt-1 text-xs text-blue-300 flex items-center gap-1\">\r\n                      <span>🔊</span>\r\n                      <span>\r\n                        This dialogue will be highlighted in the enhanced prompt\r\n                      </span>\r\n                    </div>\r\n                  )}\r\n                </div>\r\n              </div>\r\n            </div>\r\n          ))}\r\n        </div>\r\n        {/* Action */}\r\n        <div className=\"space-y-2 p-4 border-l-4 border-orange-500 bg-orange-950/20 rounded-lg\">\r\n          <Label\r\n            htmlFor=\"action\"\r\n            className=\"flex items-center gap-2 text-orange-300 font-medium\"\r\n          >\r\n            🎭 Action/Activity\r\n          </Label>\r\n          <Textarea\r\n            id=\"action\"\r\n            placeholder=\"What are they doing? (e.g., slowly sipping coffee while turning pages)\"\r\n            value={promptData.action}\r\n            onChange={(e) =>\r\n              setPromptData({ ...promptData, action: e.target.value })\r\n            }\r\n            className=\"border-orange-600 bg-orange-950/10 focus:border-orange-400 focus:ring-orange-400\"\r\n          />\r\n        </div>\r\n        {/* Language */}\r\n        <div className=\"space-y-2 p-4 border-l-4 border-yellow-500 bg-yellow-950/20 rounded-lg\">\r\n          <Label\r\n            htmlFor=\"language\"\r\n            className=\"flex items-center gap-2 text-yellow-300 font-medium\"\r\n          >\r\n            🗣️ Speech Language\r\n          </Label>\r\n          <div className=\"space-y-2\">\r\n            <input\r\n              id=\"language\"\r\n              type=\"text\"\r\n              placeholder=\"Enter language (e.g., English, Russian, Spanish...)\"\r\n              value={promptData.language}\r\n              onChange={(e) =>\r\n                setPromptData({ ...promptData, language: e.target.value })\r\n              }\r\n              className=\"w-full px-3 py-2 border border-yellow-600 bg-yellow-950/10 rounded-md text-sm focus:outline-none focus:ring-2 focus:ring-yellow-400 focus:border-transparent\"\r\n            />\r\n            <div className=\"flex flex-wrap gap-2\">\r\n              <Label className=\"text-xs text-yellow-300\">Quick select:</Label>\r\n              {presetOptions.languages.map((language: string) => (\r\n                <Badge\r\n                  key={language}\r\n                  variant={\r\n                    promptData.language === language ? \"default\" : \"outline\"\r\n                  }\r\n                  className={`cursor-pointer text-xs ${promptData.language === language ? \"bg-yellow-600 text-white\" : \"border-yellow-600 text-yellow-300 hover:bg-yellow-950/30\"}`}\r\n                  onClick={() => setPromptData({ ...promptData, language })}\r\n                >\r\n                  {language}\r\n                </Badge>\r\n              ))}\r\n            </div>\r\n          </div>\r\n        </div>\r\n        {/* Visual Style */}\r\n        <div className=\"space-y-2 p-4 border-l-4 border-purple-500 bg-purple-950/20 rounded-lg\">\r\n          <Label\r\n            htmlFor=\"style\"\r\n            className=\"flex items-center gap-2 text-purple-300 font-medium\"\r\n          >\r\n            🎨 Visual Style\r\n          </Label>\r\n          <div className=\"space-y-2\">\r\n            <input\r\n              id=\"style\"\r\n              type=\"text\"\r\n              placeholder=\"Enter visual style (e.g., Cinematic, Documentary, Anime...)\"\r\n              value={promptData.style}\r\n              onChange={(e) =>\r\n                setPromptData({ ...promptData, style: e.target.value })\r\n              }\r\n              className=\"w-full px-3 py-2 border border-purple-600 bg-purple-950/10 rounded-md text-sm focus:outline-none focus:ring-2 focus:ring-purple-400 focus:border-transparent\"\r\n            />\r\n            <div className=\"flex flex-wrap gap-2\">\r\n              <Label className=\"text-xs text-purple-300\">Quick select:</Label>\r\n              {presetOptions.styles.map((style: string) => (\r\n                <Badge\r\n                  key={style}\r\n                  variant={promptData.style === style ? \"default\" : \"outline\"}\r\n                  className={`cursor-pointer text-xs ${promptData.style === style ? \"bg-purple-600 text-white\" : \"border-purple-600 text-purple-300 hover:bg-purple-950/30\"}`}\r\n                  onClick={() => setPromptData({ ...promptData, style })}\r\n                >\r\n                  {style}\r\n                </Badge>\r\n              ))}\r\n            </div>\r\n          </div>\r\n        </div>\r\n        {/* Camera Angle */}\r\n        <div className=\"space-y-2 p-4 border-l-4 border-indigo-500 bg-indigo-950/20 rounded-lg\">\r\n          <Label\r\n            htmlFor=\"camera\"\r\n            className=\"flex items-center gap-2 text-indigo-300 font-medium\"\r\n          >\r\n            📹 Camera Angle\r\n          </Label>\r\n          <div className=\"space-y-2\">\r\n            <input\r\n              id=\"camera\"\r\n              type=\"text\"\r\n              placeholder=\"Enter camera angle (e.g., Close-up, Wide shot, Drone view...)\"\r\n              value={promptData.camera}\r\n              onChange={(e) =>\r\n                setPromptData({ ...promptData, camera: e.target.value })\r\n              }\r\n              className=\"w-full px-3 py-2 border border-indigo-600 bg-indigo-950/10 rounded-md text-sm focus:outline-none focus:ring-2 focus:ring-indigo-400 focus:border-transparent\"\r\n            />\r\n            <div className=\"flex flex-wrap gap-2\">\r\n              <Label className=\"text-xs text-indigo-300\">Quick select:</Label>\r\n              {presetOptions.cameras.map((camera: string) => (\r\n                <Badge\r\n                  key={camera}\r\n                  variant={promptData.camera === camera ? \"default\" : \"outline\"}\r\n                  className={`cursor-pointer text-xs ${promptData.camera === camera ? \"bg-indigo-600 text-white\" : \"border-indigo-600 text-indigo-300 hover:bg-indigo-950/30\"}`}\r\n                  onClick={() => setPromptData({ ...promptData, camera })}\r\n                >\r\n                  {camera}\r\n                </Badge>\r\n              ))}\r\n            </div>\r\n          </div>\r\n        </div>\r\n        {/* Lighting */}\r\n        <div className=\"space-y-2 p-4 border-l-4 border-pink-500 bg-pink-950/20 rounded-lg\">\r\n          <Label\r\n            htmlFor=\"lighting\"\r\n            className=\"flex items-center gap-2 text-pink-300 font-medium\"\r\n          >\r\n            💡 Lighting\r\n          </Label>\r\n          <div className=\"space-y-2\">\r\n            <input\r\n              id=\"lighting\"\r\n              type=\"text\"\r\n              placeholder=\"Enter lighting type (e.g., Natural, Golden hour, Dramatic...)\"\r\n              value={promptData.lighting}\r\n              onChange={(e) =>\r\n                setPromptData({ ...promptData, lighting: e.target.value })\r\n              }\r\n              className=\"w-full px-3 py-2 border border-pink-600 bg-pink-950/10 rounded-md text-sm focus:outline-none focus:ring-2 focus:ring-pink-400 focus:border-transparent\"\r\n            />\r\n            <div className=\"flex flex-wrap gap-2\">\r\n              <Label className=\"text-xs text-pink-300\">Quick select:</Label>\r\n              {presetOptions.lighting.map((light: string) => (\r\n                <Badge\r\n                  key={light}\r\n                  variant={\r\n                    promptData.lighting === light ? \"default\" : \"outline\"\r\n                  }\r\n                  className={`cursor-pointer text-xs ${promptData.lighting === light ? \"bg-pink-600 text-white\" : \"border-pink-600 text-pink-300 hover:bg-pink-950/30\"}`}\r\n                  onClick={() =>\r\n                    setPromptData({ ...promptData, lighting: light })\r\n                  }\r\n                >\r\n                  {light}\r\n                </Badge>\r\n              ))}\r\n            </div>\r\n          </div>\r\n        </div>\r\n        {/* Mood */}\r\n        <div className=\"space-y-2 p-4 border-l-4 border-rose-500 bg-rose-950/20 rounded-lg\">\r\n          <Label\r\n            htmlFor=\"mood\"\r\n            className=\"flex items-center gap-2 text-rose-300 font-medium\"\r\n          >\r\n            🌟 Mood\r\n          </Label>\r\n          <div className=\"space-y-2\">\r\n            <input\r\n              id=\"mood\"\r\n              type=\"text\"\r\n              placeholder=\"Enter mood (e.g., Peaceful, Energetic, Mysterious...)\"\r\n              value={promptData.mood}\r\n              onChange={(e) =>\r\n                setPromptData({ ...promptData, mood: e.target.value })\r\n              }\r\n              className=\"w-full px-3 py-2 border border-rose-600 bg-rose-950/10 rounded-md text-sm focus:outline-none focus:ring-2 focus:ring-rose-400 focus:border-transparent\"\r\n            />\r\n            <div className=\"flex flex-wrap gap-2\">\r\n              <Label className=\"text-xs text-rose-300\">Quick select:</Label>\r\n              {presetOptions.moods.map((mood: string) => (\r\n                <Badge\r\n                  key={mood}\r\n                  variant={promptData.mood === mood ? \"default\" : \"outline\"}\r\n                  className={`cursor-pointer text-xs ${promptData.mood === mood ? \"bg-rose-600 text-white\" : \"border-rose-600 text-rose-300 hover:bg-rose-950/30\"}`}\r\n                  onClick={() => setPromptData({ ...promptData, mood })}\r\n                >\r\n                  {mood}\r\n                </Badge>\r\n              ))}\r\n            </div>\r\n          </div>\r\n        </div>\r\n        {/* MoodboardUploader */}\r\n        {moodboardEnabled !== undefined &&\r\n          setMoodboardEnabled &&\r\n          setMoodboardImages && (\r\n            <DefaultMoodboardUploader\r\n              enabled={moodboardEnabled}\r\n              onEnabledChange={setMoodboardEnabled}\r\n              onImagesChange={setMoodboardImages}\r\n              maxImages={3}\r\n              value={moodboardImages}\r\n            />\r\n          )}\r\n      </CardContent>\r\n    </Card>\r\n  );\r\n}\r\n","import React, { useRef } from \"react\";\r\nimport { Label, Badge, Card, CardContent, CardHeader, CardTitle } from \"@turbo-super/ui\";\r\nimport { MoodboardImage } from \"../types\";\r\n\r\ninterface MoodboardUploaderProps {\r\n  enabled: boolean;\r\n  onEnabledChange: (enabled: boolean) => void;\r\n  onImagesChange: (images: MoodboardImage[]) => void;\r\n  maxImages?: number;\r\n  value?: MoodboardImage[];\r\n}\r\n\r\nexport function MoodboardUploader({\r\n  enabled,\r\n  onEnabledChange,\r\n  onImagesChange,\r\n  maxImages = 3,\r\n  value = [],\r\n}: MoodboardUploaderProps) {\r\n  const fileInputRef = useRef<HTMLInputElement>(null);\r\n\r\n  const handleFileSelect = (event: React.ChangeEvent<HTMLInputElement>) => {\r\n    const files = event.target.files;\r\n    if (!files) return;\r\n\r\n    const newImages: MoodboardImage[] = [];\r\n    \r\n    for (let i = 0; i < Math.min(files.length, maxImages - value.length); i++) {\r\n      const file = files[i];\r\n      if (file.type.startsWith('image/')) {\r\n        const reader = new FileReader();\r\n        reader.onload = (e) => {\r\n          const base64 = e.target?.result as string;\r\n          const newImage: MoodboardImage = {\r\n            id: Date.now().toString() + i,\r\n            file: file,\r\n            base64: base64,\r\n            tags: [],\r\n            description: \"\",\r\n            weight: 1.0,\r\n          };\r\n          \r\n          const updatedImages = [...value, newImage];\r\n          onImagesChange(updatedImages);\r\n        };\r\n        reader.readAsDataURL(file);\r\n      }\r\n    }\r\n  };\r\n\r\n  const handleDropZoneClick = () => {\r\n    fileInputRef.current?.click();\r\n  };\r\n\r\n  const removeImage = (imageId: string) => {\r\n    const updatedImages = value.filter(img => img.id !== imageId);\r\n    onImagesChange(updatedImages);\r\n  };\r\n\r\n  return (\r\n    <div className=\"space-y-6\">\r\n      {/* Enable/Disable Toggle */}\r\n      <div className=\"flex items-center space-x-3\">\r\n        <div className=\"flex items-center space-x-2\">\r\n          <input\r\n            type=\"checkbox\"\r\n            id=\"moodboard-toggle\"\r\n            checked={enabled}\r\n            onChange={(e) => onEnabledChange(e.target.checked)}\r\n            className=\"w-4 h-4 text-blue-600 bg-gray-100 border-gray-300 rounded focus:ring-blue-500 dark:focus:ring-blue-600 dark:ring-offset-gray-800 focus:ring-2 dark:bg-gray-700 dark:border-gray-600\"\r\n          />\r\n          <Label\r\n            htmlFor=\"moodboard-toggle\"\r\n            className=\"text-sm font-medium\"\r\n          >\r\n            Enable Moodboard References\r\n          </Label>\r\n        </div>\r\n        {enabled && (\r\n          <Badge\r\n            variant=\"outline\"\r\n            className=\"text-xs\"\r\n          >\r\n            {value.length}/{maxImages} images\r\n          </Badge>\r\n        )}\r\n      </div>\r\n\r\n      {enabled && (\r\n        <div className=\"space-y-6\">\r\n          {/* Image Uploader */}\r\n          <Card>\r\n            <CardHeader>\r\n              <CardTitle className=\"text-lg\">Visual References</CardTitle>\r\n            </CardHeader>\r\n            <CardContent>\r\n              <input\r\n                ref={fileInputRef}\r\n                type=\"file\"\r\n                multiple\r\n                accept=\"image/*\"\r\n                onChange={handleFileSelect}\r\n                className=\"hidden\"\r\n              />\r\n              <div \r\n                className=\"border-2 border-dashed border-gray-300 dark:border-gray-600 rounded-lg p-6 text-center cursor-pointer hover:border-blue-400 dark:hover:border-blue-500 transition-colors\"\r\n                onClick={handleDropZoneClick}\r\n              >\r\n                <div className=\"text-gray-500 dark:text-gray-400 mb-2\">\r\n                  📁 Click to Upload Images\r\n                </div>\r\n                <p className=\"text-sm text-gray-400 dark:text-gray-500\">\r\n                  Select up to {maxImages} images to use as visual references\r\n                </p>\r\n                <p className=\"text-xs text-gray-400 dark:text-gray-500 mt-1\">\r\n                  Supported formats: JPG, PNG, GIF, WebP\r\n                </p>\r\n              </div>\r\n            </CardContent>\r\n          </Card>\r\n\r\n          {/* Image Configuration */}\r\n          {value.length > 0 && (\r\n            <div className=\"space-y-4\">\r\n              {value.map((image) => (\r\n                <Card\r\n                  key={image.id}\r\n                  className=\"group relative\"\r\n                >\r\n                  <CardContent className=\"pt-6\">\r\n                    {/* Delete Button */}\r\n                    <button\r\n                      onClick={() => removeImage(image.id)}\r\n                      className=\"absolute top-2 right-2 z-10 p-1 bg-red-500 hover:bg-red-600 text-white rounded-full opacity-0 group-hover:opacity-100 transition-opacity\"\r\n                      title=\"Remove image\"\r\n                    >\r\n                      ✕\r\n                    </button>\r\n\r\n                    <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-6\">\r\n                      {/* Image Preview */}\r\n                      <div className=\"lg:col-span-1\">\r\n                        <div className=\"aspect-square relative rounded-lg overflow-hidden bg-muted\">\r\n                          {image.url ? (\r\n                            <img\r\n                              src={image.url}\r\n                              alt=\"Moodboard reference\"\r\n                              className=\"w-full h-full object-cover\"\r\n                            />\r\n                          ) : image.base64 ? (\r\n                            <img\r\n                              src={image.base64}\r\n                              alt=\"Moodboard reference\"\r\n                              className=\"w-full h-full object-cover\"\r\n                            />\r\n                          ) : (\r\n                            <div className=\"w-full h-full flex items-center justify-center text-muted-foreground\">\r\n                              Image Preview\r\n                            </div>\r\n                          )}\r\n                        </div>\r\n                      </div>\r\n\r\n                      {/* Configuration */}\r\n                      <div className=\"lg:col-span-2 space-y-4\">\r\n                        <div className=\"text-sm text-muted-foreground\">\r\n                          <p>Image ID: {image.id}</p>\r\n                          {image.description && (\r\n                            <p>Description: {image.description}</p>\r\n                          )}\r\n                          {image.tags.length > 0 && (\r\n                            <p>Tags: {image.tags.join(\", \")}</p>\r\n                          )}\r\n                          <p>Weight: {image.weight}</p>\r\n                        </div>\r\n                      </div>\r\n                    </div>\r\n                  </CardContent>\r\n                </Card>\r\n              ))}\r\n            </div>\r\n          )}\r\n\r\n          {/* Instructions */}\r\n          <Card className=\"border-blue-200 bg-blue-50/50 dark:border-blue-800 dark:bg-blue-950/20\">\r\n            <CardContent className=\"pt-6\">\r\n              <div className=\"space-y-3\">\r\n                <h4 className=\"text-sm font-semibold text-blue-900 dark:text-blue-100 flex items-center gap-2\">\r\n                  🎨 Moodboard Tips\r\n                </h4>\r\n                <ul className=\"text-sm text-blue-800 dark:text-blue-200 space-y-2\">\r\n                  <li className=\"flex items-start gap-2\">\r\n                    <span className=\"text-blue-600 dark:text-blue-400\">•</span>\r\n                    <span>Upload reference images to influence your VEO3 generation</span>\r\n                  </li>\r\n                  <li className=\"flex items-start gap-2\">\r\n                    <span className=\"text-blue-600 dark:text-blue-400\">•</span>\r\n                    <span>Add descriptions to highlight specific elements you want emphasized</span>\r\n                  </li>\r\n                  <li className=\"flex items-start gap-2\">\r\n                    <span className=\"text-blue-600 dark:text-blue-400\">•</span>\r\n                    <span>Adjust influence weight to control how much each image affects the result</span>\r\n                  </li>\r\n                </ul>\r\n              </div>\r\n            </CardContent>\r\n          </Card>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n} ","import {\n  Card,\n  CardHeader,\n  CardTitle,\n  CardContent,\n  Button,\n  Textarea,\n  Badge,\n} from \"@turbo-super/ui\";\nimport { Copy, Shuffle, Sparkles, Trash2 } from \"lucide-react\";\n\ninterface PromptPreviewProps {\n  generatedPrompt: string;\n  setGeneratedPrompt: (prompt: string) => void;\n  randomizePrompt: () => void;\n  clearAll: () => void;\n  copyToClipboard: (text: string) => void;\n  copied: boolean;\n  setActiveTab: (tab: string) => void;\n  isEnhancing: boolean;\n  enhancePrompt: () => void;\n}\n\nexport function PromptPreview({\n  generatedPrompt,\n  setGeneratedPrompt,\n  randomizePrompt,\n  clearAll,\n  copyToClipboard,\n  copied,\n  setActiveTab,\n  isEnhancing,\n  enhancePrompt,\n}: PromptPreviewProps) {\n  return (\n    <Card>\n      <CardHeader>\n        <CardTitle className=\"flex items-center gap-2\">\n          <Copy className=\"w-5 h-5\" />\n          Generated Prompt\n          <Badge\n            variant=\"secondary\"\n            className=\"ml-auto text-xs\"\n          >\n            Preview\n          </Badge>\n        </CardTitle>\n      </CardHeader>\n      <CardContent>\n        <div className=\"space-y-4\">\n          {/* Textarea with Copy button in top-right - Now Editable */}\n          <div className=\"relative\">\n            <Textarea\n              value={generatedPrompt}\n              onChange={(e: React.ChangeEvent<HTMLTextAreaElement>) =>\n                setGeneratedPrompt(e.target.value)\n              }\n              placeholder=\"Your generated prompt will appear here, or type your own prompt...\"\n              className=\"min-h-[400px] font-mono text-sm resize-none pr-20 bg-background border-border text-foreground\"\n            />\n            <div className=\"absolute top-2 right-2 flex gap-1\">\n              <Button\n                size=\"sm\"\n                variant=\"ghost\"\n                onClick={() => setGeneratedPrompt(\"\")}\n                disabled={!generatedPrompt}\n                className=\"size-8 p-0 hover:bg-background/80\"\n                title=\"Clear text\"\n              >\n                <Trash2 className=\"size-4\" />\n              </Button>\n              <Button\n                size=\"sm\"\n                variant=\"ghost\"\n                onClick={() => copyToClipboard(generatedPrompt)}\n                disabled={!generatedPrompt}\n                className=\"size-8 p-0 hover:bg-background/80\"\n                title={copied ? \"Copied!\" : \"Copy to clipboard\"}\n              >\n                <Copy className=\"size-4\" />\n              </Button>\n            </div>\n          </div>\n          {/* Action Buttons */}\n          <div className=\"space-y-3\">\n            {/* Quick Actions */}\n            <div className=\"flex gap-2\">\n              <Button\n                onClick={randomizePrompt}\n                variant=\"outline\"\n                className=\"flex-1\"\n              >\n                <Shuffle className=\"size-4 mr-2\" />\n                Randomize All\n              </Button>\n              <Button\n                onClick={clearAll}\n                variant=\"outline\"\n                className=\"flex-1\"\n              >\n                <Trash2 className=\"size-4 mr-2\" />\n                Clear All\n              </Button>\n            </div>\n            {/* Navigate to AI Enhancement - Large and Prominent */}\n            <Button\n              onClick={() => {\n                setActiveTab(\"enhance\");\n                setTimeout(() => {\n                  if (generatedPrompt && !isEnhancing) {\n                    enhancePrompt();\n                  }\n                }, 100);\n              }}\n              disabled={!generatedPrompt}\n              size=\"lg\"\n              className=\"w-full h-16 text-lg font-bold bg-gradient-to-r from-green-600 to-blue-600 hover:from-green-700 hover:to-blue-700 text-white shadow-lg transform hover:scale-[1.02] transition-all duration-200\"\n            >\n              <Sparkles className=\"size-6 mr-3\" />\n              Continue to AI Enhancement →\n            </Button>\n          </div>\n        </div>\n      </CardContent>\n    </Card>\n  );\n}\n","import {\n  Card,\n  CardHeader,\n  CardTitle,\n  CardContent,\n  Button,\n  Textarea,\n  Badge,\n} from \"@turbo-super/ui\";\nimport {\n  Sparkles,\n  Loader2,\n  Settings,\n  ChevronDown,\n  ChevronUp,\n  Copy,\n} from \"lucide-react\";\n\ninterface AIEnhancementProps {\n  enhancedPrompt: string;\n  setEnhancedPrompt: (prompt: string) => void;\n  enhanceWithSelectedFocus: () => void;\n  isEnhancing: boolean;\n  enhanceError: string;\n  enhancementInfo: any;\n  selectedFocusTypes: string[];\n  toggleFocusType: (\n    type: \"character\" | \"action\" | \"cinematic\" | \"safe\"\n  ) => void;\n  includeAudio: boolean;\n  setIncludeAudio: (val: boolean) => void;\n  customCharacterLimit: number;\n  setCustomCharacterLimit: (val: number) => void;\n  showSettings: boolean;\n  setShowSettings: (val: boolean) => void;\n  copied: boolean;\n  copyToClipboard: (text: string) => void;\n}\n\nexport function AIEnhancement({\n  enhancedPrompt,\n  setEnhancedPrompt,\n  enhanceWithSelectedFocus,\n  isEnhancing,\n  enhanceError,\n  enhancementInfo,\n  selectedFocusTypes,\n  toggleFocusType,\n  includeAudio,\n  setIncludeAudio,\n  customCharacterLimit,\n  setCustomCharacterLimit,\n  showSettings,\n  setShowSettings,\n  copied,\n  copyToClipboard,\n}: AIEnhancementProps) {\n  return (\n    <Card>\n      <CardHeader>\n        <CardTitle className=\"flex items-center gap-2\">\n          <Sparkles className=\"w-5 h-5 text-purple-600\" />\n          AI Enhanced Prompt\n        </CardTitle>\n      </CardHeader>\n      <CardContent>\n        <div className=\"space-y-4\">\n          {/* Main AI Enhance Button - Large and Prominent */}\n          <Button\n            onClick={enhanceWithSelectedFocus}\n            disabled={isEnhancing}\n            size=\"lg\"\n            className=\"w-full h-16 text-lg font-bold bg-gradient-to-r from-green-600 to-blue-600 hover:from-green-700 hover:to-blue-700 text-white shadow-lg transform hover:scale-[1.02] transition-all duration-200\"\n          >\n            {isEnhancing ? (\n              <>\n                <Loader2 className=\"w-6 h-6 mr-3 animate-spin\" />\n                Enhancing with AI...\n              </>\n            ) : (\n              <>\n                <Sparkles className=\"w-6 h-6 mr-3\" />\n                {enhancedPrompt.trim()\n                  ? \"Re-enhance with AI\"\n                  : \"Enhance with AI\"}\n                {selectedFocusTypes.length > 0 && (\n                  <span className=\"ml-2 text-sm opacity-90\">\n                    ({selectedFocusTypes.length} focus\n                    {selectedFocusTypes.length !== 1 ? \"es\" : \"\"})\n                  </span>\n                )}\n              </>\n            )}\n          </Button>\n          {/* Quick Enhancement Actions */}\n          <div className=\"grid grid-cols-2 md:grid-cols-3 lg:grid-cols-5 gap-2\">\n            <Button\n              variant={\n                selectedFocusTypes.includes(\"character\") ? \"default\" : \"outline\"\n              }\n              size=\"sm\"\n              onClick={() => toggleFocusType(\"character\")}\n              className=\"text-xs\"\n            >\n              👤 Focus Character\n            </Button>\n            <Button\n              variant={\n                selectedFocusTypes.includes(\"action\") ? \"default\" : \"outline\"\n              }\n              size=\"sm\"\n              onClick={() => toggleFocusType(\"action\")}\n              className=\"text-xs\"\n            >\n              🎬 Focus Action\n            </Button>\n            <Button\n              variant={\n                selectedFocusTypes.includes(\"cinematic\") ? \"default\" : \"outline\"\n              }\n              size=\"sm\"\n              onClick={() => toggleFocusType(\"cinematic\")}\n              className=\"text-xs\"\n            >\n              🎥 More Cinematic\n            </Button>\n            <Button\n              variant={includeAudio ? \"default\" : \"outline\"}\n              size=\"sm\"\n              onClick={() => setIncludeAudio(!includeAudio)}\n              className={`text-xs ${\n                includeAudio\n                  ? \"bg-blue-600 text-white border-blue-600 hover:bg-blue-700\"\n                  : \"bg-blue-50 border-blue-200 hover:bg-blue-100\"\n              }`}\n            >\n              🔊 Audio & Voice\n            </Button>\n            <Button\n              variant={\n                selectedFocusTypes.includes(\"safe\") ? \"default\" : \"outline\"\n              }\n              size=\"sm\"\n              onClick={() => toggleFocusType(\"safe\")}\n              className={`text-xs ${\n                selectedFocusTypes.includes(\"safe\")\n                  ? \"bg-green-600 text-white border-green-600 hover:bg-green-700\"\n                  : \"bg-green-50 border-green-200 hover:bg-green-100\"\n              }`}\n            >\n              🛡️ Safe Content\n            </Button>\n          </div>\n          {/* Collapsible Settings */}\n          <div className=\"border rounded-lg\">\n            <Button\n              variant=\"ghost\"\n              onClick={() => setShowSettings(!showSettings)}\n              className=\"w-full justify-between p-3 h-auto\"\n            >\n              <div className=\"flex items-center gap-2\">\n                <Settings className=\"w-4 h-4\" />\n                <span className=\"text-sm\">Enhancement Settings</span>\n                <Badge\n                  variant=\"outline\"\n                  className=\"text-xs\"\n                >\n                  {customCharacterLimit} chars • GPT-4.1\n                </Badge>\n              </div>\n              {showSettings ? (\n                <ChevronUp className=\"w-4 h-4\" />\n              ) : (\n                <ChevronDown className=\"w-4 h-4\" />\n              )}\n            </Button>\n            {showSettings && (\n              <div className=\"px-3 pb-3 space-y-3 border-t\">\n                {/* Character Limit Slider */}\n                <div className=\"space-y-3\">\n                  <div className=\"flex items-center justify-between\">\n                    <span className=\"text-xs text-muted-foreground\">\n                      Character Limit\n                    </span>\n                    <Badge\n                      variant=\"outline\"\n                      className=\"text-xs\"\n                    >\n                      {customCharacterLimit} chars\n                    </Badge>\n                  </div>\n                  <div className=\"space-y-2\">\n                    <input\n                      type=\"range\"\n                      min=\"200\"\n                      max=\"10000\"\n                      step=\"100\"\n                      value={customCharacterLimit}\n                      onChange={(e) =>\n                        setCustomCharacterLimit(Number(e.target.value))\n                      }\n                      className=\"w-full h-2 bg-gray-200 rounded-lg appearance-none cursor-pointer slider\"\n                    />\n                    <div className=\"flex justify-between text-xs text-muted-foreground\">\n                      <span>200</span>\n                      <span>2K</span>\n                      <span>5K</span>\n                      <span>10K</span>\n                    </div>\n                  </div>\n                  <div className=\"text-xs text-muted-foreground\">\n                    {customCharacterLimit < 600 && \"Concise and focused\"}\n                    {customCharacterLimit >= 600 &&\n                      customCharacterLimit < 1500 &&\n                      \"Balanced detail\"}\n                    {customCharacterLimit >= 1500 &&\n                      customCharacterLimit < 3000 &&\n                      \"Rich and detailed\"}\n                    {customCharacterLimit >= 3000 && \"Extremely detailed\"}\n                  </div>\n                </div>\n                {/* Model Info */}\n                <div className=\"space-y-2\">\n                  <span className=\"text-xs text-muted-foreground\">\n                    AI Model\n                  </span>\n                  <div className=\"p-2 bg-muted rounded text-xs\">\n                    <div className=\"font-medium\">GPT-4.1</div>\n                    <div className=\"text-muted-foreground\">\n                      Best quality enhancement model\n                    </div>\n                  </div>\n                </div>\n              </div>\n            )}\n          </div>\n          {enhanceError && (\n            <div className=\"p-3 bg-red-50 border border-red-200 rounded-lg\">\n              <p className=\"text-sm text-red-600\">{enhanceError}</p>\n            </div>\n          )}\n          {/* AI Enhanced Prompt Display */}\n          <div className=\"relative\">\n            <Textarea\n              value={enhancedPrompt}\n              onChange={(e) => setEnhancedPrompt(e.target.value)}\n              placeholder=\"Click 'Enhance with AI' to generate a professional, detailed prompt...\"\n              className=\"min-h-[500px] font-mono text-sm resize-none whitespace-pre-wrap pr-12 bg-background border-border text-foreground\"\n            />\n            <Button\n              size=\"sm\"\n              variant=\"ghost\"\n              onClick={() => copyToClipboard(enhancedPrompt)}\n              disabled={!enhancedPrompt}\n              className=\"absolute top-2 right-2 h-8 w-8 p-0 hover:bg-background/80\"\n              title={copied ? \"Copied!\" : \"Copy enhanced prompt\"}\n            >\n              <Copy className=\"w-4 h-4\" />\n            </Button>\n          </div>\n          {/* Enhancement Info - Compact */}\n          {enhancementInfo && (\n            <div className=\"p-3 bg-muted/50 rounded-lg\">\n              <div className=\"flex justify-between items-center text-xs text-muted-foreground\">\n                <div className=\"flex items-center gap-3\">\n                  <span>\n                    Model:{\" \"}\n                    <span className=\"font-medium text-foreground\">\n                      {enhancementInfo.modelName || enhancementInfo.model}\n                    </span>\n                  </span>\n                  <span>\n                    Length:{\" \"}\n                    <span className=\"font-medium text-foreground\">\n                      {enhancementInfo.length}\n                    </span>\n                  </span>\n                </div>\n                <div className=\"flex items-center gap-2\">\n                  <span>\n                    Characters:{\" \"}\n                    <span className=\"font-medium text-foreground\">\n                      {enhancementInfo.actualCharacters} /{\" \"}\n                      {enhancementInfo.targetCharacters}\n                    </span>\n                  </span>\n                  <Badge\n                    variant={\n                      enhancementInfo.actualCharacters <=\n                      enhancementInfo.targetCharacters\n                        ? \"default\"\n                        : \"secondary\"\n                    }\n                    className=\"text-xs\"\n                  >\n                    {enhancementInfo.actualCharacters <=\n                    enhancementInfo.targetCharacters\n                      ? \"✓ Within limit\"\n                      : \"⚠ Over limit\"}\n                  </Badge>\n                </div>\n              </div>\n            </div>\n          )}\n          {/* Bottom Enhance Button - Duplicate for convenience */}\n          <Button\n            onClick={enhanceWithSelectedFocus}\n            disabled={isEnhancing}\n            size=\"lg\"\n            className=\"w-full h-16 text-lg font-bold bg-gradient-to-r from-green-600 to-blue-600 hover:from-green-700 hover:to-blue-700 text-white shadow-lg transform hover:scale-[1.02] transition-all duration-200\"\n          >\n            {isEnhancing ? (\n              <>\n                <Loader2 className=\"w-6 h-6 mr-3 animate-spin\" />\n                Enhancing with AI...\n              </>\n            ) : (\n              <>\n                <Sparkles className=\"w-6 h-6 mr-3\" />\n                {enhancedPrompt.trim()\n                  ? \"Re-enhance with AI\"\n                  : \"Enhance with AI\"}\n                {selectedFocusTypes.length > 0 && (\n                  <span className=\"ml-2 text-sm opacity-90\">\n                    ({selectedFocusTypes.length} focus\n                    {selectedFocusTypes.length !== 1 ? \"es\" : \"\"})\n                  </span>\n                )}\n              </>\n            )}\n          </Button>\n        </div>\n      </CardContent>\n    </Card>\n  );\n}\n","import { Card, CardHeader, CardTitle, CardContent, Button, Badge } from '@turbo-super/ui';\r\nimport { Copy, Trash2 } from \"lucide-react\";\r\nimport { HistoryItem } from \"../types\";\r\n\r\ninterface PromptHistoryProps {\r\n  promptHistory: HistoryItem[];\r\n  loadFromHistory: (item: HistoryItem) => void;\r\n  clearHistory: () => void;\r\n  setActiveTab: (tab: string) => void;\r\n}\r\n\r\nexport function PromptHistory({\r\n  promptHistory,\r\n  loadFromHistory,\r\n  clearHistory,\r\n  setActiveTab,\r\n}: PromptHistoryProps) {\r\n  return (\r\n    <Card>\r\n      {promptHistory.length > 0 ? (\r\n        <>\r\n          <CardHeader>\r\n            <div className=\"flex items-center justify-between\">\r\n              <CardTitle className=\"flex items-center gap-2\">\r\n                <Copy className=\"w-5 h-5\" />\r\n                Recent Prompts History\r\n                <Badge\r\n                  variant=\"outline\"\r\n                  className=\"ml-2\"\r\n                >\r\n                  {promptHistory.length}/10\r\n                </Badge>\r\n              </CardTitle>\r\n              <Button\r\n                onClick={clearHistory}\r\n                variant=\"ghost\"\r\n                size=\"sm\"\r\n                className=\"text-muted-foreground hover:text-destructive\"\r\n              >\r\n                <Trash2 className=\"w-4 h-4\" />\r\n              </Button>\r\n            </div>\r\n          </CardHeader>\r\n          <CardContent>\r\n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\r\n              {promptHistory.slice(0, 10).map((historyItem) => (\r\n                <div\r\n                  key={historyItem.id}\r\n                  className=\"p-4 border rounded-lg hover:bg-muted/50 transition-colors\"\r\n                >\r\n                  <div className=\"flex justify-between items-start mb-3\">\r\n                    <p className=\"text-xs text-muted-foreground\">\r\n                      {historyItem.timestamp &&\r\n                      typeof historyItem.timestamp === \"object\" &&\r\n                      \"toLocaleString\" in historyItem.timestamp\r\n                        ? historyItem.timestamp.toLocaleString()\r\n                        : String(historyItem.timestamp)}\r\n                    </p>\r\n                    <div className=\"flex gap-1\">\r\n                      {historyItem.model && (\r\n                        <Badge\r\n                          variant=\"outline\"\r\n                          className=\"text-xs\"\r\n                        >\r\n                          {historyItem.model}\r\n                        </Badge>\r\n                      )}\r\n                      <Badge\r\n                        variant=\"secondary\"\r\n                        className=\"text-xs\"\r\n                      >\r\n                        {historyItem.length}\r\n                      </Badge>\r\n                    </div>\r\n                  </div>\r\n                  <p className=\"text-sm mb-3 line-clamp-3\">\r\n                    {historyItem.basicPrompt &&\r\n                    historyItem.basicPrompt.length > 120\r\n                      ? historyItem.basicPrompt.substring(0, 120) + \"...\"\r\n                      : historyItem.basicPrompt}\r\n                  </p>\r\n                  <Button\r\n                    onClick={() => loadFromHistory(historyItem)}\r\n                    variant=\"outline\"\r\n                    size=\"sm\"\r\n                    className=\"w-full\"\r\n                  >\r\n                    Load This Version\r\n                  </Button>\r\n                </div>\r\n              ))}\r\n            </div>\r\n          </CardContent>\r\n        </>\r\n      ) : (\r\n        <CardContent className=\"flex flex-col items-center justify-center py-12\">\r\n          <Copy className=\"w-12 h-12 text-muted-foreground mb-4\" />\r\n          <h3 className=\"text-lg font-semibold mb-2\">No History Yet</h3>\r\n          <p className=\"text-muted-foreground text-center mb-4\">\r\n            Generate and enhance prompts to see them here\r\n          </p>\r\n          <Button\r\n            variant=\"outline\"\r\n            onClick={() => setActiveTab(\"builder\")}\r\n          >\r\n            Start Building\r\n          </Button>\r\n        </CardContent>\r\n      )}\r\n    </Card>\r\n  );\r\n} ","import { PromptData, Character } from \"../types\";\r\n\r\nexport const generatePrompt = (data: PromptData): string => {\r\n  const parts: string[] = [];\r\n\r\n  if (data.scene) parts.push(data.scene);\r\n\r\n  if (data.characters.length > 0) {\r\n    const validCharacters = data.characters.filter(\r\n      (char) => char.name || char.description\r\n    );\r\n    if (validCharacters.length > 0) {\r\n      const characterDescriptions = validCharacters.map((char) => {\r\n        let desc = char.description || char.name || \"a character\";\r\n        if (char.speech && data.language) {\r\n          desc += ` who says in ${data.language.toLowerCase()}: \"${char.speech}\"`;\r\n        }\r\n        return desc;\r\n      });\r\n      parts.push(`featuring ${characterDescriptions.join(\", \")}`);\r\n    }\r\n  }\r\n\r\n  if (data.action) parts.push(`${data.action}`);\r\n  if (data.camera) parts.push(`Shot with ${data.camera.toLowerCase()}`);\r\n  if (data.style) parts.push(`${data.style.toLowerCase()} style`);\r\n  if (data.lighting) parts.push(`${data.lighting.toLowerCase()} lighting`);\r\n  if (data.mood) parts.push(`${data.mood.toLowerCase()} mood`);\r\n\r\n  return parts.length > 0\r\n    ? parts.join(\", \") + \".\"\r\n    : \"Your generated prompt will appear here, or type your own prompt...\";\r\n};\r\n\r\nexport const createRandomPromptData = (): PromptData => {\r\n  const styles = [\r\n    \"Cinematic\",\r\n    \"Documentary\",\r\n    \"Anime\",\r\n    \"Realistic\",\r\n    \"Artistic\",\r\n    \"Vintage\",\r\n    \"Modern\",\r\n  ];\r\n  const cameras = [\r\n    \"Close-up\",\r\n    \"Wide shot\",\r\n    \"Over-the-shoulder\",\r\n    \"Drone view\",\r\n    \"Handheld\",\r\n    \"Static\",\r\n  ];\r\n  const lighting = [\r\n    \"Natural\",\r\n    \"Golden hour\",\r\n    \"Blue hour\",\r\n    \"Dramatic\",\r\n    \"Soft\",\r\n    \"Neon\",\r\n    \"Candlelight\",\r\n  ];\r\n  const moods = [\r\n    \"Peaceful\",\r\n    \"Energetic\",\r\n    \"Mysterious\",\r\n    \"Romantic\",\r\n    \"Tense\",\r\n    \"Joyful\",\r\n    \"Melancholic\",\r\n  ];\r\n  const languages = [\r\n    \"English\",\r\n    \"Spanish\",\r\n    \"French\",\r\n    \"German\",\r\n    \"Italian\",\r\n    \"Russian\",\r\n    \"Japanese\",\r\n    \"Chinese\",\r\n  ];\r\n\r\n  return {\r\n    scene: \"A serene lakeside at sunset\",\r\n    characters: [\r\n      {\r\n        id: \"1\",\r\n        name: \"Person\",\r\n        description: \"A person in casual clothes\",\r\n        speech: Math.random() > 0.5 ? \"Perfect evening for this!\" : \"\",\r\n      },\r\n    ],\r\n    action: \"skipping stones across the water\",\r\n    language: languages[Math.floor(Math.random() * languages.length)],\r\n    style: styles[Math.floor(Math.random() * styles.length)],\r\n    camera: cameras[Math.floor(Math.random() * cameras.length)],\r\n    lighting: lighting[Math.floor(Math.random() * lighting.length)],\r\n    mood: moods[Math.floor(Math.random() * moods.length)],\r\n  };\r\n};\r\n\r\nexport const createEmptyPromptData = (): PromptData => ({\r\n  scene: \"\",\r\n  style: \"\",\r\n  camera: \"\",\r\n  characters: [],\r\n  action: \"\",\r\n  lighting: \"\",\r\n  mood: \"\",\r\n  language: \"English\",\r\n});\r\n\r\nexport const createCharacter = (id?: string): Character => ({\r\n  id: id || Date.now().toString(),\r\n  name: \"\",\r\n  description: \"\",\r\n  speech: \"\",\r\n});\r\n\r\nexport const copyToClipboard = async (text: string): Promise<boolean> => {\r\n  try {\r\n    await navigator.clipboard.writeText(text);\r\n    return true;\r\n  } catch (error) {\r\n    console.error(\"Failed to copy to clipboard:\", error);\r\n    return false;\r\n  }\r\n};\r\n\r\nexport const getLocaleLanguage = (): string => {\r\n  if (typeof window === \"undefined\") return \"English\";\r\n\r\n  const locale = window.location.pathname.split(\"/\")[1];\r\n  const localeToLanguage: Record<string, string> = {\r\n    en: \"English\",\r\n    ru: \"Russian\",\r\n    es: \"Spanish\",\r\n    hi: \"Hindi\",\r\n    tr: \"Turkish\",\r\n  };\r\n\r\n  return localeToLanguage[locale] || \"English\";\r\n};\r\n","import { PresetOptions } from \"../types\";\r\n\r\nexport const PRESET_OPTIONS: PresetOptions = {\r\n  styles: [\"Cinematic\", \"Documentary\", \"Anime\", \"Realistic\", \"Artistic\", \"Vintage\", \"Modern\"],\r\n  cameras: [\"Close-up\", \"Wide shot\", \"Over-the-shoulder\", \"Drone view\", \"Handheld\", \"Static\"],\r\n  lighting: [\"Natural\", \"Golden hour\", \"Blue hour\", \"Dramatic\", \"Soft\", \"Neon\", \"Candlelight\"],\r\n  moods: [\"Peaceful\", \"Energetic\", \"Mysterious\", \"Romantic\", \"Tense\", \"Joyful\", \"Melancholic\"],\r\n  languages: [\"English\", \"Spanish\", \"French\", \"German\", \"Italian\", \"Russian\", \"Japanese\", \"Chinese\"]\r\n};\r\n\r\nexport const STORAGE_KEYS = {\r\n  PROMPT_HISTORY: 'veo3-prompt-history',\r\n  CUSTOM_CHARACTER_LIMIT: 'veo3-custom-character-limit',\r\n  INCLUDE_AUDIO: 'veo3-include-audio',\r\n  MOODBOARD_ENABLED: 'veo3-moodboard-enabled'\r\n} as const;\r\n\r\nexport const DEFAULT_VALUES = {\r\n  CHARACTER_LIMIT: 4000,\r\n  LANGUAGE: 'English',\r\n  INCLUDE_AUDIO: true,\r\n  MOODBOARD_ENABLED: true,\r\n  HISTORY_LIMIT: 10\r\n} as const; "],"mappings":"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","names":["Card","CardHeader","CardTitle","CardContent","Label","Badge","jsx","jsxs","MoodboardUploader","Card","CardHeader","CardTitle","CardContent","Label","Badge","Card","CardHeader","CardTitle","CardContent","Button","Textarea","Badge","Trash2","jsx","jsxs","copyToClipboard","Card","CardHeader","CardTitle","CardContent","Button","Textarea","Badge","Sparkles","Copy","jsx","jsxs","copyToClipboard","Card","CardHeader","CardTitle","CardContent","Button","Badge","Copy","Trash2","Fragment","jsx","jsxs","jsx","jsxs","MoodboardUploader","enhancedPrompt","promptData","copyToClipboard"]}