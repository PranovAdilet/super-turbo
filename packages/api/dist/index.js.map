{"version":3,"sources":["../src/superduperai/client.ts","../src/superduperai/types.ts","../src/superduperai/endpoints.ts","../src/superduperai/config.ts","../src/superduperai/lib/image-generation/strategies/text-to-image.ts","../src/superduperai/lib/image-generation/strategies/image-to-image.ts","../src/superduperai/lib/image-generation/strategy.factory.ts","../src/superduperai/lib/image-generation/generate.ts","../src/superduperai/lib/video-generation/strategies/image-to-video.ts","../src/superduperai/lib/video-generation/strategies/text-to-video.ts","../src/superduperai/lib/video-generation/strategy.factory.ts","../src/superduperai/lib/video-generation/generate.ts","../src/superduperai/lib/pricing/tools-pricing.ts","../src/superduperai/lib/pricing/balance-utils.ts","../src/stripe/client.ts","../src/stripe/endpoints.ts","../src/upload/client.ts","../src/websocket/client.ts"],"names":["axios","API_ENDPOINTS","config","GenerationType","ListOrder","snakeCase","getStringValue","parseResolution"],"mappings":"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","file":"index.js","sourcesContent":["import axios, { AxiosInstance, AxiosRequestConfig } from 'axios';\r\nimport { API_ENDPOINTS } from '@turbo-super/core';\r\n\r\nexport class SuperDuperAIClient {\r\n  private client: AxiosInstance;\r\n\r\n  constructor(config?: AxiosRequestConfig) {\r\n    this.client = axios.create({\r\n      baseURL: API_ENDPOINTS.SUPERDUPERAI_BASE_URL,\r\n      timeout: 30000,\r\n      ...config,\r\n    });\r\n\r\n    // Add request interceptor for authentication\r\n    this.client.interceptors.request.use((config) => {\r\n      // Add auth headers if needed\r\n      return config;\r\n    });\r\n\r\n    // Add response interceptor for error handling\r\n    this.client.interceptors.response.use(\r\n      (response) => response,\r\n      (error) => {\r\n        // Handle common errors\r\n        return Promise.reject(error);\r\n      }\r\n    );\r\n  }\r\n\r\n  // Generic request method\r\n  async request<T>(config: AxiosRequestConfig): Promise<T> {\r\n    const response = await this.client.request<T>(config);\r\n    return response.data;\r\n  }\r\n\r\n  // Get the underlying axios instance\r\n  getAxiosInstance(): AxiosInstance {\r\n    return this.client;\r\n  }\r\n}\r\n\r\n// Export default instance\r\nexport const superDuperAIClient = new SuperDuperAIClient();\r\n","// SuperDuperAI API types\r\n\r\nexport interface APIResponse<T = any> {\r\n  success: boolean;\r\n  data?: T;\r\n  message?: string;\r\n  error?: string;\r\n}\r\n\r\nexport interface AuthCredentials {\r\n  token: string;\r\n  userId?: string;\r\n}\r\n\r\nexport interface GenerationRequest {\r\n  prompt: string;\r\n  model: string;\r\n  parameters?: Record<string, any>;\r\n  userId?: string;\r\n  sessionId?: string;\r\n}\r\n\r\nexport interface GenerationResponse {\r\n  id: string;\r\n  status: 'pending' | 'processing' | 'completed' | 'failed';\r\n  result?: any;\r\n  error?: string;\r\n  progress?: number;\r\n}\r\n\r\nexport interface ModelConfig {\r\n  name: string;\r\n  type: string;\r\n  source: string;\r\n  params?: {\r\n    workflow_path?: string;\r\n    price?: number;\r\n    max_duration?: number;\r\n    max_resolution?: { width: number; height: number };\r\n    supported_frame_rates?: number[];\r\n    supported_aspect_ratios?: string[];\r\n    supported_qualities?: string[];\r\n  };\r\n}\r\n\r\nexport interface GenerationConfig {\r\n  id: string;\r\n  name: string;\r\n  type: string;\r\n  source: string;\r\n  params?: Record<string, any>;\r\n}\r\n\r\nexport interface VideoModel extends ModelConfig {}\r\nexport interface ImageModel extends ModelConfig {}\r\n\r\nexport enum GenerationType {\r\n  TEXT_TO_IMAGE = \"text_to_image\",\r\n  IMAGE_TO_IMAGE = \"image_to_image\",\r\n  TEXT_TO_VIDEO = \"text_to_video\",\r\n  IMAGE_TO_VIDEO = \"image_to_video\",\r\n  VIDEO_TO_VIDEO = \"video_to_video\"\r\n}\r\n\r\nexport enum ListOrder {\r\n  ASC = \"asc\",\r\n  DESC = \"desc\"\r\n}\r\n","// SuperDuperAI API endpoints\r\n\r\nexport const ENDPOINTS = {\r\n  // Base endpoints\r\n  BASE: \"/api\",\r\n  \r\n  // Generation endpoints\r\n  GENERATE_IMAGE: \"/api/generate/image\",\r\n  GENERATE_VIDEO: \"/api/generate/video\",\r\n  GENERATE_SCRIPT: \"/api/generate/script\",\r\n  \r\n  // Configuration endpoints\r\n  CONFIG_MODELS: \"/api/config/models\",\r\n  CONFIG_SUPERDUPERAI: \"/api/config/superduperai\",\r\n  CONFIG_GENERATION: \"/api/config/generation\",\r\n  \r\n  // File endpoints\r\n  FILE_UPLOAD: \"/api/files/upload\",\r\n  FILE_DOWNLOAD: \"/api/file\",\r\n  \r\n  // Project endpoints\r\n  PROJECT_CREATE: \"/api/project\",\r\n  PROJECT_VIDEO: \"/api/project/video\",\r\n  \r\n  // User endpoints\r\n  USER_BALANCE: \"/api/user/balance\",\r\n  USER_HISTORY: \"/api/history\",\r\n  \r\n  // Enhancement endpoints\r\n  ENHANCE_PROMPT: \"/api/enhance-prompt\",\r\n  \r\n  // Event endpoints\r\n  EVENTS_FILE: \"/api/events/file\",\r\n  \r\n  // WebSocket endpoints\r\n  WEBSOCKET_BASE: \"wss://ws.superduperai.co\",\r\n  WEBSOCKET_CHAT: \"wss://ws.superduperai.co/chat\",\r\n  WEBSOCKET_GENERATION: \"wss://ws.superduperai.co/generation\"\r\n} as const;\r\n\r\nexport const API_ROUTES = {\r\n  // Next.js API routes\r\n  NEXT: {\r\n    GENERATE_IMAGE: \"/api/generate/image\",\r\n    GENERATE_VIDEO: \"/api/generate/video\",\r\n    GENERATE_SCRIPT: \"/api/generate/script\",\r\n    FILE: (id: string) => `/api/file/${id}`,\r\n    FILE_UPLOAD: \"/api/file/upload\",\r\n    PROJECT: (id: string) => `/api/project/${id}`,\r\n    PROJECT_VIDEO: \"/api/project/video\",\r\n    ENHANCE_PROMPT: \"/api/enhance-prompt\",\r\n    MODELS: \"/api/config/models\",\r\n    SUPERDUPERAI: \"/api/config/superduperai\",\r\n    EVENTS_FILE: (fileId: string) => `/api/events/file.${fileId}`,\r\n  }\r\n} as const;\r\n","// SuperDuperAI API Configuration\r\n\r\nexport interface SuperduperAIConfig {\r\n  url: string;\r\n  token: string;\r\n  wsURL: string; // Deprecated - kept for backward compatibility\r\n}\r\n\r\n// Cache for models with 1-hour expiration\r\nconst modelCache = new Map<\r\n  string,\r\n  { data: any[]; timestamp: number }\r\n>();\r\nconst CACHE_DURATION = 60 * 60 * 1000; // 1 hour\r\n\r\n/**\r\n * Validate Bearer token format\r\n * Ensures token is properly formatted for API authentication\r\n */\r\nexport function validateBearerToken(token: string): boolean {\r\n  // Remove 'Bearer ' prefix if present\r\n  const cleanToken = token.replace(/^Bearer\\s+/i, \"\");\r\n\r\n  // Basic validation: alphanumeric characters, minimum length\r\n  const tokenRegex = /^[a-zA-Z0-9_-]{32,}$/;\r\n\r\n  if (!tokenRegex.test(cleanToken)) {\r\n    console.warn(\"Token validation failed: Invalid format\");\r\n    return false;\r\n  }\r\n\r\n  // Additional checks can be added here (expiration, JWT validation, etc.)\r\n  return true;\r\n}\r\n\r\n/**\r\n * Get SuperDuperAI configuration\r\n */\r\nexport function getSuperduperAIConfig(): SuperduperAIConfig {\r\n  if (typeof window === \"undefined\") {\r\n    // Server-side: Real external API\r\n    const url = \"https://dev-editor.superduperai.co\";\r\n    const token = \"\"; // Will be set by environment\r\n    const wsURL = url.replace(\"https://\", \"wss://\").replace(\"http://\", \"ws://\");\r\n\r\n    if (!token) {\r\n      throw new Error(\"SUPERDUPERAI_TOKEN environment variable is required\");\r\n    }\r\n\r\n    // Token validation for Bearer token format\r\n    if (!validateBearerToken(token)) {\r\n      throw new Error(\r\n        \"SUPERDUPERAI_TOKEN must be a valid format. Expected: alphanumeric string, 32+ characters\"\r\n      );\r\n    }\r\n\r\n    return { url, token, wsURL };\r\n  }\r\n\r\n  // Client-side: Use current origin for proxy paths\r\n  const currentOrigin =\r\n    typeof window !== \"undefined\" ? window.location.origin : \"\";\r\n  return {\r\n    url: currentOrigin, // Use current origin for proxy paths\r\n    token: \"\", // Never expose tokens to client\r\n    wsURL: \"\", // Deprecated\r\n  };\r\n}\r\n\r\n/**\r\n * Client-side function to get config from API\r\n */\r\nexport async function getClientSuperduperAIConfig(): Promise<SuperduperAIConfig> {\r\n  try {\r\n    const response = await fetch(\"/api/config/superduperai\");\r\n    if (!response.ok) {\r\n      throw new Error(\"Failed to get SuperDuperAI config\");\r\n    }\r\n    const data = await response.json();\r\n\r\n    return {\r\n      url: data.url,\r\n      token: \"\", // Token is handled server-side\r\n      wsURL: data.wsURL,\r\n    };\r\n  } catch (error) {\r\n    console.error(\"Failed to get client config:\", error);\r\n    // Fallback to default\r\n    return getSuperduperAIConfig();\r\n  }\r\n}\r\n\r\n/**\r\n * Get cached models or fetch from API\r\n */\r\nexport async function getCachedModels<T>(\r\n  cacheKey: string,\r\n  fetchFunction: () => Promise<T[]>\r\n): Promise<T[]> {\r\n  const now = Date.now();\r\n  const cached = modelCache.get(cacheKey);\r\n\r\n  // Return cached data if still valid\r\n  if (cached && now - cached.timestamp < CACHE_DURATION) {\r\n    return cached.data as T[];\r\n  }\r\n\r\n  try {\r\n    // Fetch fresh data\r\n    const data = await fetchFunction();\r\n    \r\n    // Cache the new data\r\n    modelCache.set(cacheKey, { data, timestamp: now });\r\n    \r\n    return data;\r\n  } catch (error) {\r\n    console.error(`Failed to fetch ${cacheKey}:`, error);\r\n    \r\n    // Return cached data if available, even if expired\r\n    if (cached) {\r\n      return cached.data as T[];\r\n    }\r\n    \r\n    throw error;\r\n  }\r\n}\r\n\r\n/**\r\n * Clear model cache\r\n */\r\nexport function clearModelCache(): void {\r\n  modelCache.clear();\r\n}\r\n\r\n/**\r\n * Get cache statistics\r\n */\r\nexport function getCacheStats() {\r\n  const now = Date.now();\r\n  const stats = {\r\n    totalEntries: modelCache.size,\r\n    validEntries: 0,\r\n    expiredEntries: 0,\r\n    totalSize: 0\r\n  };\r\n\r\n  for (const [key, value] of modelCache.entries()) {\r\n    if (now - value.timestamp < CACHE_DURATION) {\r\n      stats.validEntries++;\r\n    } else {\r\n      stats.expiredEntries++;\r\n    }\r\n    stats.totalSize += JSON.stringify(value.data).length;\r\n  }\r\n\r\n  return stats;\r\n}\r\n","import type {\r\n  ImageGenerationParams,\r\n  ImageGenerationStrategy,\r\n} from \"../strategy.interface\";\r\n\r\n// Text-to-Image Strategy\r\nexport class TextToImageStrategy implements ImageGenerationStrategy {\r\n  readonly type = \"text-to-image\";\r\n  readonly requiresSourceImage = false;\r\n  readonly requiresPrompt = true;\r\n\r\n  validate(params: ImageGenerationParams): { valid: boolean; error?: string } {\r\n    if (!params.prompt?.trim()) {\r\n      return {\r\n        valid: false,\r\n        error: \"Prompt is required for text-to-image generation\",\r\n      };\r\n    }\r\n    return { valid: true };\r\n  }\r\n\r\n  async generatePayload(params: ImageGenerationParams): Promise<any> {\r\n    const modelName = params.model?.name || \"fal-ai/flux-dev\";\r\n    const isGPTImage = String(modelName).includes(\"gpt-image-1\");\r\n\r\n    if (isGPTImage) {\r\n      // OpenAI GPT-Image-1: минимальный набор полей, без style_name/shot_size/batch_size\r\n      return {\r\n        config: {\r\n          prompt: params.prompt,\r\n          negative_prompt: params.negativePrompt || \"\",\r\n          width: params.resolution?.width || 1024,\r\n          height: params.resolution?.height || 1024,\r\n          seed: params.seed || Math.floor(Math.random() * 1000000000000),\r\n          generation_config_name: modelName,\r\n        },\r\n      };\r\n    }\r\n\r\n    return {\r\n      config: {\r\n        prompt: params.prompt,\r\n        negative_prompt: params.negativePrompt || \"\",\r\n        width: params.resolution?.width || 512,\r\n        height: params.resolution?.height || 512,\r\n        steps: 30,\r\n        shot_size: params.shotSize?.id || null,\r\n        seed: params.seed || Math.floor(Math.random() * 1000000000000),\r\n        generation_config_name: modelName,\r\n        // batch_size removed: only single image generation is supported\r\n        style_name: params.style?.id || null,\r\n        references: [],\r\n        entity_ids: [],\r\n      },\r\n    };\r\n  }\r\n}\r\n","import type {\r\n  ImageToImageParams,\r\n  ImageGenerationStrategy,\r\n} from \"../strategy.interface\";\r\n\r\nexport class ImageToImageStrategy implements ImageGenerationStrategy {\r\n  readonly type = \"image-to-image\";\r\n  readonly requiresSourceImage = true;\r\n  readonly requiresPrompt = true;\r\n\r\n  validate(params: ImageToImageParams): { valid: boolean; error?: string } {\r\n    if (!params.file && !params.sourceImageId && !params.sourceImageUrl) {\r\n      return {\r\n        valid: false,\r\n        error: \"Source image is required for image-to-image generation\",\r\n      };\r\n    }\r\n    if (!params.prompt?.trim()) {\r\n      return {\r\n        valid: false,\r\n        error: \"Prompt is required for image-to-image generation\",\r\n      };\r\n    }\r\n    return { valid: true };\r\n  }\r\n\r\n  async handleImageUpload(\r\n    params: ImageToImageParams,\r\n    config: { url: string; token: string }\r\n  ): Promise<{\r\n    imageId?: string;\r\n    imageUrl?: string;\r\n    method: \"upload\";\r\n    error?: string;\r\n  }> {\r\n    console.log(\"🔍 handleImageUpload called with:\", {\r\n      hasFile: !!params.file,\r\n      fileType: params.file?.type,\r\n      fileSize: params.file?.size,\r\n      uploadUrl: `${config.url}/api/v1/file/upload`,\r\n    });\r\n\r\n    if (!params.file) {\r\n      console.log(\"❌ No file provided for upload\");\r\n      return {\r\n        error: \"No file provided for upload\",\r\n        method: \"upload\",\r\n      };\r\n    }\r\n\r\n    try {\r\n      const formData = new FormData();\r\n      formData.append(\"payload\", params.file);\r\n      formData.append(\"type\", \"image\");\r\n\r\n      console.log(\r\n        \"📤 Sending upload request to:\",\r\n        `${config.url}/api/v1/file/upload`\r\n      );\r\n\r\n      const uploadResponse = await fetch(`${config.url}/api/v1/file/upload`, {\r\n        method: \"POST\",\r\n        headers: {\r\n          Authorization: `Bearer ${config.token}`,\r\n          \"User-Agent\": \"SuperDuperAI-Landing/1.0\",\r\n        },\r\n        body: formData,\r\n      });\r\n\r\n      if (!uploadResponse.ok) {\r\n        const errorText = await uploadResponse.text();\r\n        throw new Error(\r\n          `File upload failed: ${uploadResponse.status} - ${errorText}`\r\n        );\r\n      }\r\n\r\n      const uploadResult = await uploadResponse.json();\r\n      console.log(\"uploadResult\", uploadResult);\r\n\r\n      return {\r\n        imageId: uploadResult?.id,\r\n        imageUrl: uploadResult?.url || undefined,\r\n        method: \"upload\",\r\n      };\r\n    } catch (error) {\r\n      console.error(\"Error uploading file\", error);\r\n      return {\r\n        error: \"Image upload failed\",\r\n        method: \"upload\",\r\n      };\r\n    }\r\n  }\r\n\r\n  async generatePayload(\r\n    params: ImageToImageParams,\r\n    config?: { url: string; token: string }\r\n  ): Promise<any> {\r\n    const modelName = params.model?.name || \"fal-ai/flux-dev\";\r\n    const isGPTImage = String(modelName).includes(\"gpt-image-1\");\r\n\r\n    const imageId: string | undefined = (params as any).sourceImageId;\r\n    const sourceUrl: string | undefined = (params as any).sourceImageUrl;\r\n\r\n    // Если передан файл, сначала загружаем его и используем reference_id\r\n    // Примечание: загрузку выполним в generate() уровне выше, где доступен config.\r\n    if (isGPTImage) {\r\n      return {\r\n        config: {\r\n          prompt: params.prompt,\r\n          negative_prompt: params.negativePrompt || \"\",\r\n          width: params.resolution?.width || 1920,\r\n          height: params.resolution?.height || 1088,\r\n          seed: params.seed || Math.floor(Math.random() * 1000000000000),\r\n          generation_config_name: modelName,\r\n          references: imageId\r\n            ? [\r\n                {\r\n                  type: \"source\",\r\n                  reference_id: imageId,\r\n                  ...(sourceUrl ? { reference_url: sourceUrl } : {}),\r\n                },\r\n              ]\r\n            : [],\r\n          entity_ids: [],\r\n        },\r\n        ...(imageId ? { file_ids: [imageId] } : {}),\r\n      };\r\n    }\r\n\r\n    const requestedSteps = (params as any)?.steps;\r\n\r\n    const payload = {\r\n      config: {\r\n        prompt: params.prompt,\r\n        negative_prompt: params.negativePrompt || \"\",\r\n        width: params.resolution?.width || 1920,\r\n        height: params.resolution?.height || 1088,\r\n        steps: typeof requestedSteps === \"number\" ? requestedSteps : 20,\r\n        shot_size: null,\r\n        seed: params.seed || Math.floor(Math.random() * 1000000000000),\r\n        generation_config_name: modelName,\r\n        style_name: null,\r\n        references: imageId\r\n          ? [\r\n              {\r\n                type: \"source\",\r\n                reference_id: imageId,\r\n                ...(sourceUrl ? { reference_url: sourceUrl } : {}),\r\n              },\r\n            ]\r\n          : [],\r\n        entity_ids: [],\r\n      },\r\n      ...(imageId ? { file_ids: [imageId] } : {}),\r\n    };\r\n\r\n    console.log(\"🔍 ImageToImageStrategy: generated payload:\", {\r\n      modelName,\r\n      imageId,\r\n      sourceUrl,\r\n      resolution: params.resolution,\r\n      payload,\r\n    });\r\n\r\n    return payload;\r\n  }\r\n}\r\n","import { TextToImageStrategy } from \"./strategies/text-to-image\";\r\nimport { ImageToImageStrategy } from \"./strategies/image-to-image\";\r\nimport type { ImageGenerationStrategy } from \"./strategy.interface\";\r\n\r\n// Strategy Factory\r\nexport class ImageGenerationStrategyFactory {\r\n    private strategies = new Map<string, ImageGenerationStrategy>();\r\n  \r\n    constructor() {\r\n      this.registerStrategy(new TextToImageStrategy());\r\n      this.registerStrategy(new ImageToImageStrategy());\r\n    }\r\n  \r\n    registerStrategy(strategy: ImageGenerationStrategy): void {\r\n      this.strategies.set(strategy.type, strategy);\r\n    }\r\n  \r\n    getStrategy(type: string): ImageGenerationStrategy | null {\r\n      return this.strategies.get(type) || null;\r\n    }\r\n  \r\n    getAllStrategies(): ImageGenerationStrategy[] {\r\n      return Array.from(this.strategies.values());\r\n    }\r\n  \r\n    getSupportedTypes(): string[] {\r\n      return Array.from(this.strategies.keys());\r\n    }\r\n  } ","import { ImageGenerationStrategyFactory } from \"./strategy.factory\";\r\nimport type {\r\n  ImageGenerationParams,\r\n  ImageToImageParams,\r\n  ImageGenerationResult,\r\n} from \"./strategy.interface\";\r\n\r\n// Main generation function using strategy pattern\r\nexport async function generateImageWithStrategy(\r\n  generationType: string,\r\n  params: ImageGenerationParams | ImageToImageParams,\r\n  config: { url: string; token: string }\r\n): Promise<ImageGenerationResult> {\r\n  console.log(\"🔧 configureImageGeneration called with:\", params);\r\n\r\n  const factory = new ImageGenerationStrategyFactory();\r\n  const strategy = factory.getStrategy(generationType);\r\n\r\n  if (!strategy) {\r\n    throw new Error(`Unsupported generation type: ${generationType}`);\r\n  }\r\n\r\n  let response: Response;\r\n  let result: any;\r\n\r\n  try {\r\n    const payload = await strategy.generatePayload(params, config);\r\n    // Use correct SuperDuperAI endpoint for image generation\r\n    const endpoint = \"/api/v1/file/generate-image\";\r\n    const url = `${config.url}${endpoint}`;\r\n\r\n    // All requests use JSON payload\r\n    response = await fetch(url, {\r\n      method: \"POST\",\r\n      headers: {\r\n        Authorization: `Bearer ${config.token}`,\r\n        \"Content-Type\": \"application/json\",\r\n      },\r\n      body: JSON.stringify(payload),\r\n    });\r\n\r\n    if (!response.ok) {\r\n      const errorText = await response.text();\r\n      return {\r\n        success: false,\r\n        error: `API Error: ${response.status} ${response.statusText} - ${errorText}`,\r\n      };\r\n    }\r\n\r\n    result = await response.json();\r\n    console.log(\"result\", result);\r\n    const fileId = result[0].id || result[0].file_id;\r\n    if (!fileId) {\r\n      return {\r\n        success: false,\r\n        error: \"No file ID returned from API\",\r\n      };\r\n    }\r\n\r\n    return {\r\n      success: true,\r\n      projectId: fileId,\r\n      requestId: fileId,\r\n      fileId,\r\n      message: `${strategy.type} generation started! FileId: ${fileId}`,\r\n      tasks: result.tasks || [],\r\n    };\r\n  } catch (error: any) {\r\n    let errorMessage =\r\n      error.message || `Unknown ${strategy.type} generation error`;\r\n    return {\r\n      success: false,\r\n      error: errorMessage,\r\n    };\r\n  }\r\n}\r\n","import type {\r\n  ImageToVideoParams,\r\n  VideoGenerationStrategy,\r\n} from \"../strategy.interface\";\r\n\r\n// Simple snake_case converter\r\nfunction snakeCase(str: string | undefined | null): string | undefined {\r\n  if (!str) return undefined;\r\n  return str.trim().replace(/\\s+/g, \"_\").toLowerCase();\r\n}\r\n\r\n// Helper function to extract string value from object or string\r\nfunction getStringValue(value: any): string | undefined {\r\n  if (!value) return undefined;\r\n  if (typeof value === \"string\") return value;\r\n  if (typeof value === \"object\" && value.id) return value.id;\r\n  if (typeof value === \"object\" && value.label) return value.label;\r\n  return undefined;\r\n}\r\n\r\n// Simple resolution parser\r\nfunction parseResolution(resolution: any): {\r\n  width: number;\r\n  height: number;\r\n  aspectRatio: string;\r\n} {\r\n  if (typeof resolution === \"string\") {\r\n    // Handle string format like \"1920x1080\" or \"16:9\"\r\n    if (resolution.includes(\"x\")) {\r\n      const [width, height] = resolution.split(\"x\").map(Number);\r\n      return { width, height, aspectRatio: `${width}:${height}` };\r\n    } else if (resolution.includes(\":\")) {\r\n      const [width, height] = resolution.split(\":\").map(Number);\r\n      return { width, height, aspectRatio: resolution };\r\n    }\r\n  }\r\n\r\n  // Handle object format\r\n  if (resolution && typeof resolution === \"object\") {\r\n    const width = resolution.width || 1280;\r\n    const height = resolution.height || 720;\r\n    const aspectRatio = resolution.aspectRatio || \"16:9\";\r\n    return { width, height, aspectRatio };\r\n  }\r\n\r\n  // Default values\r\n  return { width: 1280, height: 720, aspectRatio: \"16:9\" };\r\n}\r\n\r\nexport class ImageToVideoStrategy implements VideoGenerationStrategy {\r\n  readonly type = \"image-to-video\";\r\n  readonly requiresSourceImage = true;\r\n  readonly requiresPrompt = false; // Animation description is optional\r\n\r\n  validate(params: ImageToVideoParams): { valid: boolean; error?: string } {\r\n    if (!params.file) {\r\n      return {\r\n        valid: false,\r\n        error: \"Source image is required for image-to-video generation\",\r\n      };\r\n    }\r\n    return { valid: true };\r\n  }\r\n\r\n  /**\r\n   * Handle image upload to SuperDuperAI\r\n   */\r\n  async handleImageUpload(\r\n    params: ImageToVideoParams,\r\n    config: { url: string; token: string }\r\n  ): Promise<{\r\n    imageId?: string;\r\n    imageUrl?: string;\r\n    method: \"upload\";\r\n    error?: string;\r\n  }> {\r\n    console.log(\"🔍 handleImageUpload called with:\", {\r\n      hasFile: !!params.file,\r\n      fileType: params.file?.type,\r\n      fileSize: params.file?.size,\r\n      uploadUrl: `${config.url}/api/v1/file/upload`,\r\n    });\r\n\r\n    if (!params.file) {\r\n      console.log(\"❌ No file provided for upload\");\r\n      return {\r\n        error: \"No file provided for upload\",\r\n        method: \"upload\",\r\n      };\r\n    }\r\n\r\n    try {\r\n      const formData = new FormData();\r\n      formData.append(\"payload\", params.file);\r\n      formData.append(\"type\", \"image\");\r\n\r\n      console.log(\r\n        \"📤 Sending upload request to:\",\r\n        `${config.url}/api/v1/file/upload`\r\n      );\r\n\r\n      const uploadResponse = await fetch(`${config.url}/api/v1/file/upload`, {\r\n        method: \"POST\",\r\n        headers: {\r\n          Authorization: `Bearer ${config.token}`,\r\n          \"User-Agent\": \"SuperDuperAI-Landing/1.0\",\r\n        },\r\n        body: formData,\r\n      });\r\n\r\n      if (!uploadResponse.ok) {\r\n        const errorText = await uploadResponse.text();\r\n        throw new Error(\r\n          `File upload failed: ${uploadResponse.status} - ${errorText}`\r\n        );\r\n      }\r\n\r\n      const uploadResult = await uploadResponse.json();\r\n      console.log(\"uploadResult\", uploadResult);\r\n\r\n      return {\r\n        imageId: uploadResult?.id,\r\n        imageUrl: uploadResult?.url || undefined,\r\n        method: \"upload\",\r\n      };\r\n    } catch (error) {\r\n      console.error(\"Error uploading file\", error);\r\n      return {\r\n        error: \"Image upload failed\",\r\n        method: \"upload\",\r\n      };\r\n    }\r\n  }\r\n\r\n  async generatePayload(\r\n    params: ImageToVideoParams,\r\n    config?: { url: string; token: string }\r\n  ): Promise<any> {\r\n    let imageId: string | undefined;\r\n\r\n    console.log(\"🔍 ImageToVideoStrategy.generatePayload called with:\", {\r\n      hasConfig: !!config,\r\n      hasFile: !!params.file,\r\n      fileType: params.file?.type,\r\n      fileSize: params.file?.size,\r\n    });\r\n\r\n    if (config) {\r\n      console.log(\"📤 Starting image upload...\");\r\n      const uploadResult = await this.handleImageUpload(params, config);\r\n      console.log(\"📤 Image upload result:\", uploadResult);\r\n      imageId = uploadResult.imageId;\r\n    } else {\r\n      console.log(\"⚠️ No config provided, skipping image upload\");\r\n    }\r\n\r\n    const { width, height, aspectRatio } = parseResolution(params.resolution);\r\n\r\n    const modelName =\r\n      typeof params.model === \"string\"\r\n        ? params.model\r\n        : params.model?.name || \"azure-openai/sora\";\r\n\r\n    const payload: any = {\r\n      config: {\r\n        prompt: params.prompt || \"animate this image naturally\", // Default for image-to-video\r\n        generation_config_name: modelName,\r\n        duration: params.duration,\r\n        aspect_ratio: aspectRatio || \"16:9\",\r\n        seed: params.seed || Math.floor(Math.random() * 1000000000000),\r\n        negative_prompt: params.negativePrompt || \"\",\r\n        width: width,\r\n        height: height,\r\n        frame_rate: params.frameRate,\r\n        shot_size: snakeCase(getStringValue(params.shotSize)), // Extract string from object/string\r\n        style_name: snakeCase(getStringValue(params.style)), // Extract string from object/string\r\n        references: imageId\r\n          ? [\r\n              {\r\n                type: \"source\",\r\n                reference_id: imageId,\r\n              },\r\n            ]\r\n          : [],\r\n      },\r\n    };\r\n\r\n    console.log(\"📦 Final payload references:\", {\r\n      imageId,\r\n      references: payload.config.references,\r\n      referencesLength: payload.config.references.length,\r\n    });\r\n\r\n    return payload;\r\n  }\r\n}\r\n","import type {\r\n  VideoGenerationParams,\r\n  VideoGenerationStrategy,\r\n} from \"../strategy.interface\";\r\n\r\n// Simple snake_case converter\r\nfunction snakeCase(str: string | undefined | null): string | undefined {\r\n  if (!str) return undefined;\r\n  // Handles \"Long Shot\" -> \"long_shot\"\r\n  return str.trim().replace(/\\s+/g, \"_\").toLowerCase();\r\n}\r\n\r\n// Helper function to extract string value from object or string\r\nfunction getStringValue(value: any): string | undefined {\r\n  if (!value) return undefined;\r\n  if (typeof value === \"string\") return value;\r\n  if (typeof value === \"object\" && value.id) return value.id;\r\n  if (typeof value === \"object\" && value.label) return value.label;\r\n  return undefined;\r\n}\r\n\r\n// Simple resolution parser\r\nfunction parseResolution(resolution: any): {\r\n  width: number;\r\n  height: number;\r\n  aspectRatio: string;\r\n} {\r\n  if (typeof resolution === \"string\") {\r\n    // Handle string format like \"1920x1080\" or \"16:9\"\r\n    if (resolution.includes(\"x\")) {\r\n      const [width, height] = resolution.split(\"x\").map(Number);\r\n      return { width, height, aspectRatio: `${width}:${height}` };\r\n    } else if (resolution.includes(\":\")) {\r\n      const [width, height] = resolution.split(\":\").map(Number);\r\n      return { width, height, aspectRatio: resolution };\r\n    }\r\n  }\r\n\r\n  // Handle object format\r\n  if (resolution && typeof resolution === \"object\") {\r\n    const width = resolution.width || 1280;\r\n    const height = resolution.height || 720;\r\n    const aspectRatio = resolution.aspectRatio || \"16:9\";\r\n    return { width, height, aspectRatio };\r\n  }\r\n\r\n  // Default values\r\n  return { width: 1280, height: 720, aspectRatio: \"16:9\" };\r\n}\r\n\r\n// Text-to-Video Strategy\r\nexport class TextToVideoStrategy implements VideoGenerationStrategy {\r\n  readonly type = \"text-to-video\";\r\n  readonly requiresSourceImage = false;\r\n  readonly requiresPrompt = true;\r\n\r\n  validate(params: VideoGenerationParams): { valid: boolean; error?: string } {\r\n    if (!params.prompt?.trim()) {\r\n      return {\r\n        valid: false,\r\n        error: \"Prompt is required for text-to-video generation\",\r\n      };\r\n    }\r\n    return { valid: true };\r\n  }\r\n\r\n  generatePayload(\r\n    params: VideoGenerationParams,\r\n    config?: { url: string; token: string }\r\n  ): any {\r\n    const { width, height, aspectRatio } = parseResolution(params.resolution);\r\n\r\n    const modelName =\r\n      typeof params.model === \"string\"\r\n        ? params.model\r\n        : params.model?.name || \"azure-openai/sora\";\r\n\r\n    const payload = {\r\n      config: {\r\n        prompt: params.prompt,\r\n        generation_config_name: modelName,\r\n        duration: params.duration,\r\n        aspect_ratio: aspectRatio || \"16:9\",\r\n        seed: params.seed || Math.floor(Math.random() * 1000000000000),\r\n        negative_prompt: params.negativePrompt || \"\",\r\n        width: width,\r\n        height: height,\r\n        frame_rate: params.frameRate,\r\n        shot_size: snakeCase(getStringValue(params.shotSize)), // Extract string from object/string\r\n        style_name: snakeCase(getStringValue(params.style)), // Extract string from object/string\r\n      },\r\n    };\r\n\r\n    return payload;\r\n  }\r\n}\r\n","import { ImageToVideoStrategy } from \"./strategies/image-to-video\";\r\nimport { TextToVideoStrategy } from \"./strategies/text-to-video\";\r\nimport type { VideoGenerationStrategy } from \"./strategy.interface\";\r\n\r\n// Strategy Factory\r\nexport class VideoGenerationStrategyFactory {\r\n    private strategies = new Map<string, VideoGenerationStrategy>();\r\n  \r\n    constructor() {\r\n      this.registerStrategy(new TextToVideoStrategy());\r\n      this.registerStrategy(new ImageToVideoStrategy());\r\n    }\r\n  \r\n    registerStrategy(strategy: VideoGenerationStrategy): void {\r\n      this.strategies.set(strategy.type, strategy);\r\n    }\r\n  \r\n    getStrategy(type: string): VideoGenerationStrategy | null {\r\n      return this.strategies.get(type) || null;\r\n    }\r\n  \r\n    getAllStrategies(): VideoGenerationStrategy[] {\r\n      return Array.from(this.strategies.values());\r\n    }\r\n  \r\n    getSupportedTypes(): string[] {\r\n      return Array.from(this.strategies.keys());\r\n    }\r\n  } ","import { VideoGenerationStrategyFactory } from \"./strategy.factory\";\r\nimport type {\r\n  ImageToVideoParams,\r\n  VideoGenerationParams,\r\n  VideoGenerationResult,\r\n} from \"./strategy.interface\";\r\n\r\n// Main generation function using strategy pattern\r\nexport async function generateVideoWithStrategy(\r\n  generationType: string,\r\n  params: VideoGenerationParams | ImageToVideoParams,\r\n  config: { url: string; token: string }\r\n): Promise<VideoGenerationResult> {\r\n  const factory = new VideoGenerationStrategyFactory();\r\n  const strategy = factory.getStrategy(generationType);\r\n\r\n  if (!strategy) {\r\n    return {\r\n      success: false,\r\n      error: `Unsupported generation type: ${generationType}. Supported types: ${factory.getSupportedTypes().join(\", \")}`,\r\n    };\r\n  }\r\n\r\n  // Validate parameters\r\n  const validation = strategy.validate(params);\r\n  if (!validation.valid) {\r\n    return {\r\n      success: false,\r\n      error: validation.error,\r\n    };\r\n  }\r\n\r\n  try {\r\n    const payload = await strategy.generatePayload(params, config);\r\n\r\n    // Use correct SuperDuperAI endpoint for video generation\r\n    const endpoint = \"/api/v1/file/generate-video\";\r\n    const url = `${config.url}${endpoint}`;\r\n\r\n    console.log(\r\n      \"🎬 Sending with JSON payload:\",\r\n      JSON.stringify(payload, null, 2)\r\n    );\r\n\r\n    const response = await fetch(url, {\r\n      method: \"POST\",\r\n      headers: {\r\n        Authorization: `Bearer ${config.token}`,\r\n        \"Content-Type\": \"application/json\",\r\n      },\r\n      body: JSON.stringify(payload),\r\n    });\r\n\r\n    if (!response.ok) {\r\n      const errorText = await response.text();\r\n      console.error(\r\n        `❌ ${strategy.type} API Error (${response.status}):`,\r\n        errorText\r\n      );\r\n\r\n      return {\r\n        success: false,\r\n        error: `API Error: ${response.status} ${response.statusText} - ${errorText}`,\r\n      };\r\n    }\r\n\r\n    const result = await response.json();\r\n    console.log(`📨 ${strategy.type} API Response:`, result);\r\n\r\n    // Extract fileId from response\r\n    const fileId =\r\n      result.id ||\r\n      result.data?.[0]?.value?.file_id ||\r\n      result.data?.[0]?.id ||\r\n      result.fileId;\r\n\r\n    if (!fileId) {\r\n      console.error(\"❌ No fileId found in response\");\r\n      return {\r\n        success: false,\r\n        error: \"No file ID returned from API\",\r\n      };\r\n    }\r\n\r\n    console.log(`🎬 ${strategy.type} generation started - FileId: ${fileId}`);\r\n\r\n    return {\r\n      success: true,\r\n      projectId: fileId,\r\n      requestId: fileId,\r\n      fileId,\r\n      message: `${strategy.type} generation started! FileId: ${fileId}`,\r\n    };\r\n  } catch (error: any) {\r\n    console.error(`❌ ${strategy.type} generation error:`, error);\r\n\r\n    let errorMessage =\r\n      error.message || `Unknown ${strategy.type} generation error`;\r\n\r\n    return {\r\n      success: false,\r\n      error: errorMessage,\r\n    };\r\n  }\r\n}\r\n","/**\r\n * Tool operation types and their costs\r\n */\r\nexport interface ToolOperation {\r\n  id: string;\r\n  name: string;\r\n  description: string;\r\n  baseCost: number; // Base cost in credits\r\n  costMultipliers?: {\r\n    [key: string]: number; // Additional cost factors (e.g., quality, duration)\r\n  };\r\n}\r\n\r\n/**\r\n * Pricing configuration for different tools\r\n */\r\nexport const TOOLS_PRICING = {\r\n  // Image Generation\r\n  \"image-generation\": {\r\n    \"text-to-image\": {\r\n      id: \"text-to-image\",\r\n      name: \"Text to Image\",\r\n      description: \"Generate image from text prompt\",\r\n      baseCost: 5, // 5 credits per image\r\n      costMultipliers: {\r\n        \"standard-quality\": 1.0, // Standard quality (default)\r\n        \"high-quality\": 1.5, // +50% for high quality\r\n        \"ultra-quality\": 2.0, // +100% for ultra quality\r\n      },\r\n    },\r\n    \"image-to-image\": {\r\n      id: \"image-to-image\",\r\n      name: \"Image to Image\",\r\n      description: \"Transform existing image\",\r\n      baseCost: 7, // 7 credits per transformation\r\n      costMultipliers: {\r\n        \"standard-quality\": 1.0,\r\n        \"high-quality\": 1.5,\r\n        \"ultra-quality\": 2.0,\r\n      },\r\n    },\r\n  },\r\n\r\n  // Video Generation\r\n  \"video-generation\": {\r\n    \"text-to-video\": {\r\n      id: \"text-to-video\",\r\n      name: \"Text to Video\",\r\n      description: \"Generate video from text prompt\",\r\n      baseCost: 7.5, // 7.5 credits for 5 seconds\r\n      costMultipliers: {\r\n        \"duration-5s\": 1.0, // 7.5 credits for 5 seconds\r\n        \"duration-10s\": 2.0, // 15 credits for 10 seconds\r\n        \"duration-15s\": 3.0, // 22.5 credits for 15 seconds\r\n        \"duration-30s\": 6.0, // 45 credits for 30 seconds\r\n        \"hd-quality\": 1.0, // HD is default, no extra cost\r\n        \"4k-quality\": 2.0, // +100% for 4K\r\n      },\r\n    },\r\n    \"image-to-video\": {\r\n      id: \"image-to-video\",\r\n      name: \"Image to Video\",\r\n      description: \"Convert image to video\",\r\n      baseCost: 11.25, // 11.25 credits for 5 seconds (50% more than text-to-video)\r\n      costMultipliers: {\r\n        \"duration-5s\": 1.0, // 11.25 credits for 5 seconds\r\n        \"duration-10s\": 2.0, // 22.5 credits for 10 seconds\r\n        \"duration-15s\": 3.0, // 33.75 credits for 15 seconds\r\n        \"duration-30s\": 6.0, // 67.5 credits for 30 seconds\r\n        \"hd-quality\": 1.0, // HD is default, no extra cost\r\n        \"4k-quality\": 2.0, // +100% for 4K\r\n      },\r\n    },\r\n  },\r\n\r\n  // Script Generation\r\n  \"script-generation\": {\r\n    \"basic-script\": {\r\n      id: \"basic-script\",\r\n      name: \"Script Generation\",\r\n      description: \"Generate script or text content\",\r\n      baseCost: 1, // 1 credit per script\r\n      costMultipliers: {\r\n        \"long-form\": 2.0, // +100% for long scripts (>1000 words)\r\n      },\r\n    },\r\n  },\r\n\r\n  // Prompt Enhancement\r\n  \"prompt-enhancement\": {\r\n    \"basic-enhancement\": {\r\n      id: \"basic-enhancement\",\r\n      name: \"Prompt Enhancement\",\r\n      description: \"Enhance and improve prompts\",\r\n      baseCost: 1, // 1 credit per enhancement\r\n    },\r\n    \"veo3-enhancement\": {\r\n      id: \"veo3-enhancement\",\r\n      name: \"VEO3 Prompt Enhancement\",\r\n      description: \"Advanced prompt enhancement for VEO3\",\r\n      baseCost: 2, // 2 credits per enhancement\r\n    },\r\n  },\r\n} as const;\r\n\r\n/**\r\n * Free balance allocations for different user types\r\n */\r\nexport const FREE_BALANCE_BY_USER_TYPE = {\r\n  guest: 50, // Guests get 50 credits\r\n  regular: 100, // Regular users get 100 credits\r\n  demo: 100, // Demo users get 100 credits\r\n} as const;\r\n\r\nexport type UserType = keyof typeof FREE_BALANCE_BY_USER_TYPE;\r\n\r\n/**\r\n * Calculate cost for a specific operation\r\n */\r\nexport function calculateOperationCost(\r\n  toolCategory: keyof typeof TOOLS_PRICING,\r\n  operationType: string,\r\n  multipliers: string[] = []\r\n): number {\r\n  const tool = TOOLS_PRICING[toolCategory];\r\n  if (!tool) throw new Error(`Unknown tool category: ${toolCategory}`);\r\n\r\n  const operation = tool[operationType as keyof typeof tool] as ToolOperation;\r\n  if (!operation)\r\n    throw new Error(`Unknown operation: ${operationType} in ${toolCategory}`);\r\n\r\n  let totalCost = operation.baseCost;\r\n\r\n  // Apply cost multipliers\r\n  if (operation.costMultipliers && multipliers.length > 0) {\r\n    let multiplier = 1;\r\n    for (const mult of multipliers) {\r\n      if (operation.costMultipliers[mult]) {\r\n        multiplier *= operation.costMultipliers[mult];\r\n      }\r\n    }\r\n    totalCost = Math.ceil(totalCost * multiplier);\r\n  }\r\n\r\n  return totalCost;\r\n}\r\n\r\n/**\r\n * Get all available operations for a tool category\r\n */\r\nexport function getToolOperations(\r\n  toolCategory: keyof typeof TOOLS_PRICING\r\n): ToolOperation[] {\r\n  const tool = TOOLS_PRICING[toolCategory];\r\n  if (!tool) return [];\r\n\r\n  return Object.values(tool) as ToolOperation[];\r\n}\r\n\r\n/**\r\n * Get human-readable pricing info for UI display\r\n */\r\nexport function getToolPricingDisplay(\r\n  toolCategory: keyof typeof TOOLS_PRICING,\r\n  operationType: string\r\n): {\r\n  baseCost: number;\r\n  description: string;\r\n  multipliers?: Record<string, string>;\r\n} {\r\n  const tool = TOOLS_PRICING[toolCategory];\r\n  if (!tool) throw new Error(`Unknown tool category: ${toolCategory}`);\r\n\r\n  const operation = tool[operationType as keyof typeof tool] as ToolOperation;\r\n  if (!operation) throw new Error(`Unknown operation: ${operationType}`);\r\n\r\n  const result = {\r\n    baseCost: operation.baseCost,\r\n    description: operation.description,\r\n  };\r\n\r\n  if (operation.costMultipliers) {\r\n    const multipliers: Record<string, string> = {};\r\n    for (const [key, value] of Object.entries(operation.costMultipliers)) {\r\n      const percentage = Math.round((value - 1) * 100);\r\n      multipliers[key] = percentage > 0 ? `+${percentage}%` : `${percentage}%`;\r\n    }\r\n    return { ...result, multipliers };\r\n  }\r\n\r\n  return result;\r\n}\r\n\r\n/**\r\n * Examples of common operations and their costs\r\n */\r\nexport const PRICING_EXAMPLES = {\r\n  \"Basic image generation\": calculateOperationCost(\r\n    \"image-generation\",\r\n    \"text-to-image\"\r\n  ),\r\n  \"High-quality image\": calculateOperationCost(\r\n    \"image-generation\",\r\n    \"text-to-image\",\r\n    [\"high-quality\"]\r\n  ),\r\n  \"Short video (5s)\": calculateOperationCost(\r\n    \"video-generation\",\r\n    \"text-to-video\",\r\n    [\"duration-5s\"]\r\n  ),\r\n  \"HD video (10s)\": calculateOperationCost(\r\n    \"video-generation\",\r\n    \"text-to-video\",\r\n    [\"duration-10s\", \"hd-quality\"]\r\n  ),\r\n  \"Script generation\": calculateOperationCost(\r\n    \"script-generation\",\r\n    \"basic-script\"\r\n  ),\r\n  \"Prompt enhancement\": calculateOperationCost(\r\n    \"prompt-enhancement\",\r\n    \"basic-enhancement\"\r\n  ),\r\n} as const;\r\n","import { calculateOperationCost, TOOLS_PRICING } from \"./tools-pricing\";\r\n\r\nexport interface BalanceTransaction {\r\n  userId: string;\r\n  operationType: string;\r\n  operationCategory: string;\r\n  amount: number;\r\n  balanceBefore: number;\r\n  balanceAfter: number;\r\n  timestamp: Date;\r\n  metadata?: Record<string, any>;\r\n}\r\n\r\nexport interface BalanceCheckResult {\r\n  hasEnoughBalance: boolean;\r\n  currentBalance: number;\r\n  requiredBalance: number;\r\n  shortfall?: number;\r\n}\r\n\r\n/**\r\n * Check if user has enough balance for an operation\r\n */\r\nexport function checkOperationBalance(\r\n  currentBalance: number,\r\n  toolCategory: keyof typeof TOOLS_PRICING,\r\n  operationType: string,\r\n  multipliers: string[] = []\r\n): BalanceCheckResult {\r\n  const requiredBalance = calculateOperationCost(\r\n    toolCategory,\r\n    operationType,\r\n    multipliers\r\n  );\r\n  const hasEnoughBalance = currentBalance >= requiredBalance;\r\n  const shortfall = hasEnoughBalance ? 0 : requiredBalance - currentBalance;\r\n\r\n  return {\r\n    hasEnoughBalance,\r\n    currentBalance,\r\n    requiredBalance,\r\n    shortfall,\r\n  };\r\n}\r\n\r\n/**\r\n * Calculate the cost for an operation without checking balance\r\n */\r\nexport function getOperationCost(\r\n  toolCategory: keyof typeof TOOLS_PRICING,\r\n  operationType: string,\r\n  multipliers: string[] = []\r\n): number {\r\n  return calculateOperationCost(toolCategory, operationType, multipliers);\r\n}\r\n\r\n/**\r\n * Create a balance transaction record\r\n */\r\nexport function createBalanceTransaction(\r\n  userId: string,\r\n  operationType: string,\r\n  operationCategory: string,\r\n  balanceBefore: number,\r\n  balanceAfter: number,\r\n  metadata?: Record<string, any>\r\n): BalanceTransaction {\r\n  return {\r\n    userId,\r\n    operationType,\r\n    operationCategory,\r\n    amount: balanceAfter - balanceBefore,\r\n    balanceBefore,\r\n    balanceAfter,\r\n    timestamp: new Date(),\r\n    metadata,\r\n  };\r\n}\r\n\r\n/**\r\n * Get pricing information for UI display\r\n */\r\nexport function getPricingInfo(\r\n  toolCategory: keyof typeof TOOLS_PRICING,\r\n  operationType: string\r\n) {\r\n  const tool = TOOLS_PRICING[toolCategory];\r\n  if (!tool) return null;\r\n\r\n  const operation = tool[operationType as keyof typeof tool] as any;\r\n  if (!operation) return null;\r\n\r\n  return {\r\n    baseCost: operation.baseCost,\r\n    name: operation.name,\r\n    description: operation.description,\r\n    multipliers: operation.costMultipliers,\r\n  };\r\n}\r\n\r\n\r\n","import axios, { AxiosInstance, AxiosRequestConfig } from 'axios';\r\nimport { API_ENDPOINTS } from '@turbo-super/core';\r\n\r\nexport class StripeClient {\r\n  private client: AxiosInstance;\r\n\r\n  constructor(config?: AxiosRequestConfig) {\r\n    this.client = axios.create({\r\n      baseURL: API_ENDPOINTS.STRIPE_BASE_URL,\r\n      timeout: 30000,\r\n      ...config,\r\n    });\r\n\r\n    // Add request interceptor for authentication\r\n    this.client.interceptors.request.use((config) => {\r\n      // Add Stripe auth headers if needed\r\n      return config;\r\n    });\r\n\r\n    // Add response interceptor for error handling\r\n    this.client.interceptors.response.use(\r\n      (response) => response,\r\n      (error) => {\r\n        // Handle Stripe-specific errors\r\n        return Promise.reject(error);\r\n      }\r\n    );\r\n  }\r\n\r\n  // Generic request method\r\n  async request<T>(config: AxiosRequestConfig): Promise<T> {\r\n    const response = await this.client.request<T>(config);\r\n    return response.data;\r\n  }\r\n\r\n  // Get the underlying axios instance\r\n  getAxiosInstance(): AxiosInstance {\r\n    return this.client;\r\n  }\r\n}\r\n\r\n// Export default instance\r\nexport const stripeClient = new StripeClient();\r\n","// Stripe API endpoint constants\r\nexport const STRIPE_ENDPOINTS = {\r\n  // Customers\r\n  CUSTOMERS: {\r\n    CREATE: \"/customers\",\r\n    GET: \"/customers/:id\",\r\n    UPDATE: \"/customers/:id\",\r\n    DELETE: \"/customers/:id\",\r\n  },\r\n\r\n  // Subscriptions\r\n  SUBSCRIPTIONS: {\r\n    CREATE: \"/subscriptions\",\r\n    GET: \"/subscriptions/:id\",\r\n    UPDATE: \"/subscriptions/:id\",\r\n    CANCEL: \"/subscriptions/:id/cancel\",\r\n  },\r\n\r\n  // Prices\r\n  PRICES: {\r\n    LIST: \"/prices\",\r\n    GET: \"/prices/:id\",\r\n  },\r\n\r\n  // Checkout\r\n  CHECKOUT: {\r\n    SESSIONS: \"/checkout/sessions\",\r\n    SESSION: \"/checkout/sessions/:id\",\r\n  },\r\n} as const;\r\n","import axios, { AxiosInstance, AxiosRequestConfig } from \"axios\";\r\nimport { API_ENDPOINTS } from \"@turbo-super/core\";\r\n\r\nexport class UploadClient {\r\n  private client: AxiosInstance;\r\n\r\n  constructor(config?: AxiosRequestConfig) {\r\n    this.client = axios.create({\r\n      baseURL: API_ENDPOINTS.UPLOAD_BASE_URL,\r\n      timeout: 60000, // Longer timeout for file uploads\r\n      ...config,\r\n    });\r\n\r\n    // Add request interceptor for authentication\r\n    this.client.interceptors.request.use((config) => {\r\n      // Add auth headers if needed\r\n      return config;\r\n    });\r\n\r\n    // Add response interceptor for error handling\r\n    this.client.interceptors.response.use(\r\n      (response) => response,\r\n      (error) => {\r\n        // Handle upload-specific errors\r\n        return Promise.reject(error);\r\n      }\r\n    );\r\n  }\r\n\r\n  // Generic request method\r\n  async request<T>(config: AxiosRequestConfig): Promise<T> {\r\n    const response = await this.client.request<T>(config);\r\n    return response.data;\r\n  }\r\n\r\n  // Get the underlying axios instance\r\n  getAxiosInstance(): AxiosInstance {\r\n    return this.client;\r\n  }\r\n}\r\n\r\n// Export default instance\r\nexport const uploadClient = new UploadClient();\r\n","import { API_ENDPOINTS } from \"@turbo-super/core\";\r\n\r\nexport class WebSocketClient {\r\n  private socket: WebSocket | null = null;\r\n  private reconnectAttempts = 0;\r\n  private maxReconnectAttempts = 5;\r\n  private reconnectDelay = 1000;\r\n\r\n  constructor(\r\n    private url: string = API_ENDPOINTS.WEBSOCKET_BASE_URL,\r\n    private options: {\r\n      onMessage?: (data: any) => void;\r\n      onOpen?: () => void;\r\n      onClose?: () => void;\r\n      onError?: (error: Event) => void;\r\n    } = {}\r\n  ) {}\r\n\r\n  connect(): Promise<void> {\r\n    return new Promise((resolve, reject) => {\r\n      try {\r\n        this.socket = new WebSocket(this.url);\r\n\r\n        this.socket.onopen = () => {\r\n          this.reconnectAttempts = 0;\r\n          this.options.onOpen?.();\r\n          resolve();\r\n        };\r\n\r\n        this.socket.onmessage = (event) => {\r\n          try {\r\n            const data = JSON.parse(event.data);\r\n            this.options.onMessage?.(data);\r\n          } catch (error) {\r\n            console.error(\"Failed to parse WebSocket message:\", error);\r\n          }\r\n        };\r\n\r\n        this.socket.onclose = () => {\r\n          this.options.onClose?.();\r\n          this.attemptReconnect();\r\n        };\r\n\r\n        this.socket.onerror = (error) => {\r\n          this.options.onError?.(error);\r\n          reject(error);\r\n        };\r\n      } catch (error) {\r\n        reject(error);\r\n      }\r\n    });\r\n  }\r\n\r\n  private attemptReconnect(): void {\r\n    if (this.reconnectAttempts < this.maxReconnectAttempts) {\r\n      this.reconnectAttempts++;\r\n      setTimeout(() => {\r\n        this.connect().catch(console.error);\r\n      }, this.reconnectDelay * this.reconnectAttempts);\r\n    }\r\n  }\r\n\r\n  send(data: any): void {\r\n    if (this.socket?.readyState === WebSocket.OPEN) {\r\n      this.socket.send(JSON.stringify(data));\r\n    }\r\n  }\r\n\r\n  disconnect(): void {\r\n    if (this.socket) {\r\n      this.socket.close();\r\n      this.socket = null;\r\n    }\r\n  }\r\n\r\n  isConnected(): boolean {\r\n    return this.socket?.readyState === WebSocket.OPEN;\r\n  }\r\n}\r\n\r\n// Export default instance\r\nexport const webSocketClient = new WebSocketClient();\r\n"]}