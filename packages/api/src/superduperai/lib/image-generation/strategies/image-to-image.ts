import { FileTypeEnum } from "../../../api";
import type {
  ImageToImageParams,
  ImageGenerationStrategy,
} from "../strategy.interface";

export class ImageToImageStrategy implements ImageGenerationStrategy {
  readonly type = "image-to-image";
  readonly requiresSourceImage = true;
  readonly requiresPrompt = true;

  validate(params: ImageToImageParams): { valid: boolean; error?: string } {
    if (!params.file && !params.sourceImageId && !params.sourceImageUrl) {
      return {
        valid: false,
        error: "Source image is required for image-to-image generation",
      };
    }
    if (!params.prompt?.trim()) {
      return {
        valid: false,
        error: "Prompt is required for image-to-image generation",
      };
    }
    return { valid: true };
  }

  async handleImageUpload(
    params: ImageToImageParams,
    config: { url: string; token: string }
  ): Promise<{
    imageId?: string;
    imageUrl?: string;
    method: "upload";
    error?: string;
  }> {
    if (!params.file) {
      return {
        error: "No file provided for upload",
        method: "upload",
      };
    }

    try {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å —Ñ–∞–π–ª–∞
      if (params.file.size === 0) {
        throw new Error("File is empty");
      }

      if (params.file.size > 50 * 1024 * 1024) {
        throw new Error("File is too large (max 50MB)");
      }

      console.log("üì§ Starting image upload using direct fetch...");

      // –°–æ–∑–¥–∞–µ–º FormData –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ (—Ç–æ–ª—å–∫–æ payload, type –ø–µ—Ä–µ–¥–∞–µ—Ç—Å—è –∫–∞–∫ query –ø–∞—Ä–∞–º–µ—Ç—Ä)
      const formData = new FormData();
      formData.append("payload", params.file);

      // –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
      console.log("üì§ FormData entries:");
      for (const [key, value] of formData.entries()) {
        if (value instanceof File) {
          console.log(
            `  ${key}: File(${value.name}, ${value.size} bytes, ${value.type})`
          );
        } else {
          console.log(`  ${key}: ${value}`);
        }
      }

      // –°—Ç—Ä–æ–∏–º URL —Å query –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
      const queryParams = new URLSearchParams();
      queryParams.set("type", FileTypeEnum.IMAGE);
      if (params.projectId) queryParams.set("project_id", params.projectId);
      if (params.sceneId) queryParams.set("scene_id", params.sceneId);

      const apiUrl = `${config.url.replace(/\/+$/, "")}/api/v1/file/upload?${queryParams.toString()}`;

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ SuperDuperAI API
      const uploadResponse = await fetch(apiUrl, {
        method: "POST",
        headers: {
          Authorization: `Bearer ${config.token}`,
        },
        body: formData,
      });

      if (!uploadResponse.ok) {
        const errorText = await uploadResponse.text();
        throw new Error(
          `File upload failed: ${uploadResponse.status} - ${errorText}`
        );
      }

      const uploadResult = await uploadResponse.json();
      console.log("üì§ Image upload result:", uploadResult);

      return {
        imageId: uploadResult?.id,
        imageUrl: uploadResult?.url || undefined,
        method: "upload",
      };
    } catch (error) {
      console.error("Error uploading file", error);
      return {
        error: `Image upload failed: ${error instanceof Error ? error.message : "Unknown error"}`,
        method: "upload",
      };
    }
  }

  async handleMaskUpload(
    params: ImageToImageParams,
    config?: { url: string; token: string }
  ): Promise<{
    maskId?: string;
    maskUrl?: string;
    error?: string;
  }> {
    if (!params.mask) {
      return {
        error: "No mask provided for upload",
      };
    }

    if (!config) {
      return {
        error: "Config not provided for mask upload",
      };
    }

    try {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å –º–∞—Å–∫–∏
      if (params.mask.size === 0) {
        throw new Error("Mask file is empty");
      }

      if (params.mask.size > 50 * 1024 * 1024) {
        throw new Error("Mask file is too large (max 50MB)");
      }

      console.log("üì§ Starting mask upload using direct fetch...");

      // –°–æ–∑–¥–∞–µ–º FormData –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –º–∞—Å–∫–∏ (—Ç–æ–ª—å–∫–æ payload, type –ø–µ—Ä–µ–¥–∞–µ—Ç—Å—è –∫–∞–∫ query –ø–∞—Ä–∞–º–µ—Ç—Ä)
      const formData = new FormData();
      formData.append("payload", params.mask);

      // –°—Ç—Ä–æ–∏–º URL —Å query –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
      const queryParams = new URLSearchParams();
      queryParams.set("type", FileTypeEnum.IMAGE);
      if (params.projectId) queryParams.set("project_id", params.projectId);
      if (params.sceneId) queryParams.set("scene_id", params.sceneId);

      const apiUrl = `${config.url.replace(/\/+$/, "")}/api/v1/file/upload?${queryParams.toString()}`;

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ SuperDuperAI API
      const uploadResponse = await fetch(apiUrl, {
        method: "POST",
        headers: {
          Authorization: `Bearer ${config.token}`,
        },
        body: formData,
      });

      if (!uploadResponse.ok) {
        const errorText = await uploadResponse.text();
        throw new Error(
          `Mask upload failed: ${uploadResponse.status} - ${errorText}`
        );
      }

      const uploadResult = await uploadResponse.json();
      console.log("üì§ Mask upload result:", uploadResult);

      return {
        maskId: uploadResult?.id,
        maskUrl: uploadResult?.url || undefined,
      };
    } catch (error) {
      console.error("Error uploading mask", error);
      return {
        error: `Mask upload failed: ${error instanceof Error ? error.message : "Unknown error"}`,
      };
    }
  }

  async generatePayload(
    params: ImageToImageParams,
    config?: { url: string; token: string }
  ): Promise<any> {
    const modelName = params.model?.name || "fal-ai/flux-dev";
    const isGPTImage = String(modelName).includes("gpt-image-1");

    let imageId: string | undefined;
    let imageUrl: string | undefined;
    let maskId: string | undefined;
    let maskUrl: string | undefined;

    if (params.sourceImageId) {
      imageId = params.sourceImageId;
      imageUrl = params.sourceImageUrl;
      console.log("üîç ImageToImageStrategy: using sourceImageId:", imageId);
      console.log("üîç ImageToImageStrategy: using sourceImageUrl:", imageUrl);
    } else if (config && params.file) {
      console.log("üì§ Starting image upload...");
      const uploadResult = await this.handleImageUpload(params, config);
      console.log("üì§ Image upload result:", uploadResult);

      // AICODE-NOTE: –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—à–∏–±–∫—É –∑–∞–≥—Ä—É–∑–∫–∏ –∏ –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é
      if (uploadResult.error) {
        console.error("‚ùå Image upload failed:", uploadResult.error);
        throw new Error(`Image upload failed: ${uploadResult.error}`);
      }

      if (!uploadResult.imageId) {
        console.error("‚ùå No image ID returned from upload");
        throw new Error("Image upload failed: No image ID returned");
      }

      imageId = uploadResult.imageId;
      imageUrl = uploadResult.imageUrl;
    } else {
      console.log("‚ö†Ô∏è No config provided, skipping image upload");
    }

    if (params.mask) {
      console.log("üîç ImageToImageStrategy: using mask");
      const uploadResult = await this.handleMaskUpload(params, config);

      // AICODE-NOTE: –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—à–∏–±–∫—É –∑–∞–≥—Ä—É–∑–∫–∏ –º–∞—Å–∫–∏ –∏ –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é
      if (uploadResult.error) {
        console.error("‚ùå Mask upload failed:", uploadResult.error);
        throw new Error(`Mask upload failed: ${uploadResult.error}`);
      }

      if (!uploadResult.maskId) {
        console.error("‚ùå No mask ID returned from upload");
        throw new Error("Mask upload failed: No mask ID returned");
      }

      maskId = uploadResult.maskId;
      maskUrl = uploadResult.maskUrl;
    }

    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è URL –¥–ª—è JSON
    const sanitizeUrl = (url: string | undefined): string | undefined => {
      if (!url) return undefined;
      const originalUrl = url;
      // –ó–∞–º–µ–Ω—è–µ–º –æ–±—Ä–∞—Ç–Ω—ã–µ —Å–ª–µ—à–∏ –Ω–∞ –ø—Ä—è–º—ã–µ –∏ —É–±–∏—Ä–∞–µ–º –¥—Ä—É–≥–∏–µ –ø—Ä–æ–±–ª–µ–º–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã
      const sanitized = url.replace(/\\/g, "/").replace(/[\x00-\x1F\x7F]/g, "");
      if (originalUrl !== sanitized) {
        console.log("üîß URL sanitized:", { original: originalUrl, sanitized });
      }
      return sanitized;
    };

    let references = [];
    if (imageId) {
      const sanitizedImageUrl = sanitizeUrl(imageUrl);
      references.push({
        type: "source",
        reference_id: imageId,
        reference_url: sanitizedImageUrl,
      });
      console.log("üîç Added source reference:", {
        imageId,
        imageUrl: sanitizedImageUrl,
      });
    }
    if (maskId) {
      const sanitizedMaskUrl = sanitizeUrl(maskUrl);
      references.push({
        type: "mask",
        reference_id: maskId,
        reference_url: sanitizedMaskUrl,
      });
      console.log("üîç Added mask reference:", {
        maskId,
        maskUrl: sanitizedMaskUrl,
      });
    }

    // –°–∞–Ω–∏—Ç–∏–∑–∏—Ä—É–µ–º –≤—Å–µ URL –≤ references –ø–µ—Ä–µ–¥ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –≤ payload
    const sanitizedReferences = references.map((ref) => ({
      ...ref,
      reference_url: sanitizeUrl(ref.reference_url),
    }));

    console.log("üîç Final references array:", sanitizedReferences);

    // –ï—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω —Ñ–∞–π–ª, —Å–Ω–∞—á–∞–ª–∞ –∑–∞–≥—Ä—É–∂–∞–µ–º –µ–≥–æ –∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º reference_id
    // –ü—Ä–∏–º–µ—á–∞–Ω–∏–µ: –∑–∞–≥—Ä—É–∑–∫—É –≤—ã–ø–æ–ª–Ω–∏–º –≤ generate() —É—Ä–æ–≤–Ω–µ –≤—ã—à–µ, –≥–¥–µ –¥–æ—Å—Ç—É–ø–µ–Ω config.
    if (isGPTImage) {
      return {
        project_id: params?.projectId,
        scene_id: params?.sceneId,
        config: {
          prompt: params.prompt,
          negative_prompt: params.negativePrompt || "",
          width: params.resolution?.width || 1920,
          height: params.resolution?.height || 1088,
          seed: params.seed || Math.floor(Math.random() * 1000000000000),
          generation_config_name: modelName,
          references: sanitizedReferences,
          entity_ids: [],
        },
        ...(imageId ? { file_ids: [imageId] } : {}),
      };
    }

    const requestedSteps = (params as any)?.steps;

    const payload = {
      project_id: params?.projectId,
      scene_id: params?.sceneId,
      config: {
        prompt: params.prompt,
        negative_prompt: params.negativePrompt || "",
        width: params.resolution?.width || 1920,
        height: params.resolution?.height || 1088,
        steps: typeof requestedSteps === "number" ? requestedSteps : 20,
        shot_size: null,
        seed: params.seed || Math.floor(Math.random() * 1000000000000),
        generation_config_name: modelName,
        style_name: null,
        references: sanitizedReferences,
        entity_ids: [],
      },
      ...(imageId ? { file_ids: [imageId] } : {}),
    };

    console.log(
      "üîç ImageToImageStrategy: generated payload:",
      {
        modelName,
        imageId,
        resolution: params.resolution,
        payload,
      },
      references
    );

    return payload;
  }
}
