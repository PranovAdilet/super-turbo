#!/usr/bin/env node

const fs = require('fs');
const path = require('path');

// –ü—É—Ç—å –∫ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º—É —Å–ª–æ–≤–∞—Ä—é
const enDictionaryPath = path.join(__dirname, '../src/translation/dictionaries/super-landing/en.ts');
const typesOutputPath = path.join(__dirname, '../src/translation/types.ts');

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –∫–ª—é—á–µ–π –∏–∑ –æ–±—ä–µ–∫—Ç–∞
function extractKeys(obj, prefix = '') {
  const keys = [];
  
  for (const [key, value] of Object.entries(obj)) {
    const fullKey = prefix ? `${prefix}.${key}` : key;
    
    if (typeof value === 'string') {
      keys.push(`"${fullKey}"`);
    } else if (Array.isArray(value)) {
      // –î–ª—è –º–∞—Å—Å–∏–≤–æ–≤ –¥–æ–±–∞–≤–ª—è–µ–º –∫–ª—é—á –∫–∞–∫ –µ—Å—Ç—å
      keys.push(`"${fullKey}"`);
    } else if (value && typeof value === 'object') {
      // –†–µ–∫—É—Ä—Å–∏–≤–Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤–ª–æ–∂–µ–Ω–Ω—ã–µ –æ–±—ä–µ–∫—Ç—ã
      keys.push(...extractKeys(value, fullKey));
    }
  }
  
  return keys;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —á—Ç–µ–Ω–∏—è –∏ –ø–∞—Ä—Å–∏–Ω–≥–∞ —Å–ª–æ–≤–∞—Ä—è
function parseDictionary(filePath) {
  const content = fs.readFileSync(filePath, 'utf-8');
  
  // –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π JavaScript —Ñ–∞–π–ª
  const jsContent = content
    .replace(/import type { NestedDictionary } from "\.\.\/\.\.\/types";/, 'const NestedDictionary = {};')
    .replace(/export const en: NestedDictionary = /, 'const en = ')
    .replace(/export const en = /, 'const en = ')
    .replace(/} as const;/, '}; module.exports = en;')
    .replace(/;$/, '; module.exports = en;');
  
  // –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
  const tempJsPath = path.join(__dirname, 'temp-dict.js');
  fs.writeFileSync(tempJsPath, jsContent);
  
  try {
    // –í—ã–ø–æ–ª–Ω—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
    const dictionary = require(tempJsPath);
    
    // –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
    fs.unlinkSync(tempJsPath);
    
    return dictionary;
  } catch (error) {
    // –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
    if (fs.existsSync(tempJsPath)) {
      fs.unlinkSync(tempJsPath);
    }
    throw new Error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ —Å–ª–æ–≤–∞—Ä—è: ${error.message}`);
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–∏–ø–æ–≤
function generateTypes(dictionary) {
  const keys = extractKeys(dictionary);
  
  return `// Auto-generated translation types
// Generated from: packages/shared/src/translation/dictionaries/super-landing/en.ts
// Run: npm run generate-types

// Translation system types
export type Locale = "en" | "ru" | "tr" | "es" | "hi";

export interface LocaleConfig {
  defaultLocale: Locale;
  locales: Locale[];
  localeDetection: boolean;
  domains?: Record<string, Locale>;
  cookieName: string;
  cookieMaxAge: number;
  preserveRouteOnHome: boolean;
}

export interface LocaleMap {
  en: string;
  ru: string;
  tr: string;
  es: string;
  hi: string;
}

export interface Dictionary {
  [key: string]: string | Dictionary;
}

export interface TranslationConfig {
  i18n: LocaleConfig;
  localeMap: LocaleMap;
}

export type NestedDictionary = {
  [key: string]: string | NestedDictionary | (string | NestedDictionary)[];
};

// Auto-generated translation key type
export type SuperLandingTranslationKey = ${keys.join(' | ')};
`;
}

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
function main() {
  try {
    console.log('üîç –ß–∏—Ç–∞—é –∞–Ω–≥–ª–∏–π—Å–∫–∏–π —Å–ª–æ–≤–∞—Ä—å...');
    const dictionary = parseDictionary(enDictionaryPath);
    
    console.log('üìù –ì–µ–Ω–µ—Ä–∏—Ä—É—é —Ç–∏–ø—ã...');
    const typesContent = generateTypes(dictionary);
    
    console.log('üíæ –ó–∞–ø–∏—Å—ã–≤–∞—é —Ç–∏–ø—ã –≤ —Ñ–∞–π–ª...');
    fs.writeFileSync(typesOutputPath, typesContent);
    
    console.log('‚úÖ –¢–∏–ø—ã —É—Å–ø–µ—à–Ω–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω—ã!');
    console.log(`üìÅ –§–∞–π–ª: ${typesOutputPath}`);
    console.log(`üîë –í—Å–µ–≥–æ –∫–ª—é—á–µ–π: ${extractKeys(dictionary).length}`);
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–∏–ø–æ–≤:', error.message);
    process.exit(1);
  }
}

// –ó–∞–ø—É—Å–∫ —Å–∫—Ä–∏–ø—Ç–∞
if (require.main === module) {
  main();
}

module.exports = { generateTypes, extractKeys };
