{"version":3,"sources":["../src/image-generation/strategies/text-to-image.ts","../src/image-generation/strategies/image-to-image.ts","../src/image-generation/strategies/inpainting.ts","../src/image-generation/utils.ts","../src/video-generation/strategies/text-to-video.ts","../src/video-generation/strategies/video-to-video.ts","../src/video-generation/utils.ts","../src/ai-tools/prompt-enhancement/enhancer.ts","../src/ai-tools/prompt-enhancement-tool.ts","../src/ai-tools/script-generation/generator.ts","../src/ai-tools/script-generation-tool.ts","../src/ai-tools/video-models-tools.ts","../src/ai-tools/video-generation-tools.ts","../src/ai-tools/image-generation-tools.ts","../src/ai-tools/tools.ts","../src/ai-tools/enhance-prompt.ts","../src/ai-tools/components/tool-icon.tsx","../src/ai-tools/components/tools-grid.tsx","../src/ai-tools/config/tools-config.ts","../src/ai-tools/components/tools-page.tsx","../src/ai-tools/hooks/use-image-generator.ts","../src/ai-tools/hooks/use-video-generator.ts","../src/ai-tools/hooks/use-prompt-enhancer.ts","../src/veo3-tools/components/MoodboardUploader.tsx","../src/veo3-tools/components/PromptBuilder.tsx","../src/veo3-tools/components/PromptPreview.tsx","../src/veo3-tools/components/AIEnhancement.tsx","../src/veo3-tools/components/PromptHistory.tsx","../src/veo3-tools/utils/index.ts","../src/veo3-tools/constants/index.ts","../src/veo3-tools/components/Veo3PromptGenerator.tsx","../src/veo3-tools/types/index.ts"],"names":["superDuperAIClient","tool","style","readableTitle","checkBalanceBeforeArtifact","getOperationDisplayName","document","jsx","jsxs","useState","useCallback","enhancePrompt","Card","CardHeader","CardTitle","CardContent","MoodboardUploader","Label","Button","Badge","copyToClipboard","Textarea","Trash2","Sparkles","Copy","Fragment","enhancedPrompt","promptData"],"mappings":"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","file":"index.mjs","sourcesContent":["import { ImageGenerationParams, ImageGenerationResult } from \"../types\";\r\nimport { superDuperAIClient } from \"@turbo-super/api\";\r\n\r\nexport class TextToImageStrategy {\r\n  private client = superDuperAIClient;\r\n\r\n  async generate(\r\n    params: ImageGenerationParams\r\n  ): Promise<ImageGenerationResult> {\r\n    try {\r\n      // Validate parameters\r\n      this.validateParams(params);\r\n\r\n      // Prepare request payload\r\n      const payload = {\r\n        prompt: params.prompt,\r\n        negative_prompt: params.negativePrompt || \"\",\r\n        width: params.width,\r\n        height: params.height,\r\n        steps: params.steps || 20,\r\n        cfg_scale: params.cfgScale || 7.5,\r\n        seed: params.seed || -1,\r\n        model: params.model || \"stable-diffusion-xl\",\r\n      };\r\n\r\n      // Make API request\r\n      const response = await this.client.request<ImageGenerationResult>({\r\n        method: \"POST\",\r\n        url: \"/generation/image\",\r\n        data: payload,\r\n      });\r\n\r\n      return response;\r\n    } catch (error) {\r\n      throw new Error(\r\n        `Text-to-image generation failed: ${error instanceof Error ? error.message : \"Unknown error\"}`\r\n      );\r\n    }\r\n  }\r\n\r\n  private validateParams(params: ImageGenerationParams): void {\r\n    if (!params.prompt || params.prompt.trim().length === 0) {\r\n      throw new Error(\"Prompt is required\");\r\n    }\r\n\r\n    if (params.width <= 0 || params.height <= 0) {\r\n      throw new Error(\"Width and height must be positive numbers\");\r\n    }\r\n\r\n    if (params.steps && (params.steps < 1 || params.steps > 100)) {\r\n      throw new Error(\"Steps must be between 1 and 100\");\r\n    }\r\n\r\n    if (params.cfgScale && (params.cfgScale < 1 || params.cfgScale > 20)) {\r\n      throw new Error(\"CFG Scale must be between 1 and 20\");\r\n    }\r\n  }\r\n}\r\n\r\n// Export default instance\r\nexport const textToImageStrategy = new TextToImageStrategy();\r\n","import { ImageToImageParams, ImageGenerationResult } from \"../types\";\r\nimport { superDuperAIClient } from \"@turbo-super/api\";\r\n\r\nexport class ImageToImageStrategy {\r\n  private client = superDuperAIClient;\r\n\r\n  async generate(params: ImageToImageParams): Promise<ImageGenerationResult> {\r\n    try {\r\n      // Validate parameters\r\n      this.validateParams(params);\r\n\r\n      // Prepare request payload\r\n      const payload = {\r\n        prompt: params.prompt,\r\n        negative_prompt: params.negativePrompt || \"\",\r\n        input_image: params.inputImage,\r\n        width: params.width,\r\n        height: params.height,\r\n        steps: params.steps || 20,\r\n        cfg_scale: params.cfgScale || 7.5,\r\n        seed: params.seed || -1,\r\n        model: params.model || \"stable-diffusion-xl\",\r\n        strength: params.strength || 0.75,\r\n        denoising_strength: params.denoisingStrength || 0.75,\r\n      };\r\n\r\n      // Make API request\r\n      const response = await this.client.request<ImageGenerationResult>({\r\n        method: \"POST\",\r\n        url: \"/generation/image-to-image\",\r\n        data: payload,\r\n      });\r\n\r\n      return response;\r\n    } catch (error) {\r\n      throw new Error(\r\n        `Image-to-image generation failed: ${error instanceof Error ? error.message : \"Unknown error\"}`\r\n      );\r\n    }\r\n  }\r\n\r\n  private validateParams(params: ImageToImageParams): void {\r\n    if (!params.prompt || params.prompt.trim().length === 0) {\r\n      throw new Error(\"Prompt is required\");\r\n    }\r\n\r\n    if (!params.inputImage) {\r\n      throw new Error(\"Input image is required\");\r\n    }\r\n\r\n    if (params.width <= 0 || params.height <= 0) {\r\n      throw new Error(\"Width and height must be positive numbers\");\r\n    }\r\n\r\n    if (params.steps && (params.steps < 1 || params.steps > 100)) {\r\n      throw new Error(\"Steps must be between 1 and 100\");\r\n    }\r\n\r\n    if (params.cfgScale && (params.cfgScale < 1 || params.cfgScale > 20)) {\r\n      throw new Error(\"CFG Scale must be between 1 and 20\");\r\n    }\r\n\r\n    if (params.strength && (params.strength < 0 || params.strength > 1)) {\r\n      throw new Error(\"Strength must be between 0 and 1\");\r\n    }\r\n\r\n    if (\r\n      params.denoisingStrength &&\r\n      (params.denoisingStrength < 0 || params.denoisingStrength > 1)\r\n    ) {\r\n      throw new Error(\"Denoising strength must be between 0 and 1\");\r\n    }\r\n  }\r\n}\r\n\r\n// Export default instance\r\nexport const imageToImageStrategy = new ImageToImageStrategy();\r\n","import { ImageToImageParams, ImageGenerationResult } from \"../types\";\r\nimport { superDuperAIClient } from \"@turbo-super/api\";\r\n\r\nexport interface InpaintingParams extends ImageToImageParams {\r\n  mask: string; // Base64 or URL of the mask\r\n  maskBlur?: number; // Blur radius for the mask edges\r\n}\r\n\r\nexport class InpaintingStrategy {\r\n  private client = superDuperAIClient;\r\n\r\n  async generate(params: InpaintingParams): Promise<ImageGenerationResult> {\r\n    try {\r\n      // Validate parameters\r\n      this.validateParams(params);\r\n\r\n      // Prepare request payload\r\n      const payload = {\r\n        prompt: params.prompt,\r\n        negative_prompt: params.negativePrompt || \"\",\r\n        input_image: params.inputImage,\r\n        mask: params.mask,\r\n        width: params.width,\r\n        height: params.height,\r\n        steps: params.steps || 20,\r\n        cfg_scale: params.cfgScale || 7.5,\r\n        seed: params.seed || -1,\r\n        model: params.model || \"stable-diffusion-xl\",\r\n        strength: params.strength || 0.75,\r\n        mask_blur: params.maskBlur || 4,\r\n      };\r\n\r\n      // Make API request\r\n      const response = await this.client.request<ImageGenerationResult>({\r\n        method: \"POST\",\r\n        url: \"/generation/inpainting\",\r\n        data: payload,\r\n      });\r\n\r\n      return response;\r\n    } catch (error) {\r\n      throw new Error(\r\n        `Inpainting generation failed: ${error instanceof Error ? error.message : \"Unknown error\"}`\r\n      );\r\n    }\r\n  }\r\n\r\n  private validateParams(params: InpaintingParams): void {\r\n    if (!params.prompt || params.prompt.trim().length === 0) {\r\n      throw new Error(\"Prompt is required\");\r\n    }\r\n\r\n    if (!params.inputImage) {\r\n      throw new Error(\"Input image is required\");\r\n    }\r\n\r\n    if (!params.mask) {\r\n      throw new Error(\"Mask is required for inpainting\");\r\n    }\r\n\r\n    if (params.width <= 0 || params.height <= 0) {\r\n      throw new Error(\"Width and height must be positive numbers\");\r\n    }\r\n\r\n    if (params.steps && (params.steps < 1 || params.steps > 100)) {\r\n      throw new Error(\"Steps must be between 1 and 100\");\r\n    }\r\n\r\n    if (params.cfgScale && (params.cfgScale < 1 || params.cfgScale > 20)) {\r\n      throw new Error(\"CFG Scale must be between 1 and 20\");\r\n    }\r\n\r\n    if (params.strength && (params.strength < 0 || params.strength > 1)) {\r\n      throw new Error(\"Strength must be between 0 and 1\");\r\n    }\r\n\r\n    if (params.maskBlur && (params.maskBlur < 0 || params.maskBlur > 64)) {\r\n      throw new Error(\"Mask blur must be between 0 and 64\");\r\n    }\r\n  }\r\n}\r\n\r\n// Export default instance\r\nexport const inpaintingStrategy = new InpaintingStrategy();\r\n","import { ImageGenerationConfig } from \"./types\";\r\n\r\n// Default configuration for image generation\r\nexport const DEFAULT_IMAGE_CONFIG: ImageGenerationConfig = {\r\n  defaultModel: \"stable-diffusion-xl\",\r\n  maxSteps: 50,\r\n  maxCfgScale: 20,\r\n  supportedResolutions: [\r\n    { width: 512, height: 512 },\r\n    { width: 768, height: 768 },\r\n    { width: 1024, height: 1024 },\r\n    { width: 1024, height: 768 },\r\n    { width: 768, height: 1024 },\r\n  ],\r\n  defaultStrength: 0.75,\r\n};\r\n\r\n// Image generation types\r\nexport type ImageGenType = \"text-to-image\" | \"image-to-image\";\r\n\r\n// Utility functions for image generation\r\nexport class ImageGenerationUtils {\r\n  /**\r\n   * Validate if resolution is supported\r\n   */\r\n  static isResolutionSupported(width: number, height: number): boolean {\r\n    return DEFAULT_IMAGE_CONFIG.supportedResolutions.some(\r\n      (res) => res.width === width && res.height === height\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Get closest supported resolution\r\n   */\r\n  static getClosestResolution(\r\n    width: number,\r\n    height: number\r\n  ): { width: number; height: number } {\r\n    let closest = DEFAULT_IMAGE_CONFIG.supportedResolutions[0];\r\n    let minDistance = Infinity;\r\n\r\n    for (const res of DEFAULT_IMAGE_CONFIG.supportedResolutions) {\r\n      const distance = Math.sqrt(\r\n        Math.pow(res.width - width, 2) + Math.pow(res.height - height, 2)\r\n      );\r\n      if (distance < minDistance) {\r\n        minDistance = distance;\r\n        closest = res;\r\n      }\r\n    }\r\n\r\n    return closest;\r\n  }\r\n\r\n  /**\r\n   * Calculate aspect ratio\r\n   */\r\n  static getAspectRatio(width: number, height: number): number {\r\n    return width / height;\r\n  }\r\n\r\n  /**\r\n   * Check if image is square\r\n   */\r\n  static isSquare(width: number, height: number): boolean {\r\n    return width === height;\r\n  }\r\n\r\n  /**\r\n   * Check if image is portrait\r\n   */\r\n  static isPortrait(width: number, height: number): boolean {\r\n    return height > width;\r\n  }\r\n\r\n  /**\r\n   * Check if image is landscape\r\n   */\r\n  static isLandscape(width: number, height: number): boolean {\r\n    return width > height;\r\n  }\r\n\r\n  /**\r\n   * Generate a random seed\r\n   */\r\n  static generateRandomSeed(): number {\r\n    return Math.floor(Math.random() * 2147483647);\r\n  }\r\n\r\n  /**\r\n   * Validate prompt length\r\n   */\r\n  static validatePromptLength(\r\n    prompt: string,\r\n    maxLength: number = 1000\r\n  ): boolean {\r\n    return prompt.length <= maxLength;\r\n  }\r\n\r\n  /**\r\n   * Sanitize prompt text\r\n   */\r\n  static sanitizePrompt(prompt: string): string {\r\n    return prompt\r\n      .trim()\r\n      .replace(/\\s+/g, \" \") // Replace multiple spaces with single space\r\n      .replace(/[^\\w\\s\\-.,!?()]/g, \"\"); // Remove special characters except basic punctuation\r\n  }\r\n\r\n  /**\r\n   * Normalize image generation type\r\n   */\r\n  static normalizeImageGenerationType(value: any): ImageGenType {\r\n    return value === \"image-to-image\" ? \"image-to-image\" : \"text-to-image\";\r\n  }\r\n\r\n  /**\r\n   * Ensure non-empty prompt with fallback\r\n   */\r\n  static ensureNonEmptyPrompt(input: any, fallback: string): string {\r\n    const str = typeof input === \"string\" ? input.trim() : \"\";\r\n    return str.length > 0 ? str : fallback;\r\n  }\r\n\r\n  /**\r\n   * Select image-to-image model\r\n   */\r\n  static async selectImageToImageModel(\r\n    rawModelName: string,\r\n    getAvailableImageModels: () => Promise<any[]>,\r\n    options?: { allowInpainting?: boolean }\r\n  ): Promise<string | null> {\r\n    const allowInpainting = options?.allowInpainting ?? false;\r\n    const allImageModels = await getAvailableImageModels();\r\n    const allI2I = allImageModels.filter(\r\n      (m: any) => m.type === \"image_to_image\"\r\n    );\r\n\r\n    const wants = String(rawModelName || \"\");\r\n    const baseToken = wants.toLowerCase().includes(\"flux\")\r\n      ? \"flux\"\r\n      : wants.split(\"/\").pop()?.split(\"-\")[0] || wants.toLowerCase();\r\n\r\n    const candidates = allowInpainting\r\n      ? allI2I\r\n      : allI2I.filter((m: any) => !/inpaint/i.test(String(m.name || \"\")));\r\n\r\n    let pick = candidates.find(\r\n      (m: any) =>\r\n        String(m.name || \"\").toLowerCase() === wants.toLowerCase() ||\r\n        String(m.label || \"\").toLowerCase() === wants.toLowerCase()\r\n    );\r\n    if (!pick && baseToken) {\r\n      pick = candidates.find(\r\n        (m: any) =>\r\n          String(m.name || \"\")\r\n            .toLowerCase()\r\n            .includes(baseToken) ||\r\n          String(m.label || \"\")\r\n            .toLowerCase()\r\n            .includes(baseToken)\r\n      );\r\n    }\r\n    if (!pick && candidates.length > 0) pick = candidates[0];\r\n\r\n    return pick?.name || null;\r\n  }\r\n}\r\n","import { VideoGenerationParams, VideoGenerationResult } from \"../types\";\r\nimport { superDuperAIClient } from \"@turbo-super/api\";\r\n\r\nexport class TextToVideoStrategy {\r\n  private client = superDuperAIClient;\r\n\r\n  async generate(\r\n    params: VideoGenerationParams\r\n  ): Promise<VideoGenerationResult> {\r\n    try {\r\n      // Validate parameters\r\n      this.validateParams(params);\r\n\r\n      // Prepare request payload\r\n      const payload = {\r\n        prompt: params.prompt,\r\n        negative_prompt: params.negativePrompt || \"\",\r\n        width: params.width,\r\n        height: params.height,\r\n        duration: params.duration,\r\n        fps: params.fps || 24,\r\n        model: params.model || \"veo-2\",\r\n        seed: params.seed || -1,\r\n      };\r\n\r\n      // Make API request\r\n      const response = await this.client.request<VideoGenerationResult>({\r\n        method: \"POST\",\r\n        url: \"/generation/video\",\r\n        data: payload,\r\n      });\r\n\r\n      return response;\r\n    } catch (error) {\r\n      throw new Error(\r\n        `Text-to-video generation failed: ${error instanceof Error ? error.message : \"Unknown error\"}`\r\n      );\r\n    }\r\n  }\r\n\r\n  private validateParams(params: VideoGenerationParams): void {\r\n    if (!params.prompt || params.prompt.trim().length === 0) {\r\n      throw new Error(\"Prompt is required\");\r\n    }\r\n\r\n    if (params.width <= 0 || params.height <= 0) {\r\n      throw new Error(\"Width and height must be positive numbers\");\r\n    }\r\n\r\n    if (params.duration <= 0 || params.duration > 60) {\r\n      throw new Error(\"Duration must be between 0 and 60 seconds\");\r\n    }\r\n\r\n    if (params.fps && (params.fps < 1 || params.fps > 60)) {\r\n      throw new Error(\"FPS must be between 1 and 60\");\r\n    }\r\n  }\r\n}\r\n\r\n// Export default instance\r\nexport const textToVideoStrategy = new TextToVideoStrategy();\r\n","import { VideoToVideoParams, VideoGenerationResult } from \"../types\";\r\nimport { superDuperAIClient } from \"@turbo-super/api\";\r\n\r\nexport class VideoToVideoStrategy {\r\n  private client = superDuperAIClient;\r\n\r\n  async generate(params: VideoToVideoParams): Promise<VideoGenerationResult> {\r\n    try {\r\n      // Validate parameters\r\n      this.validateParams(params);\r\n\r\n      // Prepare request payload\r\n      const payload = {\r\n        prompt: params.prompt,\r\n        negative_prompt: params.negativePrompt || \"\",\r\n        input_video: params.inputVideo,\r\n        width: params.width,\r\n        height: params.height,\r\n        duration: params.duration,\r\n        fps: params.fps || 24,\r\n        model: params.model || \"veo-2\",\r\n        seed: params.seed || -1,\r\n        strength: params.strength || 0.75,\r\n      };\r\n\r\n      // Make API request\r\n      const response = await this.client.request<VideoGenerationResult>({\r\n        method: \"POST\",\r\n        url: \"/generation/video-to-video\",\r\n        data: payload,\r\n      });\r\n\r\n      return response;\r\n    } catch (error) {\r\n      throw new Error(\r\n        `Video-to-video generation failed: ${error instanceof Error ? error.message : \"Unknown error\"}`\r\n      );\r\n    }\r\n  }\r\n\r\n  private validateParams(params: VideoToVideoParams): void {\r\n    if (!params.prompt || params.prompt.trim().length === 0) {\r\n      throw new Error(\"Prompt is required\");\r\n    }\r\n\r\n    if (!params.inputVideo) {\r\n      throw new Error(\"Input video is required\");\r\n    }\r\n\r\n    if (params.width <= 0 || params.height <= 0) {\r\n      throw new Error(\"Width and height must be positive numbers\");\r\n    }\r\n\r\n    if (params.duration <= 0 || params.duration > 60) {\r\n      throw new Error(\"Duration must be between 0 and 60 seconds\");\r\n    }\r\n\r\n    if (params.fps && (params.fps < 1 || params.fps > 60)) {\r\n      throw new Error(\"FPS must be between 1 and 60\");\r\n    }\r\n\r\n    if (params.strength && (params.strength < 0 || params.strength > 1)) {\r\n      throw new Error(\"Strength must be between 0 and 1\");\r\n    }\r\n  }\r\n}\r\n\r\n// Export default instance\r\nexport const videoToVideoStrategy = new VideoToVideoStrategy();\r\n","import { VideoGenerationConfig } from \"./types\";\r\n\r\n// Default configuration for video generation\r\nexport const DEFAULT_VIDEO_CONFIG: VideoGenerationConfig = {\r\n  defaultModel: \"veo-2\",\r\n  maxDuration: 60,\r\n  minDuration: 1,\r\n  supportedFps: [24, 25, 30, 60],\r\n  supportedResolutions: [\r\n    { width: 512, height: 512 },\r\n    { width: 768, height: 768 },\r\n    { width: 1024, height: 1024 },\r\n    { width: 1024, height: 768 },\r\n    { width: 768, height: 1024 },\r\n  ],\r\n  defaultStrength: 0.75,\r\n};\r\n\r\n// Utility functions for video generation\r\nexport class VideoGenerationUtils {\r\n  /**\r\n   * Validate if resolution is supported\r\n   */\r\n  static isResolutionSupported(width: number, height: number): boolean {\r\n    return DEFAULT_VIDEO_CONFIG.supportedResolutions.some(\r\n      (res) => res.width === width && res.height === height\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Get closest supported resolution\r\n   */\r\n  static getClosestResolution(\r\n    width: number,\r\n    height: number\r\n  ): { width: number; height: number } {\r\n    let closest = DEFAULT_VIDEO_CONFIG.supportedResolutions[0];\r\n    let minDistance = Infinity;\r\n\r\n    for (const res of DEFAULT_VIDEO_CONFIG.supportedResolutions) {\r\n      const distance = Math.sqrt(\r\n        Math.pow(res.width - width, 2) + Math.pow(res.height - height, 2)\r\n      );\r\n      if (distance < minDistance) {\r\n        minDistance = distance;\r\n        closest = res;\r\n      }\r\n    }\r\n\r\n    return closest;\r\n  }\r\n\r\n  /**\r\n   * Validate duration\r\n   */\r\n  static validateDuration(duration: number): boolean {\r\n    return (\r\n      duration >= DEFAULT_VIDEO_CONFIG.minDuration &&\r\n      duration <= DEFAULT_VIDEO_CONFIG.maxDuration\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Validate FPS\r\n   */\r\n  static validateFps(fps: number): boolean {\r\n    return DEFAULT_VIDEO_CONFIG.supportedFps.includes(fps);\r\n  }\r\n\r\n  /**\r\n   * Get closest supported FPS\r\n   */\r\n  static getClosestFps(fps: number): number {\r\n    let closest = DEFAULT_VIDEO_CONFIG.supportedFps[0];\r\n    let minDistance = Infinity;\r\n\r\n    for (const supportedFps of DEFAULT_VIDEO_CONFIG.supportedFps) {\r\n      const distance = Math.abs(supportedFps - fps);\r\n      if (distance < minDistance) {\r\n        minDistance = distance;\r\n        closest = supportedFps;\r\n      }\r\n    }\r\n\r\n    return closest;\r\n  }\r\n\r\n  /**\r\n   * Calculate video file size estimate\r\n   */\r\n  static estimateFileSize(\r\n    width: number,\r\n    height: number,\r\n    duration: number,\r\n    fps: number\r\n  ): number {\r\n    // Rough estimate: 1 byte per pixel per frame\r\n    const pixelsPerFrame = width * height;\r\n    const totalFrames = duration * fps;\r\n    return pixelsPerFrame * totalFrames;\r\n  }\r\n}\r\n","import { PromptEnhancementParams, EnhancedPrompt, PromptStyle, LanguageSupport } from './types';\r\nimport { superDuperAIClient } from '@turbo-super/api';\r\n\r\nexport class PromptEnhancer {\r\n  private client = superDuperAIClient;\r\n\r\n  // Default prompt styles\r\n  private static readonly DEFAULT_STYLES: PromptStyle[] = [\r\n    {\r\n      id: 'professional',\r\n      name: 'Professional',\r\n      description: 'Formal, business-like language with clear structure',\r\n      examples: [\r\n        'A high-quality, professional photograph of a modern office space',\r\n        'A sophisticated, elegant design suitable for corporate use'\r\n      ],\r\n      keywords: ['professional', 'business', 'corporate', 'formal', 'sophisticated']\r\n    },\r\n    {\r\n      id: 'creative',\r\n      name: 'Creative',\r\n      description: 'Artistic, imaginative language with vivid descriptions',\r\n      examples: [\r\n        'A whimsical, dreamlike scene with vibrant colors and magical elements',\r\n        'An artistic masterpiece with bold brushstrokes and dramatic lighting'\r\n      ],\r\n      keywords: ['creative', 'artistic', 'imaginative', 'vibrant', 'dramatic']\r\n    },\r\n    {\r\n      id: 'technical',\r\n      name: 'Technical',\r\n      description: 'Precise, detailed language with specific parameters',\r\n      examples: [\r\n        'A technical diagram with precise measurements and clear labeling',\r\n        'A schematic illustration with detailed specifications and annotations'\r\n      ],\r\n      keywords: ['technical', 'precise', 'detailed', 'specific', 'accurate']\r\n    },\r\n    {\r\n      id: 'casual',\r\n      name: 'Casual',\r\n      description: 'Relaxed, friendly language with natural expressions',\r\n      examples: [\r\n        'A cozy, relaxed scene that feels warm and inviting',\r\n        'A friendly, approachable design with a welcoming atmosphere'\r\n      ],\r\n      keywords: ['casual', 'friendly', 'relaxed', 'warm', 'inviting']\r\n    }\r\n  ];\r\n\r\n  // Supported languages\r\n  private static readonly SUPPORTED_LANGUAGES: LanguageSupport[] = [\r\n    { code: 'en', name: 'English', nativeName: 'English', supported: true },\r\n    { code: 'es', name: 'Spanish', nativeName: 'Español', supported: true },\r\n    { code: 'fr', name: 'French', nativeName: 'Français', supported: true },\r\n    { code: 'de', name: 'German', nativeName: 'Deutsch', supported: true },\r\n    { code: 'it', name: 'Italian', nativeName: 'Italiano', supported: true },\r\n    { code: 'pt', name: 'Portuguese', nativeName: 'Português', supported: true },\r\n    { code: 'ru', name: 'Russian', nativeName: 'Русский', supported: true },\r\n    { code: 'ja', name: 'Japanese', nativeName: '日本語', supported: true },\r\n    { code: 'ko', name: 'Korean', nativeName: '한국어', supported: true },\r\n    { code: 'zh', name: 'Chinese', nativeName: '中文', supported: true }\r\n  ];\r\n\r\n  /**\r\n   * Enhance a prompt using AI\r\n   */\r\n  async enhancePrompt(params: PromptEnhancementParams): Promise<EnhancedPrompt> {\r\n    try {\r\n      // Validate input\r\n      this.validateParams(params);\r\n\r\n      // Prepare enhancement request\r\n      const enhancementRequest = {\r\n        prompt: params.prompt,\r\n        style: params.style || 'professional',\r\n        language: params.language || 'en',\r\n        targetModel: params.targetModel || 'image',\r\n        length: params.length || 'medium',\r\n        includeExamples: params.includeExamples || false\r\n      };\r\n\r\n      // Make API request to enhance prompt\r\n      const response = await this.client.request<{\r\n        enhancedPrompt: string;\r\n        suggestions: string[];\r\n        confidence: number;\r\n        metadata: any;\r\n      }>({\r\n        method: 'POST',\r\n        url: '/ai/enhance-prompt',\r\n        data: enhancementRequest,\r\n      });\r\n\r\n      // Calculate metadata\r\n      const metadata = {\r\n        language: params.language || 'en',\r\n        style: params.style || 'professional',\r\n        length: params.length || 'medium',\r\n        targetModel: params.targetModel || 'image',\r\n        wordCount: this.countWords(response.enhancedPrompt),\r\n        estimatedTokens: this.estimateTokens(response.enhancedPrompt)\r\n      };\r\n\r\n      return {\r\n        original: params.prompt,\r\n        enhanced: response.enhancedPrompt,\r\n        suggestions: response.suggestions,\r\n        confidence: response.confidence,\r\n        metadata\r\n      };\r\n    } catch (error) {\r\n      throw new Error(\r\n        `Prompt enhancement failed: ${error instanceof Error ? error.message : 'Unknown error'}`\r\n      );\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get available prompt styles\r\n   */\r\n  getPromptStyles(): PromptStyle[] {\r\n    return PromptEnhancer.DEFAULT_STYLES;\r\n  }\r\n\r\n  /**\r\n   * Get supported languages\r\n   */\r\n  getSupportedLanguages(): LanguageSupport[] {\r\n    return PromptEnhancer.SUPPORTED_LANGUAGES;\r\n  }\r\n\r\n  /**\r\n   * Get style by ID\r\n   */\r\n  getStyleById(styleId: string): PromptStyle | undefined {\r\n    return PromptEnhancer.DEFAULT_STYLES.find(style => style.id === styleId);\r\n  }\r\n\r\n  /**\r\n   * Get language by code\r\n   */\r\n  getLanguageByCode(code: string): LanguageSupport | undefined {\r\n    return PromptEnhancer.SUPPORTED_LANGUAGES.find(lang => lang.code === code);\r\n  }\r\n\r\n  /**\r\n   * Validate enhancement parameters\r\n   */\r\n  private validateParams(params: PromptEnhancementParams): void {\r\n    if (!params.prompt || params.prompt.trim().length === 0) {\r\n      throw new Error('Prompt is required');\r\n    }\r\n\r\n    if (params.prompt.length > 1000) {\r\n      throw new Error('Prompt is too long (max 1000 characters)');\r\n    }\r\n\r\n    if (params.style && !this.getStyleById(params.style)) {\r\n      throw new Error(`Invalid style: ${params.style}`);\r\n    }\r\n\r\n    if (params.language && !this.getLanguageByCode(params.language)) {\r\n      throw new Error(`Unsupported language: ${params.language}`);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Count words in text\r\n   */\r\n  private countWords(text: string): number {\r\n    return text.trim().split(/\\s+/).filter(word => word.length > 0).length;\r\n  }\r\n\r\n  /**\r\n   * Estimate token count (rough approximation)\r\n   */\r\n  private estimateTokens(text: string): number {\r\n    // Rough approximation: 1 token ≈ 4 characters for English\r\n    return Math.ceil(text.length / 4);\r\n  }\r\n}\r\n\r\n// Export default instance\r\nexport const promptEnhancer = new PromptEnhancer();\r\n","import { PromptEnhancer } from './prompt-enhancement/enhancer';\r\n\r\n// Create a tool function for prompt enhancement\r\nexport const enhancePrompt = (config?: any) => ({\r\n  description: \"Enhance and improve prompts for better AI generation results\",\r\n  parameters: {\r\n    originalPrompt: { type: \"string\", description: \"The original prompt text to enhance\" },\r\n    mediaType: { type: \"string\", enum: [\"image\", \"video\", \"text\", \"general\"], optional: true },\r\n    enhancementLevel: { type: \"string\", enum: [\"basic\", \"detailed\", \"creative\"], optional: true },\r\n    targetAudience: { type: \"string\", optional: true },\r\n    includeNegativePrompt: { type: \"boolean\", optional: true },\r\n    modelHint: { type: \"string\", optional: true }\r\n  },\r\n  execute: async (params: any) => {\r\n    try {\r\n      const enhancer = new PromptEnhancer();\r\n      const result = await enhancer.enhancePrompt(params);\r\n      return result;\r\n    } catch (error) {\r\n      throw new Error(`Prompt enhancement failed: ${error instanceof Error ? error.message : 'Unknown error'}`);\r\n    }\r\n  }\r\n});\r\n","import { \r\n  ScriptGenerationParams, \r\n  GeneratedScript, \r\n  ScriptOutline, \r\n  ScriptMetadata,\r\n  ScriptTemplate \r\n} from './types';\r\nimport { superDuperAIClient } from '@turbo-super/api';\r\n\r\nexport class ScriptGenerator {\r\n  private client = superDuperAIClient;\r\n\r\n  // Default script templates\r\n  private static readonly DEFAULT_TEMPLATES: ScriptTemplate[] = [\r\n    {\r\n      id: 'educational',\r\n      name: 'Educational Script',\r\n      description: 'Structured format for educational content',\r\n      structure: ['Introduction', 'Main Content', 'Examples', 'Summary', 'Quiz/Questions'],\r\n      examples: ['Science lesson', 'History documentary', 'Tutorial video'],\r\n      genre: ['educational', 'documentary'],\r\n      suitableFor: ['children', 'teens', 'adults']\r\n    },\r\n    {\r\n      id: 'storytelling',\r\n      name: 'Storytelling Script',\r\n      description: 'Narrative format for engaging stories',\r\n      structure: ['Hook', 'Setup', 'Conflict', 'Rising Action', 'Climax', 'Resolution'],\r\n      examples: ['Fairy tale', 'Adventure story', 'Mystery tale'],\r\n      genre: ['drama', 'adventure', 'mystery'],\r\n      suitableFor: ['children', 'teens', 'adults']\r\n    },\r\n    {\r\n      id: 'commercial',\r\n      name: 'Commercial Script',\r\n      description: 'Persuasive format for marketing content',\r\n      structure: ['Attention', 'Interest', 'Desire', 'Action'],\r\n      examples: ['Product advertisement', 'Service promotion', 'Brand story'],\r\n      genre: ['commercial', 'marketing'],\r\n      suitableFor: ['teens', 'adults']\r\n    }\r\n  ];\r\n\r\n  /**\r\n   * Generate a script using AI\r\n   */\r\n  async generateScript(params: ScriptGenerationParams): Promise<GeneratedScript> {\r\n    try {\r\n      // Validate input\r\n      this.validateParams(params);\r\n\r\n      // Prepare generation request\r\n      const generationRequest = {\r\n        topic: params.topic,\r\n        genre: params.genre || 'educational',\r\n        length: params.length || 'medium',\r\n        format: params.format || 'markdown',\r\n        targetAudience: params.targetAudience || 'general',\r\n        tone: params.tone || 'informative',\r\n        includeDialogue: params.includeDialogue || false,\r\n        includeStageDirections: params.includeStageDirections || false\r\n      };\r\n\r\n      // Make API request to generate script\r\n      const response = await this.client.request<{\r\n        script: string;\r\n        outline: any[];\r\n        metadata: any;\r\n      }>({\r\n        method: 'POST',\r\n        url: '/ai/generate-script',\r\n        data: generationRequest,\r\n      });\r\n\r\n      // Generate unique ID\r\n      const id = this.generateId();\r\n\r\n      // Create script object\r\n      const generatedScript: GeneratedScript = {\r\n        id,\r\n        topic: params.topic,\r\n        script: response.script,\r\n        outline: this.parseOutline(response.outline),\r\n        metadata: this.parseMetadata(response.metadata, params),\r\n        createdAt: new Date().toISOString(),\r\n        status: 'draft'\r\n      };\r\n\r\n      return generatedScript;\r\n    } catch (error) {\r\n      throw new Error(\r\n        `Script generation failed: ${error instanceof Error ? error.message : 'Unknown error'}`\r\n      );\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get available script templates\r\n   */\r\n  getScriptTemplates(): ScriptTemplate[] {\r\n    return ScriptGenerator.DEFAULT_TEMPLATES;\r\n  }\r\n\r\n  /**\r\n   * Get template by ID\r\n   */\r\n  getTemplateById(templateId: string): ScriptTemplate | undefined {\r\n    return ScriptGenerator.DEFAULT_TEMPLATES.find(template => template.id === templateId);\r\n  }\r\n\r\n  /**\r\n   * Get templates by genre\r\n   */\r\n  getTemplatesByGenre(genre: string): ScriptTemplate[] {\r\n    return ScriptGenerator.DEFAULT_TEMPLATES.filter(template => \r\n      template.genre.includes(genre)\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Get templates suitable for target audience\r\n   */\r\n  getTemplatesByAudience(audience: string): ScriptTemplate[] {\r\n    return ScriptGenerator.DEFAULT_TEMPLATES.filter(template => \r\n      template.suitableFor.includes(audience)\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Validate generation parameters\r\n   */\r\n  private validateParams(params: ScriptGenerationParams): void {\r\n    if (!params.topic || params.topic.trim().length === 0) {\r\n      throw new Error('Topic is required');\r\n    }\r\n\r\n    if (params.topic.length > 500) {\r\n      throw new Error('Topic is too long (max 500 characters)');\r\n    }\r\n\r\n    if (params.genre && !this.isValidGenre(params.genre)) {\r\n      throw new Error(`Invalid genre: ${params.genre}`);\r\n    }\r\n\r\n    if (params.length && !this.isValidLength(params.length)) {\r\n      throw new Error(`Invalid length: ${params.length}`);\r\n    }\r\n\r\n    if (params.format && !this.isValidFormat(params.format)) {\r\n      throw new Error(`Invalid format: ${params.format}`);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Check if genre is valid\r\n   */\r\n  private isValidGenre(genre: string): boolean {\r\n    const validGenres = ['drama', 'comedy', 'action', 'romance', 'thriller', 'documentary', 'educational'];\r\n    return validGenres.includes(genre);\r\n  }\r\n\r\n  /**\r\n   * Check if length is valid\r\n   */\r\n  private isValidLength(length: string): boolean {\r\n    const validLengths = ['short', 'medium', 'long'];\r\n    return validLengths.includes(length);\r\n  }\r\n\r\n  /**\r\n   * Check if format is valid\r\n   */\r\n  private isValidFormat(format: string): boolean {\r\n    const validFormats = ['markdown', 'plain', 'structured', 'screenplay'];\r\n    return validFormats.includes(format);\r\n  }\r\n\r\n  /**\r\n   * Parse outline from API response\r\n   */\r\n  private parseOutline(outlineData: any[]): ScriptOutline[] {\r\n    return outlineData.map((item, index) => ({\r\n      section: item.section || `Section ${index + 1}`,\r\n      title: item.title || `Title ${index + 1}`,\r\n      description: item.description || '',\r\n      duration: item.duration,\r\n      keyPoints: Array.isArray(item.keyPoints) ? item.keyPoints : []\r\n    }));\r\n  }\r\n\r\n  /**\r\n   * Parse metadata from API response and params\r\n   */\r\n  private parseMetadata(metadataData: any, params: ScriptGenerationParams): ScriptMetadata {\r\n    return {\r\n      genre: params.genre || 'educational',\r\n      estimatedDuration: metadataData.estimatedDuration || '5-10 minutes',\r\n      scenes: metadataData.scenes || 3,\r\n      characters: metadataData.characters || 2,\r\n      wordCount: this.countWords(metadataData.script || ''),\r\n      targetAudience: params.targetAudience || 'general',\r\n      tone: params.tone || 'informative',\r\n      format: params.format || 'markdown',\r\n      language: 'en'\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Generate unique ID\r\n   */\r\n  private generateId(): string {\r\n    return `script_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;\r\n  }\r\n\r\n  /**\r\n   * Count words in text\r\n   */\r\n  private countWords(text: string): number {\r\n    return text.trim().split(/\\s+/).filter(word => word.length > 0).length;\r\n  }\r\n}\r\n\r\n// Export default instance\r\nexport const scriptGenerator = new ScriptGenerator();\r\n","import { ScriptGenerator } from './script-generation/generator';\r\n\r\n// Create a tool function for script generation\r\nexport const configureScriptGeneration = (config?: any) => ({\r\n  description: \"Generate scripts for various content types (educational, storytelling, commercial)\",\r\n  parameters: {\r\n    topic: { type: \"string\", description: \"The main topic or theme for the script\" },\r\n    genre: { type: \"string\", enum: [\"educational\", \"storytelling\", \"commercial\"], optional: true },\r\n    length: { type: \"string\", enum: [\"short\", \"medium\", \"long\"], optional: true },\r\n    format: { type: \"string\", enum: [\"markdown\", \"plain\", \"structured\"], optional: true },\r\n    targetAudience: { type: \"string\", optional: true },\r\n    tone: { type: \"string\", optional: true },\r\n    includeDialogue: { type: \"boolean\", optional: true },\r\n    includeStageDirections: { type: \"boolean\", optional: true }\r\n  },\r\n  execute: async (params: any) => {\r\n    try {\r\n      const generator = new ScriptGenerator();\r\n      const result = await generator.generateScript(params);\r\n      return result;\r\n    } catch (error) {\r\n      throw new Error(`Script generation failed: ${error instanceof Error ? error.message : 'Unknown error'}`);\r\n    }\r\n  }\r\n});\r\n","// Placeholder for ai-sdk tool function\r\nconst tool = (config: any) => config;\r\n\r\n// Placeholder function\r\nasync function getAvailableVideoModels() {\r\n  return [];\r\n}\r\n\r\nexport const listVideoModels = tool({\r\n  description:\r\n    \"List all available video generation models from SuperDuperAI API with their capabilities, pricing, and requirements. Use this to see what models are available before generating videos.\",\r\n  parameters: {\r\n    format: {\r\n      type: \"string\",\r\n      enum: [\"detailed\", \"simple\", \"agent-friendly\"],\r\n      optional: true,\r\n      description: \"Format of the output: detailed (full info), simple (names only), agent-friendly (formatted for AI agents)\"\r\n    },\r\n    filterByPrice: {\r\n      type: \"number\",\r\n      optional: true,\r\n      description: \"Filter models by maximum price per second\"\r\n    },\r\n    filterByDuration: {\r\n      type: \"number\",\r\n      optional: true,\r\n      description: \"Filter models that support this duration in seconds\"\r\n    },\r\n    excludeVip: {\r\n      type: \"boolean\",\r\n      optional: true,\r\n      description: \"Exclude VIP-only models\"\r\n    },\r\n  },\r\n  execute: async ({\r\n    format = \"agent-friendly\",\r\n    filterByPrice,\r\n    filterByDuration,\r\n    excludeVip,\r\n  }: {\r\n    format?: \"detailed\" | \"simple\" | \"agent-friendly\";\r\n    filterByPrice?: number;\r\n    filterByDuration?: number;\r\n    excludeVip?: boolean;\r\n  }) => {\r\n    try {\r\n      console.log(\r\n        \"🎬 📋 Listing video models from SuperDuperAI with format:\",\r\n        format\r\n      );\r\n\r\n      // AICODE-NOTE: Get models from our new dynamic system\r\n      const allModels = await getAvailableVideoModels();\r\n      let videoModels = allModels.map((m) => m as any); // Temporary type assertion for build fix\r\n\r\n      // Apply filters based on params\r\n      if (filterByPrice) {\r\n        videoModels = videoModels.filter(\r\n          (m) =>\r\n            (m.params.price_per_second || m.params.price || 0) <= filterByPrice\r\n        );\r\n      }\r\n\r\n      if (filterByDuration) {\r\n        videoModels = videoModels.filter(\r\n          (m) =>\r\n            (m.params.max_duration ||\r\n              m.params.available_durations?.[0] ||\r\n              60) >= filterByDuration\r\n        );\r\n      }\r\n\r\n      if (excludeVip) {\r\n        videoModels = videoModels.filter((m) => !m.params.is_vip);\r\n      }\r\n\r\n      if (format === \"agent-friendly\") {\r\n        const agentInfo = {\r\n          models: videoModels.map((m) => ({\r\n            id: m.name, // Use name as id\r\n            name: m.name,\r\n            description: m.label || m.name,\r\n            price_per_second: m.params.price_per_second || m.params.price || 0,\r\n            max_duration: m.params.max_duration || 60,\r\n            vip_required: m.params.is_vip || false,\r\n            supported_resolutions: `${m.params.max_width || 1920}x${m.params.max_height || 1080}`,\r\n            frame_rates: m.params.frame_rates || [24, 30],\r\n            aspect_ratios: m.params.aspect_ratios || [\"16:9\"],\r\n          })),\r\n          usage_examples: [\r\n            'Use model ID like \"comfyui/ltx\" when calling configureVideoGeneration',\r\n            \"Check max_duration before setting video duration\",\r\n            \"Consider price_per_second for cost optimization\",\r\n          ],\r\n          total: videoModels.length,\r\n        };\r\n\r\n        return {\r\n          success: true,\r\n          data: agentInfo,\r\n          message: `Found ${videoModels.length} video models from SuperDuperAI API`,\r\n        };\r\n      }\r\n\r\n      if (format === \"simple\") {\r\n        const simpleList = videoModels.map((m) => ({\r\n          id: m.name,\r\n          name: m.name,\r\n          price: m.params.price_per_second || m.params.price || 0,\r\n          max_duration: m.params.max_duration || 60,\r\n          vip: m.params.is_vip || false,\r\n        }));\r\n\r\n        return {\r\n          success: true,\r\n          data: simpleList,\r\n          total: simpleList.length,\r\n          message: `Found ${simpleList.length} video models`,\r\n        };\r\n      }\r\n\r\n      // Detailed format\r\n      const detailedList = videoModels.map((m) => ({\r\n        id: m.name,\r\n        name: m.name,\r\n        description: m.label || m.name,\r\n        price_per_second: m.params.price_per_second || m.params.price || 0,\r\n        max_duration: m.params.max_duration || 60,\r\n        max_resolution: {\r\n          width: m.params.max_width || 1920,\r\n          height: m.params.max_height || 1080,\r\n        },\r\n        supported_frame_rates: m.params.frame_rates || [24, 30],\r\n        supported_aspect_ratios: m.params.aspect_ratios || [\"16:9\"],\r\n        supported_qualities: m.params.qualities || [\"hd\"],\r\n        vip_required: m.params.is_vip || false,\r\n        workflow_path: m.params.workflow_path || \"\",\r\n      }));\r\n\r\n      return {\r\n        success: true,\r\n        data: detailedList,\r\n        total: detailedList.length,\r\n        message: `Found ${detailedList.length} video models with detailed information`,\r\n        filters_applied: {\r\n          max_price: filterByPrice,\r\n          duration: filterByDuration,\r\n          exclude_vip: excludeVip,\r\n        },\r\n      };\r\n    } catch (error: any) {\r\n      console.error(\"🎬 ❌ Error listing video models:\", error);\r\n      return {\r\n        success: false,\r\n        error:\r\n          error?.message || \"Failed to list video models from SuperDuperAI API\",\r\n        message:\r\n          \"Could not retrieve video models. Please check SUPERDUPERAI_TOKEN and SUPERDUPERAI_URL environment variables.\",\r\n      };\r\n    }\r\n  },\r\n});\r\n\r\nexport const findBestVideoModel = tool({\r\n  description:\r\n    \"Find the best video model from SuperDuperAI based on specific requirements like price, duration, and VIP access. Use this to automatically select the optimal model for your needs.\",\r\n  parameters: {\r\n    maxPrice: {\r\n      type: \"number\",\r\n      optional: true,\r\n      description: \"Maximum price per second you want to pay\"\r\n    },\r\n    preferredDuration: {\r\n      type: \"number\",\r\n      optional: true,\r\n      description: \"Preferred video duration in seconds\"\r\n    },\r\n    vipAllowed: {\r\n      type: \"boolean\",\r\n      optional: true,\r\n      description: \"Whether VIP models are allowed (default: true)\"\r\n    },\r\n    prioritizeQuality: {\r\n      type: \"boolean\",\r\n      optional: true,\r\n      description: \"Prioritize quality over price (default: false)\"\r\n    },\r\n  },\r\n  execute: async ({\r\n    maxPrice,\r\n    preferredDuration,\r\n    vipAllowed = true,\r\n    prioritizeQuality = false,\r\n  }: {\r\n    maxPrice?: number;\r\n    preferredDuration?: number;\r\n    vipAllowed?: boolean;\r\n    prioritizeQuality?: boolean;\r\n  }) => {\r\n    try {\r\n      console.log(\"🎬 🔍 Finding best video model with criteria:\", {\r\n        maxPrice,\r\n        preferredDuration,\r\n        vipAllowed,\r\n        prioritizeQuality,\r\n      });\r\n\r\n      // AICODE-NOTE: Use our new dynamic model discovery system\r\n      const allModels = await getAvailableVideoModels();\r\n      let candidates: any[] = allModels.map((m) => m as any); // Temporary type assertion for build fix\r\n\r\n      // Apply filters\r\n      if (maxPrice) {\r\n        candidates = candidates.filter(\r\n          (m) => (m.params.price_per_second || m.params.price || 0) <= maxPrice\r\n        );\r\n      }\r\n\r\n      if (preferredDuration) {\r\n        candidates = candidates.filter(\r\n          (m) => (m.params.max_duration || 60) >= preferredDuration\r\n        );\r\n      }\r\n\r\n      if (!vipAllowed) {\r\n        candidates = candidates.filter((m) => !m.params.is_vip);\r\n      }\r\n\r\n      if (candidates.length === 0) {\r\n        return {\r\n          success: false,\r\n          message: \"No video model found matching your criteria\",\r\n          suggestion:\r\n            \"Try relaxing your requirements (higher price limit, allow VIP models, etc.)\",\r\n          available_models: allModels.map((m: any) => ({\r\n            id: m.name,\r\n            name: m.name,\r\n            price: m.params.price_per_second || m.params.price || 0,\r\n            max_duration: m.params.max_duration || 60,\r\n            vip: m.params.is_vip || false,\r\n          })),\r\n        };\r\n      }\r\n\r\n      // Sort by preference\r\n      let bestModel: any;\r\n      if (prioritizeQuality) {\r\n        // Sort by price descending (assuming higher price = better quality)\r\n        bestModel = candidates.sort(\r\n          (a: any, b: any) =>\r\n            (b.params.price_per_second || b.params.price || 0) -\r\n            (a.params.price_per_second || a.params.price || 0)\r\n        )[0];\r\n      } else {\r\n        // Sort by price ascending (cheapest first)\r\n        bestModel = candidates.sort(\r\n          (a: any, b: any) =>\r\n            (a.params.price_per_second || a.params.price || 0) -\r\n            (b.params.price_per_second || b.params.price || 0)\r\n        )[0];\r\n      }\r\n\r\n      return {\r\n        success: true,\r\n        data: {\r\n          id: bestModel.name,\r\n          name: bestModel.name,\r\n          description: bestModel.label || bestModel.name,\r\n          price_per_second:\r\n            bestModel.params.price_per_second || bestModel.params.price || 0,\r\n          max_duration: bestModel.params.max_duration || 60,\r\n          max_resolution: {\r\n            width: bestModel.params.max_width || 1920,\r\n            height: bestModel.params.max_height || 1080,\r\n          },\r\n          vip_required: bestModel.params.is_vip || false,\r\n          recommendation_reason: `Selected based on ${prioritizeQuality ? \"quality\" : \"price\"} optimization`,\r\n        },\r\n        message: `Best model found: ${bestModel.name} at $${bestModel.params.price_per_second || bestModel.params.price || 0}/sec`,\r\n        usage_tip: `Use model ID \"${bestModel.name}\" when calling configureVideoGeneration`,\r\n      };\r\n    } catch (error: any) {\r\n      console.error(\"🎬 ❌ Error finding best video model:\", error);\r\n      return {\r\n        success: false,\r\n        error: error?.message || \"Failed to find best video model\",\r\n        message:\r\n          \"Could not find optimal video model. Please check SuperDuperAI API connection.\",\r\n      };\r\n    }\r\n  },\r\n});\r\n","// Placeholder for ai-sdk tool function\r\nconst tool = (config: any) => config;\r\n\r\n// Placeholder types for external dependencies\r\ninterface CreateVideoDocumentParams {\r\n  createDocument: any;\r\n  session?: any;\r\n}\r\n\r\ninterface MediaOption {\r\n  id: string;\r\n  label: string;\r\n  description: string;\r\n}\r\n\r\ninterface VideoGenerationConfig {\r\n  type: string;\r\n  availableResolutions: any[];\r\n  availableStyles: MediaOption[];\r\n  availableShotSizes: any[];\r\n  availableModels: any[];\r\n  availableFrameRates: any[];\r\n  defaultSettings: any;\r\n}\r\n\r\ninterface AdaptedModel {\r\n  id: string;\r\n  name: string;\r\n  label: string;\r\n  description: string;\r\n  value: string;\r\n  workflowPath: string;\r\n  price: number;\r\n  type: any;\r\n  source: any;\r\n}\r\n\r\n// Placeholder enums\r\nenum GenerationTypeEnum {\r\n  TEXT_TO_VIDEO = \"text_to_video\",\r\n  IMAGE_TO_VIDEO = \"image_to_video\",\r\n  TEXT_TO_IMAGE = \"text_to_image\",\r\n  IMAGE_TO_IMAGE = \"image_to_image\",\r\n}\r\n\r\nenum GenerationSourceEnum {\r\n  LOCAL = \"local\",\r\n  FAL_AI = \"fal_ai\",\r\n  GOOGLE_CLOUD = \"google_cloud\",\r\n  AZURE_OPENAI_SORA = \"azure_openai_sora\",\r\n  AZURE_OPENAI_IMAGE = \"azure_openai_image\",\r\n}\r\n\r\n// Placeholder functions\r\nasync function getStyles() {\r\n  return { items: [] };\r\n}\r\n\r\nfunction findStyle(style: string, styles: MediaOption[]) {\r\n  return styles.find(s => s.id === style || s.label === style);\r\n}\r\n\r\nasync function createVideoMediaSettings() {\r\n  return { availableModels: [] };\r\n}\r\n\r\nasync function getBestVideoModel(params: any) {\r\n  return null;\r\n}\r\n\r\n// Placeholder constants\r\nconst VIDEO_RESOLUTIONS: any[] = [];\r\nconst SHOT_SIZES: any[] = [];\r\nconst VIDEO_FRAME_RATES: any[] = [];\r\nconst DEFAULT_VIDEO_RESOLUTION = { label: \"HD\" };\r\nconst DEFAULT_VIDEO_DURATION = 5;\r\n\r\nfunction getModelCompatibleResolutions(modelName: string): any[] {\r\n  return VIDEO_RESOLUTIONS;\r\n}\r\n\r\nfunction getDefaultResolutionForModel(modelName: string): any {\r\n  return DEFAULT_VIDEO_RESOLUTION;\r\n}\r\n\r\nasync function checkBalanceBeforeArtifact(session: any, operation: string, operationType: string, multipliers: string[], operationDisplayName: string): Promise<{ valid: boolean; cost: number; userMessage?: string }> {\r\n  return { valid: true, cost: 0 };\r\n}\r\n\r\nfunction getOperationDisplayName(operationType: string): string {\r\n  return operationType;\r\n}\r\n\r\n// Helper function to convert string source to enum\r\nfunction convertSourceToEnum(source: string): GenerationSourceEnum {\r\n  switch (source) {\r\n    case \"local\":\r\n      return GenerationSourceEnum.LOCAL;\r\n    case \"fal_ai\":\r\n      return GenerationSourceEnum.FAL_AI;\r\n    case \"google_cloud\":\r\n      return GenerationSourceEnum.GOOGLE_CLOUD;\r\n    case \"azure_openai_sora\":\r\n      return GenerationSourceEnum.AZURE_OPENAI_SORA;\r\n    case \"azure_openai_image\":\r\n      return GenerationSourceEnum.AZURE_OPENAI_IMAGE;\r\n    default:\r\n      return GenerationSourceEnum.LOCAL;\r\n  }\r\n}\r\n\r\n// Helper function to convert string type to enum\r\nfunction convertTypeToEnum(type: string): GenerationTypeEnum {\r\n  switch (type) {\r\n    case \"text_to_video\":\r\n      return GenerationTypeEnum.TEXT_TO_VIDEO;\r\n    case \"image_to_video\":\r\n      return GenerationTypeEnum.IMAGE_TO_VIDEO;\r\n    case \"text_to_image\":\r\n      return GenerationTypeEnum.TEXT_TO_IMAGE;\r\n    case \"image_to_image\":\r\n      return GenerationTypeEnum.IMAGE_TO_IMAGE;\r\n    default:\r\n      return GenerationTypeEnum.TEXT_TO_VIDEO;\r\n  }\r\n}\r\n\r\nexport const configureVideoGeneration = (params?: CreateVideoDocumentParams) =>\r\n  tool({\r\n    description:\r\n      \"Configure video generation settings or generate a video directly if prompt is provided. When prompt is provided, this will create a video artifact that shows generation progress in real-time. Available models are loaded dynamically from SuperDuperAI API.\",\r\n    parameters: {\r\n      prompt: {\r\n        type: \"string\",\r\n        optional: true,\r\n        description: \"Detailed description of the video to generate. If provided, will immediately create video artifact and start generation\"\r\n      },\r\n      negativePrompt: {\r\n        type: \"string\",\r\n        optional: true,\r\n        description: \"What to avoid in the video generation\"\r\n      },\r\n      style: {\r\n        type: \"string\",\r\n        optional: true,\r\n        description: \"Style of the video\"\r\n      },\r\n      resolution: {\r\n        type: \"string\",\r\n        optional: true,\r\n        description: 'Video resolution (e.g., \"1344x768\", \"1024x1024\"). Default is HD 1344x768 for cost efficiency.'\r\n      },\r\n      shotSize: {\r\n        type: \"string\",\r\n        optional: true,\r\n        description: \"Shot size for the video (extreme-long-shot, long-shot, medium-shot, medium-close-up, close-up, extreme-close-up, two-shot, detail-shot)\"\r\n      },\r\n      model: {\r\n        type: \"string\",\r\n        optional: true,\r\n        description: 'AI model to use. Models are loaded dynamically from SuperDuperAI API. Use model name like \"LTX\" or full model ID. For image-to-video models (VEO, KLING), a source image is required.'\r\n      },\r\n      frameRate: {\r\n        type: \"number\",\r\n        optional: true,\r\n        description: \"Frame rate in FPS (24, 30, 60, 120)\"\r\n      },\r\n      duration: {\r\n        type: \"number\",\r\n        optional: true,\r\n        description: \"Video duration in seconds. Default is 5 seconds for cost efficiency.\"\r\n      },\r\n      sourceImageId: {\r\n        type: \"string\",\r\n        optional: true,\r\n        description: \"ID of source image for image-to-video models (VEO, KLING). Required for image-to-video generation.\"\r\n      },\r\n      sourceImageUrl: {\r\n        type: \"string\",\r\n        optional: true,\r\n        description: \"URL of source image for image-to-video models. Alternative to sourceImageId.\"\r\n      },\r\n      generationType: {\r\n        type: \"string\",\r\n        enum: [\"text-to-video\", \"image-to-video\"],\r\n        optional: true,\r\n        description: 'Generation mode: \"text-to-video\" for text prompts only, \"image-to-video\" when using source image'\r\n      },\r\n    },\r\n    execute: async ({\r\n      prompt,\r\n      negativePrompt,\r\n      style,\r\n      resolution,\r\n      shotSize,\r\n      model,\r\n      frameRate,\r\n      duration,\r\n      sourceImageId,\r\n      sourceImageUrl,\r\n      generationType,\r\n    }: {\r\n      prompt?: string;\r\n      negativePrompt?: string;\r\n      style?: string;\r\n      resolution?: string;\r\n      shotSize?: string;\r\n      model?: string;\r\n      frameRate?: number;\r\n      duration?: number;\r\n      sourceImageId?: string;\r\n      sourceImageUrl?: string;\r\n      generationType?: string;\r\n    }) => {\r\n      console.log(\"🔧 configureVideoGeneration called with:\", {\r\n        prompt,\r\n        negativePrompt,\r\n        style,\r\n        resolution,\r\n        shotSize,\r\n        model,\r\n        frameRate,\r\n        duration,\r\n      });\r\n      console.log(\"🔧 createDocument available:\", !!params?.createDocument);\r\n\r\n      // AICODE-NOTE: Use economical defaults\r\n      const defaultResolution = DEFAULT_VIDEO_RESOLUTION;\r\n      const defaultStyle: MediaOption = {\r\n        id: \"flux_steampunk\",\r\n        label: \"Steampunk\",\r\n        description: \"Steampunk style\",\r\n      };\r\n      const defaultShotSize =\r\n        SHOT_SIZES.find((s: any) => s.id === \"long-shot\") || SHOT_SIZES[0];\r\n\r\n      // AICODE-NOTE: Load models using new factory pattern\r\n      console.log(\r\n        \"🎬 Loading video models from SuperDuperAI API via factory...\"\r\n      );\r\n      const videoSettings = await createVideoMediaSettings();\r\n      const availableModels = videoSettings.availableModels;\r\n\r\n      console.log(\r\n        \"🎬 ✅ Loaded video models:\",\r\n        availableModels.map((m: any) => m.id)\r\n      );\r\n\r\n      // AICODE-NOTE: Use smart model selection that prioritizes text_to_video models like Sora!\r\n      const bestModel: any = await getBestVideoModel({\r\n        vipAllowed: true,\r\n        requireTextToVideo: true, // Prioritize text_to_video for tools\r\n      }); // Allow VIP models for better defaults\r\n\r\n      const defaultModel: AdaptedModel = bestModel\r\n        ? {\r\n            ...bestModel,\r\n            id: bestModel.name,\r\n            label: bestModel.label || bestModel.name,\r\n            description: `${bestModel.label || bestModel.name} - ${bestModel.type}`,\r\n            value: bestModel.name,\r\n            workflowPath: bestModel.params?.workflow_path || \"\",\r\n            price: bestModel.params?.price_per_second || bestModel.price || 0,\r\n            type: convertTypeToEnum(bestModel.type as string),\r\n            source: convertSourceToEnum(bestModel.source as string),\r\n          }\r\n        : ((availableModels.find((m: any) => m.name === \"azure-openai/sora\") ||\r\n            availableModels[0]) as any as AdaptedModel);\r\n\r\n      console.log(\r\n        \"🎯 Smart default model selected:\",\r\n        defaultModel.label,\r\n        \"(type:\",\r\n        defaultModel.type,\r\n        \")\"\r\n      );\r\n\r\n      let styles: MediaOption[] = [];\r\n\r\n      try {\r\n        const response = await getStyles();\r\n        if (\"error\" in response) {\r\n          console.error(response.error);\r\n        } else {\r\n          styles = response.items.map((style: any) => ({\r\n            id: style.name,\r\n            label: style.title ?? style.name,\r\n            description: style.title ?? style.name,\r\n          }));\r\n        }\r\n      } catch (err) {\r\n        console.log(err);\r\n      }\r\n\r\n      // If no prompt provided, return configuration panel\r\n      if (!prompt) {\r\n        console.log(\r\n          \"🔧 No prompt provided, returning video configuration panel\"\r\n        );\r\n        const config: VideoGenerationConfig = {\r\n          type: \"video-generation-settings\",\r\n          availableResolutions: getModelCompatibleResolutions(\r\n            defaultModel.name || defaultModel.id || \"\"\r\n          ),\r\n          availableStyles: styles,\r\n          availableShotSizes: SHOT_SIZES,\r\n          availableModels: availableModels,\r\n          availableFrameRates: VIDEO_FRAME_RATES,\r\n          defaultSettings: {\r\n            resolution: getDefaultResolutionForModel(\r\n              defaultModel.name || defaultModel.id || \"\"\r\n            ),\r\n            style: defaultStyle,\r\n            shotSize: defaultShotSize,\r\n            model: defaultModel,\r\n            frameRate: 30,\r\n            duration: DEFAULT_VIDEO_DURATION, // 5 seconds for economy\r\n            negativePrompt: \"\",\r\n            seed: undefined,\r\n          },\r\n        };\r\n        return config;\r\n      }\r\n\r\n      console.log(\"🔧 ✅ PROMPT PROVIDED, CREATING VIDEO DOCUMENT:\", prompt);\r\n      console.log(\"🔧 ✅ PARAMS OBJECT:\", !!params);\r\n      console.log(\"🔧 ✅ CREATE DOCUMENT AVAILABLE:\", !!params?.createDocument);\r\n\r\n      if (!params?.createDocument) {\r\n        console.log(\r\n          \"🔧 ❌ createDocument not available, returning basic config\"\r\n        );\r\n        const config: VideoGenerationConfig = {\r\n          type: \"video-generation-settings\",\r\n          availableResolutions: getModelCompatibleResolutions(\r\n            defaultModel.name || defaultModel.id || \"\"\r\n          ),\r\n          availableStyles: styles,\r\n          availableShotSizes: SHOT_SIZES,\r\n          availableModels: availableModels,\r\n          availableFrameRates: VIDEO_FRAME_RATES,\r\n          defaultSettings: {\r\n            resolution: getDefaultResolutionForModel(\r\n              defaultModel.name || defaultModel.id || \"\"\r\n            ),\r\n            style: defaultStyle,\r\n            shotSize: defaultShotSize,\r\n            model: defaultModel,\r\n            frameRate: frameRate || 30,\r\n            duration: duration || DEFAULT_VIDEO_DURATION,\r\n            negativePrompt: negativePrompt || \"\",\r\n            seed: undefined,\r\n          },\r\n        };\r\n        return config;\r\n      }\r\n\r\n      try {\r\n        // Find the selected model first (for resolution compatibility check)\r\n        const selectedModel = model\r\n          ? availableModels.find(\r\n              (m: any) =>\r\n                m.label === model ||\r\n                m.id === model ||\r\n                (m as any).apiName === model\r\n            ) || defaultModel\r\n          : defaultModel;\r\n\r\n        // Get model-compatible resolutions\r\n        const compatibleResolutions = getModelCompatibleResolutions(\r\n          selectedModel.name || selectedModel.id || \"\"\r\n        );\r\n\r\n        // Find the selected resolution, but ensure it's compatible with the model\r\n        let selectedResolution = defaultResolution;\r\n        if (resolution) {\r\n          const requestedResolution = VIDEO_RESOLUTIONS.find(\r\n            (r: any) => r.label === resolution\r\n          );\r\n          if (requestedResolution) {\r\n            // Check if requested resolution is compatible with the model\r\n            const isCompatible = compatibleResolutions.some(\r\n              (r: any) => r.label === requestedResolution.label\r\n            );\r\n            if (isCompatible) {\r\n              selectedResolution = requestedResolution;\r\n            } else {\r\n              // Use model-compatible default instead\r\n              selectedResolution = getDefaultResolutionForModel(\r\n                selectedModel.name || selectedModel.id || \"\"\r\n              );\r\n              console.log(\r\n                `🔧 ⚠️ Resolution ${resolution} not compatible with model ${selectedModel.name}, using ${selectedResolution.label} instead`\r\n              );\r\n            }\r\n          }\r\n        } else {\r\n          // No resolution specified, use model-compatible default\r\n          selectedResolution = getDefaultResolutionForModel(\r\n            selectedModel.name || selectedModel.id || \"\"\r\n          );\r\n        }\r\n\r\n        let selectedStyle: MediaOption = defaultStyle;\r\n        if (style) {\r\n          const foundStyle = findStyle(style, styles);\r\n          if (foundStyle) {\r\n            selectedStyle = foundStyle;\r\n            console.log(\r\n              \"🔧 ✅ STYLE MATCHED:\",\r\n              style,\r\n              \"->\",\r\n              selectedStyle.label\r\n            );\r\n          } else {\r\n            console.log(\r\n              \"🔧 ⚠️ STYLE NOT FOUND:\",\r\n              style,\r\n              \"using default:\",\r\n              defaultStyle.label\r\n            );\r\n            console.log(\r\n              \"🔧 📋 Available styles:\",\r\n              styles\r\n                .map((s) => s.label)\r\n                .slice(0, 5)\r\n                .join(\", \"),\r\n              \"...\"\r\n            );\r\n\r\n            // Additional fallback: try to find the most common style types\r\n            const commonStyleFallbacks = [\r\n              \"flux_steampunk\",\r\n              \"steampunk\",\r\n              \"flux_realistic\",\r\n              \"realistic\",\r\n              \"flux_cinematic\",\r\n              \"cinematic\",\r\n              \"flux_anime\",\r\n              \"anime\",\r\n              \"flux_fantasy\",\r\n              \"fantasy\",\r\n              \"default\",\r\n            ];\r\n\r\n            for (const fallbackId of commonStyleFallbacks) {\r\n              const fallbackStyle = styles.find(\r\n                (s) =>\r\n                  s.id.toLowerCase().includes(fallbackId.toLowerCase()) ||\r\n                  s.label.toLowerCase().includes(fallbackId.toLowerCase())\r\n              );\r\n              if (fallbackStyle) {\r\n                selectedStyle = fallbackStyle;\r\n                console.log(\r\n                  \"🔧 🔄 FALLBACK STYLE FOUND:\",\r\n                  fallbackId,\r\n                  \"->\",\r\n                  selectedStyle.label\r\n                );\r\n                break;\r\n              }\r\n            }\r\n\r\n            // If still no style found, use the first available one\r\n            if (selectedStyle === defaultStyle && styles.length > 0) {\r\n              selectedStyle = styles[0];\r\n              console.log(\r\n                \"🔧 🔄 USING FIRST AVAILABLE STYLE:\",\r\n                selectedStyle.label\r\n              );\r\n            }\r\n          }\r\n        } else {\r\n          // No style specified, try to find a good default from available styles\r\n          const preferredDefaults = [\r\n            \"flux_steampunk\",\r\n            \"steampunk\",\r\n            \"flux_realistic\",\r\n            \"realistic\",\r\n          ];\r\n          for (const preferredId of preferredDefaults) {\r\n            const preferredStyle = styles.find(\r\n              (s) =>\r\n                s.id.toLowerCase().includes(preferredId.toLowerCase()) ||\r\n                s.label.toLowerCase().includes(preferredId.toLowerCase())\r\n            );\r\n            if (preferredStyle) {\r\n              selectedStyle = preferredStyle;\r\n              console.log(\r\n                \"🔧 🎯 USING PREFERRED DEFAULT STYLE:\",\r\n                preferredStyle.label\r\n              );\r\n              break;\r\n            }\r\n          }\r\n\r\n          // If no preferred default found, use first available\r\n          if (selectedStyle === defaultStyle && styles.length > 0) {\r\n            selectedStyle = styles[0];\r\n            console.log(\r\n              \"🔧 🎯 USING FIRST AVAILABLE AS DEFAULT:\",\r\n              selectedStyle.label\r\n            );\r\n          }\r\n        }\r\n\r\n        const selectedShotSize = shotSize\r\n          ? SHOT_SIZES.find((s: any) => s.label === shotSize || s.id === shotSize) ||\r\n            defaultShotSize\r\n          : defaultShotSize;\r\n\r\n        // AICODE-NOTE: Check if selected model is image-to-video based on actual type field from API\r\n        const isImageToVideoModel = selectedModel.type === \"image_to_video\";\r\n\r\n        console.log(\"🔧 🎯 Model type check:\", {\r\n          modelId: selectedModel.id,\r\n          modelName: selectedModel.label,\r\n          apiType: selectedModel.type,\r\n          isImageToVideo: isImageToVideoModel,\r\n        });\r\n\r\n        // AICODE-NOTE: Validate source image for image-to-video models\r\n        if (isImageToVideoModel && !sourceImageId && !sourceImageUrl) {\r\n          return {\r\n            error: `The selected model \"${selectedModel.label}\" is an image-to-video model and requires a source image. Please provide either sourceImageId or sourceImageUrl parameter, or select a text-to-video model.`,\r\n            suggestion:\r\n              \"You can use a recently generated image from this chat as the source, or upload a new image first.\",\r\n            availableTextToVideoModels: availableModels\r\n              .filter(\r\n                (m: any) => m.type === \"text_to_video\" || m.type !== \"image_to_video\"\r\n              )\r\n              .map((m: any) => `${m.label} (${m.id})`),\r\n          };\r\n        }\r\n\r\n        // AICODE-NOTE: Auto-determine generation type for dual-mode compatibility\r\n        const autoGenerationType =\r\n          sourceImageId || sourceImageUrl ? \"image-to-video\" : \"text-to-video\";\r\n        const finalGenerationType = generationType || autoGenerationType;\r\n\r\n        console.log(\"🔧 🎯 Generation type determination:\", {\r\n          provided: generationType,\r\n          autoDetected: autoGenerationType,\r\n          final: finalGenerationType,\r\n          hasSourceImage: !!(sourceImageId || sourceImageUrl),\r\n        });\r\n\r\n        // Create the video document with all parameters\r\n        const videoParams = {\r\n          prompt,\r\n          negativePrompt: negativePrompt || \"\",\r\n          style: selectedStyle,\r\n          resolution: selectedResolution,\r\n          shotSize: selectedShotSize,\r\n          model: selectedModel,\r\n          frameRate: frameRate || 30,\r\n          duration: duration || DEFAULT_VIDEO_DURATION, // Use economical default\r\n          sourceImageId: sourceImageId || undefined,\r\n          sourceImageUrl: sourceImageUrl || undefined,\r\n          generationType: finalGenerationType,\r\n        };\r\n\r\n        console.log(\"🔧 ✅ CREATING VIDEO DOCUMENT WITH PARAMS:\", videoParams);\r\n\r\n        // Check balance before creating artifact\r\n        const operationType =\r\n          finalGenerationType === \"image-to-video\"\r\n            ? \"image-to-video\"\r\n            : \"text-to-video\";\r\n        const multipliers: string[] = [];\r\n\r\n        // Add duration multipliers\r\n        if (duration) {\r\n          if (duration <= 5) multipliers.push(\"duration-5s\");\r\n          else if (duration <= 10) multipliers.push(\"duration-10s\");\r\n          else if (duration <= 15) multipliers.push(\"duration-15s\");\r\n          else if (duration <= 30) multipliers.push(\"duration-30s\");\r\n        } else {\r\n          multipliers.push(\"duration-5s\");\r\n        }\r\n\r\n        // Add quality multipliers\r\n        if (\r\n          selectedResolution.label.includes(\"HD\") ||\r\n          selectedResolution.label.includes(\"720\")\r\n        ) {\r\n          multipliers.push(\"hd-quality\");\r\n        } else if (\r\n          selectedResolution.label.includes(\"4K\") ||\r\n          selectedResolution.label.includes(\"2160\")\r\n        ) {\r\n          multipliers.push(\"4k-quality\");\r\n        }\r\n\r\n        const balanceCheck = await checkBalanceBeforeArtifact(\r\n          params?.session || null,\r\n          \"video-generation\",\r\n          operationType,\r\n          multipliers,\r\n          getOperationDisplayName(operationType)\r\n        );\r\n\r\n        if (!balanceCheck.valid) {\r\n          console.log(\"🔧 ❌ INSUFFICIENT BALANCE, NOT CREATING ARTIFACT\");\r\n          return {\r\n            error:\r\n              balanceCheck.userMessage ||\r\n              \"Недостаточно средств для генерации видео\",\r\n            balanceError: true,\r\n            requiredCredits: balanceCheck.cost,\r\n          };\r\n        }\r\n\r\n        if (params?.createDocument) {\r\n          console.log(\"🔧 ✅ CALLING CREATE DOCUMENT WITH KIND: video\");\r\n          try {\r\n            // Call createDocument with title that contains params for server parsing but shows only prompt to user\r\n            const readableTitle = `Video: \"${prompt}\" ${JSON.stringify(videoParams)}`;\r\n            const result = await params.createDocument.execute({\r\n              title: readableTitle,\r\n              kind: \"video\",\r\n            });\r\n\r\n            console.log(\"🔧 ✅ CREATE DOCUMENT RESULT:\", result);\r\n\r\n            return {\r\n              ...result,\r\n              message: `I'm creating a video with description: \"${prompt}\". Using economical HD settings (${selectedResolution.label}, ${duration || DEFAULT_VIDEO_DURATION}s) for cost efficiency. Artifact created and generation started.`,\r\n            };\r\n          } catch (error) {\r\n            console.error(\"🔧 ❌ CREATE DOCUMENT ERROR:\", error);\r\n            console.error(\r\n              \"🔧 ❌ ERROR STACK:\",\r\n              error instanceof Error ? error.stack : \"No stack\"\r\n            );\r\n            throw error;\r\n          }\r\n        }\r\n\r\n        console.log(\"🔧 ❌ CREATE DOCUMENT NOT AVAILABLE, RETURNING FALLBACK\");\r\n        // Fallback to simple message\r\n        const readableTitle = `Video: \"${prompt}\" ${JSON.stringify(videoParams)}`;\r\n        return {\r\n          message: `I'll create a video with description: \"${prompt}\". However, artifact cannot be created - createDocument unavailable.`,\r\n          parameters: {\r\n            title: readableTitle,\r\n            kind: \"video\",\r\n          },\r\n        };\r\n      } catch (error: any) {\r\n        console.error(\"🔧 ❌ ERROR CREATING VIDEO DOCUMENT:\", error);\r\n        return {\r\n          error: `Failed to create video document: ${error.message}`,\r\n          fallbackConfig: {\r\n            type: \"video-generation-settings\",\r\n            availableResolutions: getModelCompatibleResolutions(\r\n              defaultModel.name || defaultModel.id || \"\"\r\n            ),\r\n            availableStyles: styles,\r\n            availableShotSizes: SHOT_SIZES,\r\n            availableModels: availableModels,\r\n            availableFrameRates: VIDEO_FRAME_RATES,\r\n            defaultSettings: {\r\n              resolution: getDefaultResolutionForModel(\r\n                defaultModel.name || defaultModel.id || \"\"\r\n              ),\r\n              style: defaultStyle,\r\n              shotSize: defaultShotSize,\r\n              model: defaultModel,\r\n              frameRate: frameRate || 30,\r\n              duration: duration || DEFAULT_VIDEO_DURATION,\r\n              negativePrompt: negativePrompt || \"\",\r\n              seed: undefined,\r\n            },\r\n          },\r\n        };\r\n      }\r\n    },\r\n  });\r\n","// Image Generation Tools\r\n\r\n// Placeholder types for AI SDK compatibility\r\ninterface ToolFunction {\r\n  description: string;\r\n  parameters: any;\r\n  execute: (params: any) => Promise<any>;\r\n}\r\n\r\n// Placeholder tool function - this should be imported from the actual application\r\nconst tool = (config: ToolFunction) => config;\r\n\r\n// Placeholder types - these should be imported from the actual application\r\ninterface Session {\r\n  user?: {\r\n    id: string;\r\n    email?: string;\r\n  };\r\n}\r\n\r\ninterface CreateImageDocumentParams {\r\n  createDocument: any;\r\n  session?: Session | null;\r\n  defaultSourceImageUrl?: string;\r\n}\r\n\r\n// Placeholder functions - these should be imported from the actual application\r\nconst getImageGenerationConfig = async () => {\r\n  // This should be imported from the actual application\r\n  return {\r\n    availableModels: [],\r\n    availableResolutions: [],\r\n    availableStyles: [],\r\n  };\r\n};\r\n\r\nconst checkBalanceBeforeArtifact = async (\r\n  session: Session,\r\n  operation: string\r\n) => {\r\n  // This should be imported from the actual application\r\n  return { hasBalance: true };\r\n};\r\n\r\nconst getOperationDisplayName = (operation: string) => {\r\n  // This should be imported from the actual application\r\n  return operation;\r\n};\r\n\r\nexport const configureImageGeneration = (params?: CreateImageDocumentParams) =>\r\n  tool({\r\n    description:\r\n      \"Configure image generation settings or generate an image directly if prompt is provided. Supports text-to-image by default, and image-to-image when a sourceImageUrl is provided. When triggered, creates an image artifact that shows generation progress in real-time.\",\r\n    parameters: {\r\n      prompt: {\r\n        type: \"string\",\r\n        optional: true,\r\n        description:\r\n          \"Detailed description of the image to generate. If provided, will immediately create image artifact and start generation\",\r\n      },\r\n      sourceImageUrl: {\r\n        type: \"string\",\r\n        optional: true,\r\n        description:\r\n          \"Optional source image URL for image-to-image generation (e.g., when the user uploaded an image in chat). If provided, the system will run image-to-image.\",\r\n      },\r\n      style: {\r\n        type: \"string\",\r\n        optional: true,\r\n        description:\r\n          'Style of the image. Supports many formats: \"realistic\", \"cinematic\", \"anime\", \"cartoon\", \"sketch\", \"painting\", \"steampunk\", \"fantasy\", \"sci-fi\", \"horror\", \"minimalist\", \"abstract\", \"portrait\", \"landscape\", and many more available styles',\r\n      },\r\n      resolution: {\r\n        type: \"string\",\r\n        optional: true,\r\n        description:\r\n          'Image resolution. Accepts various formats: \"1920x1080\", \"1920×1080\", \"1920 x 1080\", \"full hd\", \"fhd\", \"1080p\", \"square\", \"vertical\", \"horizontal\", etc.',\r\n      },\r\n      shotSize: {\r\n        type: \"string\",\r\n        optional: true,\r\n        description:\r\n          'Shot size/camera angle. Accepts: \"close-up\", \"medium-shot\", \"long-shot\", \"extreme-close-up\", \"portrait\", \"two-shot\", etc.',\r\n      },\r\n      model: {\r\n        type: \"string\",\r\n        optional: true,\r\n        description:\r\n          'AI model to use. Models are loaded dynamically from SuperDuperAI API. Use model name like \"FLUX\" or full model ID.',\r\n      },\r\n      seed: {\r\n        type: \"number\",\r\n        optional: true,\r\n        description: \"Seed for reproducible results\",\r\n      },\r\n      batchSize: {\r\n        type: \"number\",\r\n        optional: true,\r\n        min: 1,\r\n        max: 3,\r\n        description:\r\n          \"Number of images to generate simultaneously (1-3). Higher batch sizes generate multiple variations at once.\",\r\n      },\r\n    },\r\n    execute: async ({\r\n      prompt,\r\n      sourceImageUrl,\r\n      style,\r\n      resolution,\r\n      shotSize,\r\n      model,\r\n      seed,\r\n      batchSize,\r\n    }: {\r\n      prompt?: string;\r\n      sourceImageUrl?: string;\r\n      style?: string;\r\n      resolution?: string;\r\n      shotSize?: string;\r\n      model?: string;\r\n      seed?: number;\r\n      batchSize?: number;\r\n    }) => {\r\n      console.log(\"🔧 configureImageGeneration called with:\", {\r\n        prompt,\r\n        style,\r\n        resolution,\r\n        shotSize,\r\n        model,\r\n        seed,\r\n        batchSize,\r\n      });\r\n\r\n      // AICODE-NOTE: Use new factory to get configuration with OpenAPI models\r\n      console.log(\"🖼️ Loading image configuration from OpenAPI factory...\");\r\n      const config = await getImageGenerationConfig();\r\n\r\n      console.log(\"🖼️ ✅ Loaded image config:\", {\r\n        modelsCount: config.availableModels.length,\r\n        resolutionsCount: config.availableResolutions.length,\r\n        stylesCount: config.availableStyles.length,\r\n      });\r\n\r\n      // If no prompt provided, return configuration panel\r\n      if (!prompt) {\r\n        console.log(\"🖼️ No prompt provided, returning configuration panel\");\r\n        return {\r\n          type: \"configuration_panel\",\r\n          message:\r\n            \"Image generation configuration panel opened. Please provide a prompt to generate an image.\",\r\n          config: {\r\n            availableModels: config.availableModels,\r\n            availableResolutions: config.availableResolutions,\r\n            availableStyles: config.availableStyles,\r\n          },\r\n        };\r\n      }\r\n\r\n      // Check balance before proceeding\r\n      if (params?.session) {\r\n        const balanceCheck = await checkBalanceBeforeArtifact(\r\n          params.session,\r\n          \"image_generation\"\r\n        );\r\n        if (!balanceCheck.hasBalance) {\r\n          return {\r\n            error: \"Insufficient balance for image generation\",\r\n            operation: getOperationDisplayName(\"image_generation\"),\r\n          };\r\n        }\r\n      }\r\n\r\n      // Create image artifact and start generation\r\n      console.log(\"🖼️ Creating image artifact and starting generation...\");\r\n\r\n      // This is a placeholder implementation\r\n      // In the actual application, this would create an artifact and start the generation process\r\n      return {\r\n        type: \"image_generation_started\",\r\n        message: \"Image generation started successfully\",\r\n        prompt,\r\n        sourceImageUrl,\r\n        style,\r\n        resolution,\r\n        shotSize,\r\n        model,\r\n        seed,\r\n        batchSize,\r\n        artifactId: \"placeholder-artifact-id\",\r\n      };\r\n    },\r\n  });\r\n","// AI Tools for document creation and management\r\n\r\n// Placeholder types for AI SDK compatibility\r\ninterface DataStreamWriter {\r\n  writeData: (data: { type: string; content: any }) => void;\r\n}\r\n\r\ninterface ToolFunction {\r\n  description: string;\r\n  parameters: any;\r\n  execute: (params: any) => Promise<any>;\r\n}\r\n\r\n// Placeholder tool function - this should be imported from the actual application\r\nconst tool = (config: ToolFunction) => config;\r\n\r\n// Placeholder types - these should be imported from the actual application\r\ninterface Document {\r\n  id: string;\r\n  title: string;\r\n  kind: string;\r\n  content?: string;\r\n  createdAt: Date;\r\n}\r\n\r\ninterface Suggestion {\r\n  id: string;\r\n  documentId: string;\r\n  originalText: string;\r\n  suggestedText: string;\r\n  description: string;\r\n  isResolved: boolean;\r\n}\r\n\r\ninterface Session {\r\n  user?: {\r\n    id: string;\r\n    email?: string;\r\n  };\r\n}\r\n\r\n// Placeholder functions - these should be imported from the actual application\r\nconst generateUUID = (): string => {\r\n  return Math.random().toString(36).substring(2) + Date.now().toString(36);\r\n};\r\n\r\nconst getDocumentById = async ({\r\n  id,\r\n}: {\r\n  id: string;\r\n}): Promise<Document | null> => {\r\n  // This should be imported from the actual application\r\n  return null;\r\n};\r\n\r\nconst saveSuggestions = async ({\r\n  suggestions,\r\n}: {\r\n  suggestions: any[];\r\n}): Promise<void> => {\r\n  // This should be imported from the actual application\r\n};\r\n\r\nconst documentHandlersByArtifactKind: Array<{\r\n  kind: string;\r\n  onCreateDocument: (params: any) => Promise<void>;\r\n  onUpdateDocument: (params: any) => Promise<void>;\r\n}> = [\r\n  // This should be imported from the actual application\r\n];\r\n\r\nconst artifactKinds = [\"text\", \"sheet\", \"image\", \"video\", \"script\"] as const;\r\n\r\ninterface CreateDocumentProps {\r\n  session: Session;\r\n  dataStream: DataStreamWriter;\r\n}\r\n\r\nexport const createDocument = ({ session, dataStream }: CreateDocumentProps) =>\r\n  tool({\r\n    description:\r\n      \"Create a document for a writing or content creation activities. This tool will call other functions that will generate the contents of the document based on the title and kind.\",\r\n    parameters: {\r\n      title: { type: \"string\" },\r\n      kind: { type: \"string\", enum: artifactKinds },\r\n      content: { type: \"string\", optional: true },\r\n    },\r\n    execute: async ({\r\n      title,\r\n      kind,\r\n      content,\r\n    }: {\r\n      title: string;\r\n      kind: string;\r\n      content?: string;\r\n    }) => {\r\n      console.log(\"📄 ===== CREATE DOCUMENT TOOL CALLED =====\");\r\n      console.log(\"📄 KIND:\", kind);\r\n      console.log(\"📄 TITLE (first 100 chars):\", title.substring(0, 100));\r\n      console.log(\"📄 CONTENT provided:\", content ? \"Yes\" : \"No\");\r\n      console.log(\"📄 CONTENT length:\", content?.length || 0);\r\n\r\n      const id = generateUUID();\r\n      console.log(\"📄 GENERATED ID:\", id);\r\n\r\n      console.log(\"📄 ✅ WRITING KIND TO DATA STREAM...\");\r\n      dataStream.writeData({\r\n        type: \"kind\",\r\n        content: kind,\r\n      });\r\n\r\n      console.log(\"📄 ✅ WRITING ID TO DATA STREAM...\");\r\n      dataStream.writeData({\r\n        type: \"id\",\r\n        content: id,\r\n      });\r\n\r\n      console.log(\"📄 ✅ WRITING TITLE TO DATA STREAM...\");\r\n      dataStream.writeData({\r\n        type: \"title\",\r\n        content: title,\r\n      });\r\n\r\n      console.log(\"📄 ✅ WRITING CLEAR TO DATA STREAM...\");\r\n      dataStream.writeData({\r\n        type: \"clear\",\r\n        content: \"\",\r\n      });\r\n\r\n      console.log(\"📄 🔍 LOOKING FOR DOCUMENT HANDLER FOR KIND:\", kind);\r\n      console.log(\r\n        \"📄 📋 AVAILABLE HANDLERS:\",\r\n        documentHandlersByArtifactKind.map((h) => h.kind)\r\n      );\r\n\r\n      const documentHandler = documentHandlersByArtifactKind.find(\r\n        (documentHandlerByArtifactKind) =>\r\n          documentHandlerByArtifactKind.kind === kind\r\n      );\r\n\r\n      if (!documentHandler) {\r\n        console.error(\"📄 ❌ NO DOCUMENT HANDLER FOUND FOR KIND:\", kind);\r\n        throw new Error(`No document handler found for kind: ${kind}`);\r\n      }\r\n\r\n      console.log(\"📄 ✅ FOUND DOCUMENT HANDLER, CALLING onCreateDocument...\");\r\n\r\n      try {\r\n        await documentHandler.onCreateDocument({\r\n          id,\r\n          title,\r\n          content,\r\n          dataStream,\r\n          session,\r\n        });\r\n        console.log(\"📄 ✅ DOCUMENT HANDLER COMPLETED SUCCESSFULLY\");\r\n      } catch (error) {\r\n        console.error(\"📄 ❌ DOCUMENT HANDLER ERROR:\", error);\r\n        console.error(\r\n          \"📄 ❌ ERROR STACK:\",\r\n          error instanceof Error ? error.stack : \"No stack\"\r\n        );\r\n        throw error;\r\n      }\r\n\r\n      console.log(\"📄 ✅ WRITING FINISH TO DATA STREAM...\");\r\n      dataStream.writeData({ type: \"finish\", content: \"\" });\r\n\r\n      const result = {\r\n        id,\r\n        title,\r\n        kind,\r\n        content: \"Document created successfully\",\r\n      };\r\n\r\n      console.log(\"📄 ✅ FINAL RESULT:\", result);\r\n      return result;\r\n    },\r\n  });\r\n\r\ninterface UpdateDocumentProps {\r\n  session: Session;\r\n  dataStream: DataStreamWriter;\r\n}\r\n\r\nexport const updateDocument = ({ session, dataStream }: UpdateDocumentProps) =>\r\n  tool({\r\n    description: \"Update a document with the given description.\",\r\n    parameters: {\r\n      id: { type: \"string\", description: \"The ID of the document to update\" },\r\n      description: {\r\n        type: \"string\",\r\n        description: \"The description of changes that need to be made\",\r\n      },\r\n    },\r\n    execute: async ({\r\n      id,\r\n      description,\r\n    }: {\r\n      id: string;\r\n      description: string;\r\n    }) => {\r\n      const document = await getDocumentById({ id });\r\n\r\n      if (!document) {\r\n        return {\r\n          error: \"Document not found\",\r\n        };\r\n      }\r\n\r\n      dataStream.writeData({\r\n        type: \"clear\",\r\n        content: document.title,\r\n      });\r\n\r\n      const documentHandler = documentHandlersByArtifactKind.find(\r\n        (documentHandlerByArtifactKind) =>\r\n          documentHandlerByArtifactKind.kind === document.kind\r\n      );\r\n\r\n      if (!documentHandler) {\r\n        throw new Error(`No document handler found for kind: ${document.kind}`);\r\n      }\r\n\r\n      await documentHandler.onUpdateDocument({\r\n        document,\r\n        description,\r\n        dataStream,\r\n        session,\r\n      });\r\n\r\n      dataStream.writeData({ type: \"finish\", content: \"\" });\r\n\r\n      return {\r\n        id,\r\n        title: document.title,\r\n        kind: document.kind,\r\n        content: \"The document has been updated successfully.\",\r\n      };\r\n    },\r\n  });\r\n\r\ninterface RequestSuggestionsProps {\r\n  session: Session;\r\n  dataStream: DataStreamWriter;\r\n}\r\n\r\nexport const requestSuggestions = ({\r\n  session,\r\n  dataStream,\r\n}: RequestSuggestionsProps) =>\r\n  tool({\r\n    description: \"Request suggestions for a document\",\r\n    parameters: {\r\n      documentId: {\r\n        type: \"string\",\r\n        description: \"The ID of the document to request edits\",\r\n      },\r\n    },\r\n    execute: async ({ documentId }: { documentId: string }) => {\r\n      const document = await getDocumentById({ id: documentId });\r\n\r\n      if (!document || !document.content) {\r\n        return {\r\n          error: \"Document not found\",\r\n        };\r\n      }\r\n\r\n      const suggestions: Array<\r\n        Omit<Suggestion, \"userId\" | \"createdAt\" | \"documentCreatedAt\">\r\n      > = [];\r\n\r\n      // Note: This requires myProvider to be available\r\n      // For now, we'll create a placeholder implementation\r\n      const mockSuggestions = [\r\n        {\r\n          originalText: \"This is a sample sentence.\",\r\n          suggestedText: \"This is an improved sample sentence.\",\r\n          description: \"Enhanced clarity and flow\",\r\n          id: generateUUID(),\r\n          documentId: documentId,\r\n          isResolved: false,\r\n        },\r\n      ];\r\n\r\n      for (const suggestion of mockSuggestions) {\r\n        dataStream.writeData({\r\n          type: \"suggestion\",\r\n          content: suggestion,\r\n        });\r\n\r\n        suggestions.push(suggestion);\r\n      }\r\n\r\n      if (session.user?.id) {\r\n        const userId = session.user.id;\r\n\r\n        await saveSuggestions({\r\n          suggestions: suggestions.map((suggestion) => ({\r\n            ...suggestion,\r\n            userId,\r\n            createdAt: new Date(),\r\n            documentCreatedAt: document.createdAt,\r\n          })),\r\n        });\r\n      }\r\n\r\n      return {\r\n        id: documentId,\r\n        title: document.title,\r\n        kind: document.kind,\r\n        message: \"Suggestions have been added to the document\",\r\n      };\r\n    },\r\n  });\r\n","import { z } from 'zod';\r\nimport { superDuperAIClient } from '@turbo-super/api';\r\n\r\n// Schema for prompt enhancement\r\nexport const enhancePromptSchema = z.object({\r\n  originalPrompt: z.string().describe('The original prompt text that needs enhancement. Can be in any language, simple or complex.'),\r\n  mediaType: z.enum(['image', 'video', 'text', 'general']).optional().describe('The type of content being generated. Helps optimize the prompt for specific AI models.'),\r\n  enhancementLevel: z.enum(['basic', 'detailed', 'creative']).optional().describe('Level of enhancement: basic (translation + cleanup), detailed (add structure + quality terms), creative (add artistic style + composition details)'),\r\n  targetAudience: z.string().optional().describe('Target audience or use case (e.g., \"professional presentation\", \"social media\", \"artistic portfolio\")'),\r\n  includeNegativePrompt: z.boolean().optional().describe('Whether to generate a negative prompt for what to avoid (useful for image/video generation)'),\r\n  modelHint: z.string().optional().describe('Specific AI model being used (e.g., \"FLUX\", \"Sora\", \"VEO2\") to optimize prompt for that model'),\r\n});\r\n\r\nexport type EnhancePromptParams = z.infer<typeof enhancePromptSchema>;\r\n\r\nexport interface EnhancedPromptResult {\r\n  originalPrompt: string;\r\n  enhancedPrompt: string;\r\n  negativePrompt?: string;\r\n  mediaType: string;\r\n  enhancementLevel: string;\r\n  modelHint?: string;\r\n  improvements: string[];\r\n  reasoning: string;\r\n  usage: {\r\n    copyPrompt: string;\r\n    negativePrompt?: string;\r\n  };\r\n}\r\n\r\nexport class PromptEnhancementTool {\r\n  private client = superDuperAIClient;\r\n\r\n  /**\r\n   * Enhance a prompt using AI\r\n   */\r\n  async enhancePrompt(params: EnhancePromptParams): Promise<EnhancedPromptResult> {\r\n    try {\r\n      // Validate input\r\n      const validatedParams = enhancePromptSchema.parse(params);\r\n\r\n      // Prepare enhancement request\r\n      const enhancementRequest = {\r\n        originalPrompt: validatedParams.originalPrompt,\r\n        mediaType: validatedParams.mediaType || 'general',\r\n        enhancementLevel: validatedParams.enhancementLevel || 'detailed',\r\n        targetAudience: validatedParams.targetAudience,\r\n        includeNegativePrompt: validatedParams.includeNegativePrompt || false,\r\n        modelHint: validatedParams.modelHint\r\n      };\r\n\r\n      // Make API request to enhance prompt\r\n      const response = await this.client.request<{\r\n        enhancedPrompt: string;\r\n        negativePrompt?: string;\r\n        improvements: string[];\r\n        reasoning: string;\r\n      }>({\r\n        method: 'POST',\r\n        url: '/ai/enhance-prompt',\r\n        data: enhancementRequest,\r\n      });\r\n\r\n      return {\r\n        originalPrompt: validatedParams.originalPrompt,\r\n        enhancedPrompt: response.enhancedPrompt,\r\n        negativePrompt: response.negativePrompt,\r\n        mediaType: validatedParams.mediaType || 'general',\r\n        enhancementLevel: validatedParams.enhancementLevel || 'detailed',\r\n        modelHint: validatedParams.modelHint,\r\n        improvements: response.improvements || [],\r\n        reasoning: response.reasoning || '',\r\n        usage: {\r\n          copyPrompt: 'Copy the enhanced prompt to use in image/video generation tools',\r\n          negativePrompt: response.negativePrompt ? 'Use the negative prompt to avoid unwanted elements' : undefined\r\n        }\r\n      };\r\n    } catch (error) {\r\n      throw new Error(\r\n        `Prompt enhancement failed: ${error instanceof Error ? error.message : 'Unknown error'}`\r\n      );\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Build system prompt for enhancement\r\n   */\r\n  private buildSystemPrompt(mediaType: string, enhancementLevel: string, modelHint?: string): string {\r\n    const basePrompt = `You are a professional prompt engineering expert specializing in improving prompts for AI generation. Your task is to enhance user prompts to achieve the best possible results.\r\n\r\nCORE RESPONSIBILITIES:\r\n1. Translate non-English text to English while preserving meaning and intent\r\n2. Apply prompt engineering best practices (specificity, clarity, quality keywords)\r\n3. Optimize for the target media type and AI model\r\n4. Structure prompts for maximum effectiveness\r\n\r\nENHANCEMENT PRINCIPLES:\r\n- Keep the original creative intent intact\r\n- Add relevant technical terms and quality descriptors\r\n- Optimize for the specific AI model if provided\r\n- Consider the target media type requirements\r\n- Maintain natural, readable language`;\r\n\r\n    const mediaSpecific = this.getMediaSpecificInstructions(mediaType);\r\n    const levelSpecific = this.getLevelSpecificInstructions(enhancementLevel);\r\n    const modelSpecific = modelHint ? this.getModelSpecificInstructions(modelHint) : '';\r\n\r\n    return `${basePrompt}\r\n\r\n${mediaSpecific}\r\n\r\n${levelSpecific}\r\n\r\n${modelSpecific}\r\n\r\nRESPONSE FORMAT:\r\nReturn a JSON object with:\r\n- enhancedPrompt: The improved prompt\r\n- negativePrompt: What to avoid (if requested)\r\n- improvements: List of specific improvements made\r\n- reasoning: Brief explanation of changes`;\r\n  }\r\n\r\n  /**\r\n   * Get media-specific enhancement instructions\r\n   */\r\n  private getMediaSpecificInstructions(mediaType: string): string {\r\n    switch (mediaType) {\r\n      case 'image':\r\n        return `IMAGE GENERATION OPTIMIZATION:\r\n- Add visual descriptors (lighting, composition, style, mood)\r\n- Include technical parameters (resolution, aspect ratio, quality)\r\n- Specify artistic style and technique\r\n- Add environmental and atmospheric details`;\r\n      case 'video':\r\n        return `VIDEO GENERATION OPTIMIZATION:\r\n- Include motion and temporal elements\r\n- Specify camera angles and movement\r\n- Add scene composition and pacing\r\n- Include audio and visual effects considerations`;\r\n      case 'text':\r\n        return `TEXT GENERATION OPTIMIZATION:\r\n- Add structure and organization elements\r\n- Specify tone, style, and voice\r\n- Include context and audience considerations\r\n- Add formatting and presentation details`;\r\n      default:\r\n        return `GENERAL OPTIMIZATION:\r\n- Focus on clarity and specificity\r\n- Add relevant context and details\r\n- Optimize for general AI model understanding`;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get level-specific enhancement instructions\r\n   */\r\n  private getLevelSpecificInstructions(level: string): string {\r\n    switch (level) {\r\n      case 'basic':\r\n        return `BASIC ENHANCEMENT:\r\n- Translate to English if needed\r\n- Clean up grammar and spelling\r\n- Add basic quality descriptors\r\n- Maintain simplicity and clarity`;\r\n      case 'detailed':\r\n        return `DETAILED ENHANCEMENT:\r\n- Add comprehensive visual/contextual details\r\n- Include technical specifications\r\n- Optimize for professional results\r\n- Balance detail with readability`;\r\n      case 'creative':\r\n        return `CREATIVE ENHANCEMENT:\r\n- Add artistic and stylistic elements\r\n- Include mood and atmosphere details\r\n- Enhance creative expression\r\n- Add inspirational and evocative language`;\r\n      default:\r\n        return `STANDARD ENHANCEMENT:\r\n- Apply balanced improvements\r\n- Focus on clarity and effectiveness\r\n- Maintain original intent`;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get model-specific optimization instructions\r\n   */\r\n  private getModelSpecificInstructions(model: string): string {\r\n    const modelLower = model.toLowerCase();\r\n    \r\n    if (modelLower.includes('flux')) {\r\n      return `FLUX MODEL OPTIMIZATION:\r\n- Focus on artistic and creative elements\r\n- Include style and technique specifications\r\n- Optimize for visual quality and composition\r\n- Add relevant artistic terminology`;\r\n    } else if (modelLower.includes('veo') || modelLower.includes('sora')) {\r\n      return `VIDEO MODEL OPTIMIZATION:\r\n- Emphasize motion and temporal elements\r\n- Include scene composition details\r\n- Add camera and cinematography elements\r\n- Specify visual effects and transitions`;\r\n    } else if (modelLower.includes('dalle') || modelLower.includes('midjourney')) {\r\n      return `IMAGE MODEL OPTIMIZATION:\r\n- Focus on visual composition and style\r\n- Include artistic and technical details\r\n- Add quality and resolution specifications\r\n- Optimize for visual impact`;\r\n    }\r\n    \r\n    return `GENERAL MODEL OPTIMIZATION:\r\n- Apply standard prompt engineering practices\r\n- Focus on clarity and specificity\r\n- Optimize for general AI understanding`;\r\n  }\r\n}\r\n\r\n// Export default instance\r\nexport const promptEnhancementTool = new PromptEnhancementTool();\r\n","import React from \"react\";\r\nimport {\r\n  ImageIcon,\r\n  VideoIcon,\r\n  Wand2Icon,\r\n  SparklesIcon,\r\n  ZapIcon,\r\n  PlayIcon,\r\n  LanguagesIcon,\r\n  ImagesIcon,\r\n} from \"lucide-react\";\r\nimport { cn } from \"@turbo-super/ui\";\r\n\r\ninterface ToolIconProps {\r\n  name:\r\n    | \"image\"\r\n    | \"video\"\r\n    | \"wand\"\r\n    | \"sparkles\"\r\n    | \"zap\"\r\n    | \"play\"\r\n    | \"languages\"\r\n    | \"gallery\";\r\n  className?: string;\r\n}\r\n\r\nconst iconMap = {\r\n  image: ImageIcon,\r\n  video: VideoIcon,\r\n  wand: Wand2Icon,\r\n  sparkles: SparklesIcon,\r\n  zap: ZapIcon,\r\n  play: PlayIcon,\r\n  languages: LanguagesIcon,\r\n  gallery: ImagesIcon,\r\n};\r\n\r\nexport const ToolIcon: React.FC<ToolIconProps> = ({ name, className }) => {\r\n  const IconComponent = iconMap[name];\r\n\r\n  if (!IconComponent) {\r\n    console.warn(`Unknown icon name: ${name}`);\r\n    return null;\r\n  }\r\n\r\n  return <IconComponent className={cn(\"size-4\", className)} />;\r\n};\r\n","import Link from \"next/link\";\r\nimport {\r\n  Card,\r\n  CardContent,\r\n  CardDescription,\r\n  CardHeader,\r\n  CardTitle,\r\n  Button,\r\n} from \"@turbo-super/ui\";\r\nimport { ToolIcon } from \"./tool-icon\";\r\nimport { ToolConfig } from \"../types\";\r\nimport { FC } from \"react\";\r\n\r\ninterface ToolsGridProps {\r\n  tools: ToolConfig[];\r\n  className?: string;\r\n}\r\n\r\nexport const ToolsGrid: FC<ToolsGridProps> = ({ tools, className }) => {\r\n  return (\r\n    <div\r\n      className={`grid md:grid-cols-2 lg:grid-cols-3 gap-6 ${className || \"\"}`}\r\n    >\r\n      {tools.map((tool) => (\r\n        <Link\r\n          key={tool.id}\r\n          href={tool.href}\r\n        >\r\n          <Card className=\"hover:shadow-lg transition-all duration-200 hover:scale-[1.02] cursor-pointer group\">\r\n            <CardHeader className=\"text-center\">\r\n              <div className=\"flex items-center justify-center mb-4\">\r\n                <div\r\n                  className={`p-4 rounded-full bg-${tool.bgColor} group-hover:bg-${tool.hoverBgColor} transition-colors`}\r\n                >\r\n                  <ToolIcon\r\n                    name={tool.iconName}\r\n                    className={`size-8 text-${tool.primaryColor}`}\r\n                  />\r\n                </div>\r\n              </div>\r\n              <CardTitle className=\"text-2xl\">{tool.name}</CardTitle>\r\n              <CardDescription className=\"text-base\">\r\n                {tool.description}\r\n              </CardDescription>\r\n            </CardHeader>\r\n            <CardContent>\r\n              <div className=\"space-y-4\">\r\n                <div className=\"flex items-center justify-center space-x-6 text-sm text-muted-foreground\">\r\n                  {tool.features.map((feature, index) => (\r\n                    <div\r\n                      key={index}\r\n                      className=\"flex items-center space-x-2\"\r\n                    >\r\n                      <ToolIcon name={feature.iconName} />\r\n                      <span>{feature.label}</span>\r\n                    </div>\r\n                  ))}\r\n                </div>\r\n                <Button\r\n                  className={`w-full group-hover:bg-${tool.hoverColor}`}\r\n                  size=\"lg\"\r\n                >\r\n                  <ToolIcon\r\n                    name={tool.iconName}\r\n                    className=\"size-4 mr-2\"\r\n                  />\r\n                  {tool.id === \"image-generator\"\r\n                    ? \"Generate Images\"\r\n                    : tool.id === \"video-generator\"\r\n                      ? \"Generate Videos\"\r\n                      : \"Enhance Prompts\"}\r\n                </Button>\r\n              </div>\r\n            </CardContent>\r\n          </Card>\r\n        </Link>\r\n      ))}\r\n    </div>\r\n  );\r\n};\r\n","import { ToolConfig } from \"../types\";\r\n\r\nexport const TOOLS_CONFIG: ToolConfig[] = [\r\n  {\r\n    id: \"image-generator\",\r\n    name: \"Image Generator\",\r\n    description:\r\n      \"Generate high-quality images using AI models like FLUX Pro, FLUX Dev, and more from SuperDuperAI\",\r\n    shortDescription: \"AI Image Generator\",\r\n    iconName: \"image\",\r\n    href: \"/tools/image-generator\",\r\n    category: \"generation\",\r\n    features: [\r\n      { iconName: \"sparkles\", label: \"Professional Quality\" },\r\n      { iconName: \"zap\", label: \"Real-time Progress\" },\r\n    ],\r\n    primaryColor: \"blue-600\",\r\n    hoverColor: \"blue-600\",\r\n    bgColor: \"blue-100\",\r\n    hoverBgColor: \"blue-200\",\r\n  },\r\n  {\r\n    id: \"video-generator\",\r\n    name: \"Video Generator\",\r\n    description:\r\n      \"Generate high-quality videos using AI models like VEO3, KLING, LTX, and more from SuperDuperAI\",\r\n    shortDescription: \"AI Video Generator\",\r\n    iconName: \"video\",\r\n    href: \"/tools/video-generator\",\r\n    category: \"generation\",\r\n    features: [\r\n      { iconName: \"play\", label: \"Professional Quality\" },\r\n      { iconName: \"zap\", label: \"Real-time Progress\" },\r\n    ],\r\n    primaryColor: \"purple-600\",\r\n    hoverColor: \"purple-600\",\r\n    bgColor: \"purple-100\",\r\n    hoverBgColor: \"purple-200\",\r\n  },\r\n  {\r\n    id: \"prompt-enhancer\",\r\n    name: \"Prompt Enhancer\",\r\n    description:\r\n      \"Transform simple prompts into detailed, professional descriptions for better AI generation results\",\r\n    shortDescription: \"AI Prompt Enhancer\",\r\n    iconName: \"wand\",\r\n    href: \"/tools/prompt-enhancer\",\r\n    category: \"enhancement\",\r\n    features: [\r\n      { iconName: \"languages\", label: \"Auto Translation\" },\r\n      { iconName: \"sparkles\", label: \"Smart Enhancement\" },\r\n    ],\r\n    primaryColor: \"pink-600\",\r\n    hoverColor: \"pink-600\",\r\n    bgColor: \"pink-100\",\r\n    hoverBgColor: \"pink-200\",\r\n  },\r\n  {\r\n    id: \"prompt-enhancer-veo3\",\r\n    name: \"Prompt Enhancer Veo3\",\r\n    description:\r\n      \"Transform simple prompts into detailed, professional descriptions for better AI generation results\",\r\n    shortDescription: \"AI Prompt Enhancer VEO3\",\r\n    iconName: \"wand\",\r\n    href: \"/tools/prompt-enhancer-veo3\",\r\n    category: \"enhancement\",\r\n    features: [\r\n      { iconName: \"languages\", label: \"Auto Translation\" },\r\n      { iconName: \"sparkles\", label: \"Smart Enhancement\" },\r\n    ],\r\n    primaryColor: \"pink-600\",\r\n    hoverColor: \"pink-600\",\r\n    bgColor: \"pink-100\",\r\n    hoverBgColor: \"pink-200\",\r\n  },\r\n  {\r\n    id: \"script-generator\",\r\n    name: \"Script Generator\",\r\n    description:\r\n      \"Generate detailed scripts and scenarios in Markdown format using AI. Edit and refine your script with a powerful Markdown editor.\",\r\n    shortDescription: \"AI Script Generator\",\r\n    iconName: \"wand\",\r\n    href: \"/tools/script-generator\",\r\n    category: \"generation\",\r\n    features: [\r\n      { iconName: \"sparkles\", label: \"Markdown Output\" },\r\n      { iconName: \"sparkles\", label: \"Script Structuring\" },\r\n    ],\r\n    primaryColor: \"green-600\",\r\n    hoverColor: \"green-600\",\r\n    bgColor: \"green-100\",\r\n    hoverBgColor: \"green-200\",\r\n  },\r\n  {\r\n    id: \"gallery\",\r\n    name: \"Artifact Gallery\",\r\n    description:\r\n      \"Browse and discover AI-generated images, videos, text documents, and spreadsheets. View your own creations or explore public artifacts from the community.\",\r\n    shortDescription: \"Artifacts\",\r\n    iconName: \"image\",\r\n    href: \"/gallery\",\r\n    category: \"gallery\",\r\n    features: [\r\n      { iconName: \"sparkles\", label: \"All Artifact Types\" },\r\n      { iconName: \"zap\", label: \"Advanced Search & Filters\" },\r\n    ],\r\n    primaryColor: \"indigo-600\",\r\n    hoverColor: \"indigo-600\",\r\n    bgColor: \"indigo-100\",\r\n    hoverBgColor: \"indigo-200\",\r\n  },\r\n];\r\n\r\n// Helper functions\r\nexport const getToolById = (id: string): ToolConfig | undefined => {\r\n  return TOOLS_CONFIG.find((tool) => tool.id === id);\r\n};\r\n\r\nexport const getToolByHref = (href: string): ToolConfig | undefined => {\r\n  return TOOLS_CONFIG.find((tool) => tool.href === href);\r\n};\r\n\r\nexport const getToolsByCategory = (\r\n  category: ToolConfig[\"category\"]\r\n): ToolConfig[] => {\r\n  return TOOLS_CONFIG.filter((tool) => tool.category === category);\r\n};\r\n\r\n// For navigation components\r\nexport const getToolNavigation = () => {\r\n  return TOOLS_CONFIG.map((tool) => ({\r\n    id: tool.id,\r\n    name: tool.name,\r\n    shortName: tool.shortDescription || tool.name,\r\n    iconName: tool.iconName,\r\n    href: tool.href,\r\n  }));\r\n};\r\n\r\n// For breadcrumb navigation\r\nexport const getToolDisplayName = (pathname: string): string => {\r\n  const tool = TOOLS_CONFIG.find((tool) => pathname.includes(tool.href));\r\n  return tool?.name || \"Unknown Tool\";\r\n};\r\n","import React from \"react\";\r\nimport { ToolsGrid } from \"./tools-grid\";\r\nimport { TOOLS_CONFIG } from \"../config/tools-config\";\r\n\r\ninterface ToolsPageProps {\r\n  title?: string;\r\n  description?: string;\r\n  className?: string;\r\n}\r\n\r\nexport const ToolsPage: React.FC<ToolsPageProps> = ({\r\n  title = \"AI Tools\",\r\n  description = \"Powerful AI-powered tools for generating high-quality images, videos, and enhancing your prompts. Choose the tool that fits your creative needs.\",\r\n  className = \"\",\r\n}) => {\r\n  return (\r\n    <div className={`min-h-screen bg-background ${className}`}>\r\n      <div className=\"container mx-auto px-4 py-8\">\r\n        <div className=\"max-w-4xl mx-auto space-y-8\">\r\n          {/* Main content */}\r\n          <div className=\"text-center space-y-4\">\r\n            <h1 className=\"text-4xl font-bold bg-gradient-to-r from-blue-600 to-purple-600 bg-clip-text text-transparent\">\r\n              {title}\r\n            </h1>\r\n            <p className=\"text-lg text-muted-foreground max-w-2xl mx-auto\">\r\n              {description}\r\n            </p>\r\n          </div>\r\n\r\n          {/* Tools grid */}\r\n          <ToolsGrid\r\n            tools={TOOLS_CONFIG}\r\n            className=\"mt-12\"\r\n          />\r\n\r\n          {/* Footer info */}\r\n          <div className=\"text-center text-sm text-muted-foreground border-t pt-8 mt-12\">\r\n            <p>\r\n              Powered by <strong>SuperDuperAI</strong> • State-of-the-art AI\r\n              models for creative content generation • Fast, reliable, and\r\n              high-quality results\r\n            </p>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n","\"use client\";\r\n\r\nimport { useState, useCallback } from \"react\";\r\nimport {\r\n  ImageGenerationParams,\r\n  ImageGenerationResult,\r\n} from \"../../image-generation/types\";\r\nimport { GenerationStatus } from \"../types\";\r\n\r\nexport interface UseImageGeneratorOptions {\r\n  onGenerate?: (params: ImageGenerationParams) => Promise<ImageGenerationResult>;\r\n  onError?: (error: string) => void;\r\n  onSuccess?: (image: ImageGenerationResult) => void;\r\n}\r\n\r\nexport interface UseImageGeneratorReturn {\r\n  // State\r\n  isGenerating: boolean;\r\n  generationStatus: GenerationStatus;\r\n  generatedImages: ImageGenerationResult[];\r\n  currentGeneration: ImageGenerationResult | null;\r\n\r\n  // Actions\r\n  generateImage: (params: ImageGenerationParams) => Promise<void>;\r\n  clearCurrentGeneration: () => void;\r\n  deleteImage: (imageId: string) => void;\r\n  clearAllImages: () => void;\r\n\r\n  // Utils\r\n  downloadImage: (image: ImageGenerationResult) => Promise<void>;\r\n  copyImageUrl: (image: ImageGenerationResult) => Promise<void>;\r\n}\r\n\r\nexport function useImageGenerator(\r\n  options: UseImageGeneratorOptions = {}\r\n): UseImageGeneratorReturn {\r\n  const [isGenerating, setIsGenerating] = useState(false);\r\n  const [generatedImages, setGeneratedImages] = useState<ImageGenerationResult[]>([]);\r\n  const [currentGeneration, setCurrentGeneration] =\r\n    useState<ImageGenerationResult | null>(null);\r\n  const [generationStatus, setGenerationStatus] = useState<GenerationStatus>({\r\n    status: \"idle\",\r\n    message: \"\",\r\n  });\r\n\r\n  const generateImage = useCallback(\r\n    async (params: ImageGenerationParams) => {\r\n      if (!options.onGenerate) {\r\n        console.warn(\"No onGenerate function provided to useImageGenerator\");\r\n        return;\r\n      }\r\n\r\n      try {\r\n        setIsGenerating(true);\r\n        setGenerationStatus({\r\n          status: \"generating\",\r\n          message: \"Starting image generation...\",\r\n          progress: 0,\r\n        });\r\n\r\n        const image = await options.onGenerate(params);\r\n\r\n        setCurrentGeneration(image);\r\n        setGeneratedImages((prev) => [image, ...prev]);\r\n        setGenerationStatus({\r\n          status: \"completed\",\r\n          message: \"Image generation completed!\",\r\n          progress: 100,\r\n        });\r\n\r\n        options.onSuccess?.(image);\r\n      } catch (error) {\r\n        const errorMessage =\r\n          error instanceof Error ? error.message : \"Image generation failed\";\r\n        setGenerationStatus({\r\n          status: \"error\",\r\n          message: errorMessage,\r\n          error: errorMessage,\r\n        });\r\n        options.onError?.(errorMessage);\r\n      } finally {\r\n        setIsGenerating(false);\r\n      }\r\n    },\r\n    [options]\r\n  );\r\n\r\n  const clearCurrentGeneration = useCallback(() => {\r\n    setCurrentGeneration(null);\r\n    setGenerationStatus({\r\n      status: \"idle\",\r\n      message: \"\",\r\n    });\r\n  }, []);\r\n\r\n  const deleteImage = useCallback((imageId: string) => {\r\n    setGeneratedImages((prev) => prev.filter((img) => img.id !== imageId));\r\n  }, []);\r\n\r\n  const clearAllImages = useCallback(() => {\r\n    setGeneratedImages([]);\r\n  }, []);\r\n\r\n  const downloadImage = useCallback(async (image: ImageGenerationResult) => {\r\n    try {\r\n      const response = await fetch(image.imageUrl);\r\n      const blob = await response.blob();\r\n      const url = window.URL.createObjectURL(blob);\r\n      const link = document.createElement(\"a\");\r\n      link.href = url;\r\n      link.download = `image-${image.id}.png`;\r\n      document.body.appendChild(link);\r\n      link.click();\r\n      document.body.removeChild(link);\r\n      window.URL.revokeObjectURL(url);\r\n    } catch (error) {\r\n      console.error(\"Failed to download image:\", error);\r\n    }\r\n  }, []);\r\n\r\n  const copyImageUrl = useCallback(async (image: ImageGenerationResult) => {\r\n    try {\r\n      await navigator.clipboard.writeText(image.imageUrl);\r\n    } catch (error) {\r\n      console.error(\"Failed to copy URL:\", error);\r\n    }\r\n  }, []);\r\n\r\n  return {\r\n    isGenerating,\r\n    generationStatus,\r\n    generatedImages,\r\n    currentGeneration,\r\n    generateImage,\r\n    clearCurrentGeneration,\r\n    deleteImage,\r\n    clearAllImages,\r\n    downloadImage,\r\n    copyImageUrl,\r\n  };\r\n}\r\n","\"use client\";\r\n\r\nimport { useState, useCallback } from \"react\";\r\nimport {\r\n  VideoGenerationParams,\r\n  VideoGenerationResult,\r\n} from \"../../video-generation/types\";\r\nimport { GenerationStatus } from \"../types\";\r\n\r\nexport interface UseVideoGeneratorOptions {\r\n  onGenerate?: (params: VideoGenerationParams) => Promise<VideoGenerationResult>;\r\n  onError?: (error: string) => void;\r\n  onSuccess?: (video: VideoGenerationResult) => void;\r\n}\r\n\r\nexport interface UseVideoGeneratorReturn {\r\n  // State\r\n  isGenerating: boolean;\r\n  generationStatus: GenerationStatus;\r\n  generatedVideos: VideoGenerationResult[];\r\n  currentGeneration: VideoGenerationResult | null;\r\n\r\n  // Actions\r\n  generateVideo: (params: VideoGenerationParams) => Promise<void>;\r\n  clearCurrentGeneration: () => void;\r\n  deleteVideo: (videoId: string) => void;\r\n  clearAllVideos: () => void;\r\n\r\n  // Utils\r\n  downloadVideo: (video: VideoGenerationResult) => Promise<void>;\r\n  copyVideoUrl: (video: VideoGenerationResult) => Promise<void>;\r\n}\r\n\r\nexport function useVideoGenerator(\r\n  options: UseVideoGeneratorOptions = {}\r\n): UseVideoGeneratorReturn {\r\n  const [isGenerating, setIsGenerating] = useState(false);\r\n  const [generatedVideos, setGeneratedVideos] = useState<VideoGenerationResult[]>([]);\r\n  const [currentGeneration, setCurrentGeneration] =\r\n    useState<VideoGenerationResult | null>(null);\r\n  const [generationStatus, setGenerationStatus] = useState<GenerationStatus>({\r\n    status: \"idle\",\r\n    message: \"\",\r\n  });\r\n\r\n  const generateVideo = useCallback(\r\n    async (params: VideoGenerationParams) => {\r\n      if (!options.onGenerate) {\r\n        console.warn(\"No onGenerate function provided to useVideoGenerator\");\r\n        return;\r\n      }\r\n\r\n      try {\r\n        setIsGenerating(true);\r\n        setGenerationStatus({\r\n          status: \"generating\",\r\n          message: \"Starting video generation...\",\r\n          progress: 0,\r\n        });\r\n\r\n        const video = await options.onGenerate(params);\r\n\r\n        setCurrentGeneration(video);\r\n        setGeneratedVideos((prev) => [video, ...prev]);\r\n        setGenerationStatus({\r\n          status: \"completed\",\r\n          message: \"Video generation completed!\",\r\n          progress: 100,\r\n        });\r\n\r\n        options.onSuccess?.(video);\r\n      } catch (error) {\r\n        const errorMessage =\r\n          error instanceof Error ? error.message : \"Video generation failed\";\r\n        setGenerationStatus({\r\n          status: \"error\",\r\n          message: errorMessage,\r\n          error: errorMessage,\r\n        });\r\n        options.onError?.(errorMessage);\r\n      } finally {\r\n        setIsGenerating(false);\r\n      }\r\n    },\r\n    [options]\r\n  );\r\n\r\n  const clearCurrentGeneration = useCallback(() => {\r\n    setCurrentGeneration(null);\r\n    setGenerationStatus({\r\n      status: \"idle\",\r\n      message: \"\",\r\n    });\r\n  }, []);\r\n\r\n  const deleteVideo = useCallback((videoId: string) => {\r\n    setGeneratedVideos((prev) => prev.filter((video) => video.id !== videoId));\r\n  }, []);\r\n\r\n  const clearAllVideos = useCallback(() => {\r\n    setGeneratedVideos([]);\r\n  }, []);\r\n\r\n  const downloadVideo = useCallback(async (video: VideoGenerationResult) => {\r\n    try {\r\n      const response = await fetch(video.videoUrl);\r\n      const blob = await response.blob();\r\n      const url = window.URL.createObjectURL(blob);\r\n      const link = document.createElement(\"a\");\r\n      link.href = url;\r\n      link.download = `video-${video.id}.mp4`;\r\n      document.body.appendChild(link);\r\n      link.click();\r\n      document.body.removeChild(link);\r\n      window.URL.revokeObjectURL(url);\r\n    } catch (error) {\r\n      console.error(\"Failed to download video:\", error);\r\n    }\r\n  }, []);\r\n\r\n  const copyVideoUrl = useCallback(async (video: VideoGenerationResult) => {\r\n    try {\r\n      await navigator.clipboard.writeText(video.videoUrl);\r\n    } catch (error) {\r\n      console.error(\"Failed to copy URL:\", error);\r\n    }\r\n  }, []);\r\n\r\n  return {\r\n    isGenerating,\r\n    generationStatus,\r\n    generatedVideos,\r\n    currentGeneration,\r\n    generateVideo,\r\n    clearCurrentGeneration,\r\n    deleteVideo,\r\n    clearAllVideos,\r\n    downloadVideo,\r\n    copyVideoUrl,\r\n  };\r\n}\r\n","\"use client\";\r\n\r\nimport { useState, useCallback } from \"react\";\r\nimport { PromptEnhancementParams, EnhancementResult } from \"../types\";\r\n\r\nexport interface EnhancedPrompt {\r\n  id: string;\r\n  original: string;\r\n  enhanced: string;\r\n  mediaType: string;\r\n  enhancementLevel: string;\r\n  createdAt: string;\r\n}\r\n\r\nexport interface UsePromptEnhancerOptions {\r\n  onEnhance?: (params: PromptEnhancementParams) => Promise<string>;\r\n  onError?: (error: string) => void;\r\n  onSuccess?: (enhancedPrompt: string) => void;\r\n}\r\n\r\nexport interface UsePromptEnhancerReturn {\r\n  // State\r\n  isEnhancing: boolean;\r\n  enhancedPrompts: EnhancedPrompt[];\r\n  currentEnhanced: string | null;\r\n\r\n  // Actions\r\n  enhancePrompt: (params: PromptEnhancementParams) => Promise<void>;\r\n  clearCurrent: () => void;\r\n  deleteEnhanced: (id: string) => void;\r\n  clearAll: () => void;\r\n\r\n  // Utils\r\n  copyEnhanced: (enhancedPrompt: string) => Promise<void>;\r\n}\r\n\r\nexport function usePromptEnhancer(\r\n  options: UsePromptEnhancerOptions = {}\r\n): UsePromptEnhancerReturn {\r\n  const [isEnhancing, setIsEnhancing] = useState(false);\r\n  const [enhancedPrompts, setEnhancedPrompts] = useState<EnhancedPrompt[]>([]);\r\n  const [currentEnhanced, setCurrentEnhanced] = useState<string | null>(null);\r\n\r\n  const enhancePrompt = useCallback(\r\n    async (params: PromptEnhancementParams) => {\r\n      if (!options.onEnhance) {\r\n        console.warn(\"No onEnhance function provided to usePromptEnhancer\");\r\n        return;\r\n      }\r\n\r\n      try {\r\n        setIsEnhancing(true);\r\n\r\n        const enhanced = await options.onEnhance(params);\r\n\r\n        const enhancedPrompt: EnhancedPrompt = {\r\n          id: Date.now().toString(),\r\n          original: params.originalPrompt,\r\n          enhanced,\r\n          mediaType: params.mediaType || \"general\",\r\n          enhancementLevel: params.enhancementLevel || \"detailed\",\r\n          createdAt: new Date().toISOString(),\r\n        };\r\n\r\n        setCurrentEnhanced(enhanced);\r\n        setEnhancedPrompts((prev) => [enhancedPrompt, ...prev]);\r\n\r\n        options.onSuccess?.(enhanced);\r\n      } catch (error) {\r\n        const errorMessage =\r\n          error instanceof Error ? error.message : \"Prompt enhancement failed\";\r\n        options.onError?.(errorMessage);\r\n      } finally {\r\n        setIsEnhancing(false);\r\n      }\r\n    },\r\n    [options]\r\n  );\r\n\r\n  const clearCurrent = useCallback(() => {\r\n    setCurrentEnhanced(null);\r\n  }, []);\r\n\r\n  const deleteEnhanced = useCallback((id: string) => {\r\n    setEnhancedPrompts((prev) => prev.filter((prompt) => prompt.id !== id));\r\n  }, []);\r\n\r\n  const clearAll = useCallback(() => {\r\n    setEnhancedPrompts([]);\r\n    setCurrentEnhanced(null);\r\n  }, []);\r\n\r\n  const copyEnhanced = useCallback(async (enhancedPrompt: string) => {\r\n    try {\r\n      await navigator.clipboard.writeText(enhancedPrompt);\r\n    } catch (error) {\r\n      console.error(\"Failed to copy enhanced prompt:\", error);\r\n    }\r\n  }, []);\r\n\r\n  return {\r\n    isEnhancing,\r\n    enhancedPrompts,\r\n    currentEnhanced,\r\n    enhancePrompt,\r\n    clearCurrent,\r\n    deleteEnhanced,\r\n    clearAll,\r\n    copyEnhanced,\r\n  };\r\n}\r\n","import React, { useRef } from \"react\";\r\nimport {\r\n  Label,\r\n  Badge,\r\n  Card,\r\n  CardContent,\r\n  CardHeader,\r\n  CardTitle,\r\n} from \"@turbo-super/ui\";\r\nimport { MoodboardImage } from \"../types\";\r\n\r\ninterface MoodboardUploaderProps {\r\n  enabled: boolean;\r\n  onEnabledChange: (enabled: boolean) => void;\r\n  onImagesChange: (images: MoodboardImage[]) => void;\r\n  maxImages?: number;\r\n  value?: MoodboardImage[];\r\n}\r\n\r\nexport function MoodboardUploader({\r\n  enabled,\r\n  onEnabledChange,\r\n  onImagesChange,\r\n  maxImages = 3,\r\n  value = [],\r\n}: MoodboardUploaderProps) {\r\n  const fileInputRef = useRef<HTMLInputElement>(null);\r\n\r\n  const handleFileSelect = (event: React.ChangeEvent<HTMLInputElement>) => {\r\n    const files = event.target.files;\r\n    if (!files) return;\r\n\r\n    const newImages: MoodboardImage[] = [];\r\n\r\n    for (let i = 0; i < Math.min(files.length, maxImages - value.length); i++) {\r\n      const file = files[i];\r\n      if (file.type.startsWith(\"image/\")) {\r\n        const reader = new FileReader();\r\n        reader.onload = (e) => {\r\n          const base64 = e.target?.result as string;\r\n          const newImage: MoodboardImage = {\r\n            id: Date.now().toString() + i,\r\n            file: file,\r\n            base64: base64,\r\n            tags: [],\r\n            description: \"\",\r\n            weight: 1.0,\r\n          };\r\n\r\n          const updatedImages = [...value, newImage];\r\n          onImagesChange(updatedImages);\r\n        };\r\n        reader.readAsDataURL(file);\r\n      }\r\n    }\r\n  };\r\n\r\n  const handleDropZoneClick = () => {\r\n    fileInputRef.current?.click();\r\n  };\r\n\r\n  const removeImage = (imageId: string) => {\r\n    const updatedImages = value.filter((img) => img.id !== imageId);\r\n    onImagesChange(updatedImages);\r\n  };\r\n\r\n  return (\r\n    <div className=\"space-y-6\">\r\n      {/* Enable/Disable Toggle */}\r\n      <div className=\"flex items-center space-x-3\">\r\n        <div className=\"flex items-center space-x-2\">\r\n          <input\r\n            type=\"checkbox\"\r\n            id=\"moodboard-toggle\"\r\n            checked={enabled}\r\n            onChange={(e) => onEnabledChange(e.target.checked)}\r\n            className=\"w-4 h-4 text-blue-600 bg-gray-100 border-gray-300 rounded focus:ring-blue-500 dark:focus:ring-blue-600 dark:ring-offset-gray-800 focus:ring-2 dark:bg-gray-700 dark:border-gray-600\"\r\n          />\r\n          <Label\r\n            htmlFor=\"moodboard-toggle\"\r\n            className=\"text-sm font-medium\"\r\n          >\r\n            Enable Moodboard References\r\n          </Label>\r\n        </div>\r\n        {enabled && (\r\n          <Badge\r\n            variant=\"outline\"\r\n            className=\"text-xs\"\r\n          >\r\n            {value.length}/{maxImages} images\r\n          </Badge>\r\n        )}\r\n      </div>\r\n\r\n      {enabled && (\r\n        <div className=\"space-y-6\">\r\n          {/* Image Uploader */}\r\n          <Card>\r\n            <CardHeader>\r\n              <CardTitle className=\"text-lg\">Visual References</CardTitle>\r\n            </CardHeader>\r\n            <CardContent>\r\n              <input\r\n                ref={fileInputRef}\r\n                type=\"file\"\r\n                multiple\r\n                accept=\"image/*\"\r\n                onChange={handleFileSelect}\r\n                className=\"hidden\"\r\n              />\r\n              <div\r\n                className=\"border-2 border-dashed border-gray-300 dark:border-gray-600 rounded-lg p-6 text-center cursor-pointer hover:border-blue-400 dark:hover:border-blue-500 transition-colors\"\r\n                onClick={handleDropZoneClick}\r\n              >\r\n                <div className=\"text-gray-500 dark:text-gray-400 mb-2\">\r\n                  📁 Click to Upload Images\r\n                </div>\r\n                <p className=\"text-sm text-gray-400 dark:text-gray-500\">\r\n                  Select up to {maxImages} images to use as visual references\r\n                </p>\r\n                <p className=\"text-xs text-gray-400 dark:text-gray-500 mt-1\">\r\n                  Supported formats: JPG, PNG, GIF, WebP\r\n                </p>\r\n              </div>\r\n            </CardContent>\r\n          </Card>\r\n\r\n          {/* Image Configuration */}\r\n          {value.length > 0 && (\r\n            <div className=\"space-y-4\">\r\n              {value.map((image) => (\r\n                <Card\r\n                  key={image.id}\r\n                  className=\"group relative\"\r\n                >\r\n                  <CardContent className=\"pt-6\">\r\n                    {/* Delete Button */}\r\n                    <button\r\n                      onClick={() => removeImage(image.id)}\r\n                      className=\"absolute top-2 right-2 z-10 p-1 bg-red-500 hover:bg-red-600 text-white rounded-full opacity-0 group-hover:opacity-100 transition-opacity\"\r\n                      title=\"Remove image\"\r\n                    >\r\n                      ✕\r\n                    </button>\r\n\r\n                    <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-6\">\r\n                      {/* Image Preview */}\r\n                      <div className=\"lg:col-span-1\">\r\n                        <div className=\"aspect-square relative rounded-lg overflow-hidden bg-muted\">\r\n                          {image.url ? (\r\n                            <img\r\n                              src={image.url}\r\n                              alt=\"Moodboard reference\"\r\n                              className=\"w-full h-full object-cover\"\r\n                            />\r\n                          ) : image.base64 ? (\r\n                            <img\r\n                              src={image.base64}\r\n                              alt=\"Moodboard reference\"\r\n                              className=\"w-full h-full object-cover\"\r\n                            />\r\n                          ) : (\r\n                            <div className=\"w-full h-full flex items-center justify-center text-muted-foreground\">\r\n                              Image Preview\r\n                            </div>\r\n                          )}\r\n                        </div>\r\n                      </div>\r\n\r\n                      {/* Configuration */}\r\n                      <div className=\"lg:col-span-2 space-y-4\">\r\n                        <div className=\"text-sm text-muted-foreground\">\r\n                          <p>Image ID: {image.id}</p>\r\n                          {image.description && (\r\n                            <p>Description: {image.description}</p>\r\n                          )}\r\n                          {image.tags.length > 0 && (\r\n                            <p>Tags: {image.tags.join(\", \")}</p>\r\n                          )}\r\n                          <p>Weight: {image.weight}</p>\r\n                        </div>\r\n                      </div>\r\n                    </div>\r\n                  </CardContent>\r\n                </Card>\r\n              ))}\r\n            </div>\r\n          )}\r\n\r\n          {/* Instructions */}\r\n          <Card className=\"border-blue-200 bg-blue-50/50 dark:border-blue-800 dark:bg-blue-950/20\">\r\n            <CardContent className=\"pt-6\">\r\n              <div className=\"space-y-3\">\r\n                <h4 className=\"text-sm font-semibold text-blue-900 dark:text-blue-100 flex items-center gap-2\">\r\n                  🎨 Moodboard Tips\r\n                </h4>\r\n                <ul className=\"text-sm text-blue-800 dark:text-blue-200 space-y-2\">\r\n                  <li className=\"flex items-start gap-2\">\r\n                    <span className=\"text-blue-600 dark:text-blue-400\">•</span>\r\n                    <span>\r\n                      Upload reference images to influence your VEO3 generation\r\n                    </span>\r\n                  </li>\r\n                  <li className=\"flex items-start gap-2\">\r\n                    <span className=\"text-blue-600 dark:text-blue-400\">•</span>\r\n                    <span>\r\n                      Add descriptions to highlight specific elements you want\r\n                      emphasized\r\n                    </span>\r\n                  </li>\r\n                  <li className=\"flex items-start gap-2\">\r\n                    <span className=\"text-blue-600 dark:text-blue-400\">•</span>\r\n                    <span>\r\n                      Adjust influence weight to control how much each image\r\n                      affects the result\r\n                    </span>\r\n                  </li>\r\n                </ul>\r\n              </div>\r\n            </CardContent>\r\n          </Card>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n","import {\r\n  Card,\r\n  CardHeader,\r\n  CardTitle,\r\n  CardContent,\r\n  Button,\r\n  Textarea,\r\n  Label,\r\n  Badge,\r\n} from \"@turbo-super/ui\";\r\nimport { Trash2 } from \"lucide-react\";\r\nimport { Character, PromptData, PresetOptions, MoodboardImage } from \"../types\";\r\nimport { MoodboardUploader as DefaultMoodboardUploader } from \"./MoodboardUploader\";\r\n\r\ninterface PromptBuilderProps {\r\n  promptData: PromptData;\r\n  setPromptData: (data: PromptData) => void;\r\n  addCharacter: () => void;\r\n  updateCharacter: (id: string, field: keyof Character, value: string) => void;\r\n  removeCharacter: (id: string) => void;\r\n  presetOptions: PresetOptions;\r\n  moodboardEnabled?: boolean;\r\n  setMoodboardEnabled?: (enabled: boolean) => void;\r\n  moodboardImages?: MoodboardImage[];\r\n  setMoodboardImages?: (images: MoodboardImage[]) => void;\r\n  MoodboardUploader?: React.ComponentType<{\r\n    images: MoodboardImage[];\r\n    setImages: (images: MoodboardImage[]) => void;\r\n  }>;\r\n}\r\n\r\nexport function PromptBuilder({\r\n  promptData,\r\n  setPromptData,\r\n  addCharacter,\r\n  updateCharacter,\r\n  removeCharacter,\r\n  presetOptions,\r\n  moodboardEnabled = false,\r\n  setMoodboardEnabled,\r\n  moodboardImages = [],\r\n  setMoodboardImages,\r\n  MoodboardUploader,\r\n}: PromptBuilderProps) {\r\n  return (\r\n    <Card className=\"w-full\">\r\n      <CardHeader>\r\n        <CardTitle>VEO3 Prompt Builder</CardTitle>\r\n      </CardHeader>\r\n      <CardContent className=\"space-y-4\">\r\n        {/* Scene Description */}\r\n        <div className=\"space-y-2 p-4 border-l-4 border-blue-500 bg-blue-950/20 rounded-lg\">\r\n          <Label\r\n            htmlFor=\"scene\"\r\n            className=\"flex items-center gap-2 text-blue-300 font-medium\"\r\n          >\r\n            🎬 Scene Description\r\n          </Label>\r\n          <Textarea\r\n            id=\"scene\"\r\n            placeholder=\"Describe the main scene (e.g., A cozy coffee shop in the morning)\"\r\n            value={promptData.scene}\r\n            onChange={(e) =>\r\n              setPromptData({ ...promptData, scene: e.target.value })\r\n            }\r\n            className=\"min-h-[80px] border-blue-600 bg-blue-950/10 focus:border-blue-400 focus:ring-blue-400\"\r\n          />\r\n        </div>\r\n        {/* Characters */}\r\n        <div className=\"space-y-4 p-4 border-l-4 border-green-500 bg-green-950/20 rounded-lg\">\r\n          <div className=\"flex items-center justify-between\">\r\n            <Label className=\"flex items-center gap-2 text-green-300 font-medium\">\r\n              👥 Characters ({promptData.characters.length})\r\n            </Label>\r\n            <Button\r\n              type=\"button\"\r\n              variant=\"outline\"\r\n              size=\"sm\"\r\n              onClick={addCharacter}\r\n              className=\"text-xs border-green-600 text-green-300 hover:bg-green-950/30\"\r\n            >\r\n              + Add Character\r\n            </Button>\r\n          </div>\r\n          {promptData.characters.length === 0 && (\r\n            <div className=\"text-sm text-muted-foreground p-4 border border-dashed rounded-lg text-center\">\r\n              No characters added yet. Click &quot;Add Character&quot; to start.\r\n            </div>\r\n          )}\r\n          {promptData.characters.map((character, index) => (\r\n            <div\r\n              key={character.id}\r\n              className=\"p-4 border border-green-600 bg-green-950/10 rounded-lg space-y-3\"\r\n            >\r\n              <div className=\"flex items-center justify-between\">\r\n                <Label className=\"text-sm font-medium\">\r\n                  Character {index + 1}\r\n                </Label>\r\n                {promptData.characters.length > 1 && (\r\n                  <Button\r\n                    type=\"button\"\r\n                    variant=\"ghost\"\r\n                    size=\"sm\"\r\n                    onClick={() => removeCharacter(character.id)}\r\n                    className=\"text-red-500 hover:text-red-700 size-6 p-0\"\r\n                  >\r\n                    <Trash2 className=\"size-3\" />\r\n                  </Button>\r\n                )}\r\n              </div>\r\n              <div className=\"grid grid-cols-1 gap-3\">\r\n                <div>\r\n                  <Label\r\n                    htmlFor={`char-name-${character.id}`}\r\n                    className=\"text-xs\"\r\n                  >\r\n                    Name\r\n                  </Label>\r\n                  <input\r\n                    id={`char-name-${character.id}`}\r\n                    type=\"text\"\r\n                    placeholder=\"Character name (e.g., Sarah, Vendor)\"\r\n                    value={character.name}\r\n                    onChange={(e) =>\r\n                      updateCharacter(character.id, \"name\", e.target.value)\r\n                    }\r\n                    className=\"w-full px-3 py-2 border border-green-600 bg-green-950/10 rounded-md text-sm focus:outline-none focus:ring-2 focus:ring-green-400 focus:border-transparent\"\r\n                  />\r\n                </div>\r\n                <div>\r\n                  <Label\r\n                    htmlFor={`char-desc-${character.id}`}\r\n                    className=\"text-xs\"\r\n                  >\r\n                    Description\r\n                  </Label>\r\n                  <Textarea\r\n                    id={`char-desc-${character.id}`}\r\n                    placeholder=\"Describe the character (e.g., A young woman with wavy brown hair)\"\r\n                    value={character.description}\r\n                    onChange={(e) =>\r\n                      updateCharacter(\r\n                        character.id,\r\n                        \"description\",\r\n                        e.target.value\r\n                      )\r\n                    }\r\n                    className=\"min-h-[60px] text-sm border-green-600 bg-green-950/10 focus:border-green-400 focus:ring-green-400\"\r\n                  />\r\n                </div>\r\n                <div className=\"relative\">\r\n                  <div className=\"flex items-center gap-2\">\r\n                    <Label\r\n                      htmlFor={`char-speech-${character.id}`}\r\n                      className=\"text-xs\"\r\n                    >\r\n                      Speech/Dialogue\r\n                    </Label>\r\n                    {character.speech && (\r\n                      <Badge\r\n                        variant=\"secondary\"\r\n                        className=\"text-xs px-2 py-0.5\"\r\n                      >\r\n                        🎙️ Has Voice\r\n                      </Badge>\r\n                    )}\r\n                  </div>\r\n                  <Textarea\r\n                    id={`char-speech-${character.id}`}\r\n                    placeholder=\"What they say (e.g., Hello there! or Привет!)\"\r\n                    value={character.speech}\r\n                    onChange={(e) =>\r\n                      updateCharacter(character.id, \"speech\", e.target.value)\r\n                    }\r\n                    className={`min-h-[50px] text-sm border-green-600 bg-green-950/10 focus:border-green-400 focus:ring-green-400 ${character.speech ? \"border-blue-400 bg-blue-950/20\" : \"\"}`}\r\n                  />\r\n                  {character.speech && (\r\n                    <div className=\"mt-1 text-xs text-blue-300 flex items-center gap-1\">\r\n                      <span>🔊</span>\r\n                      <span>\r\n                        This dialogue will be highlighted in the enhanced prompt\r\n                      </span>\r\n                    </div>\r\n                  )}\r\n                </div>\r\n              </div>\r\n            </div>\r\n          ))}\r\n        </div>\r\n        {/* Action */}\r\n        <div className=\"space-y-2 p-4 border-l-4 border-orange-500 bg-orange-950/20 rounded-lg\">\r\n          <Label\r\n            htmlFor=\"action\"\r\n            className=\"flex items-center gap-2 text-orange-300 font-medium\"\r\n          >\r\n            🎭 Action/Activity\r\n          </Label>\r\n          <Textarea\r\n            id=\"action\"\r\n            placeholder=\"What are they doing? (e.g., slowly sipping coffee while turning pages)\"\r\n            value={promptData.action}\r\n            onChange={(e) =>\r\n              setPromptData({ ...promptData, action: e.target.value })\r\n            }\r\n            className=\"border-orange-600 bg-orange-950/10 focus:border-orange-400 focus:ring-orange-400\"\r\n          />\r\n        </div>\r\n        {/* Language */}\r\n        <div className=\"space-y-2 p-4 border-l-4 border-yellow-500 bg-yellow-950/20 rounded-lg\">\r\n          <Label\r\n            htmlFor=\"language\"\r\n            className=\"flex items-center gap-2 text-yellow-300 font-medium\"\r\n          >\r\n            🗣️ Speech Language\r\n          </Label>\r\n          <div className=\"space-y-2\">\r\n            <input\r\n              id=\"language\"\r\n              type=\"text\"\r\n              placeholder=\"Enter language (e.g., English, Russian, Spanish...)\"\r\n              value={promptData.language}\r\n              onChange={(e) =>\r\n                setPromptData({ ...promptData, language: e.target.value })\r\n              }\r\n              className=\"w-full px-3 py-2 border border-yellow-600 bg-yellow-950/10 rounded-md text-sm focus:outline-none focus:ring-2 focus:ring-yellow-400 focus:border-transparent\"\r\n            />\r\n            <div className=\"flex flex-wrap gap-2\">\r\n              <Label className=\"text-xs text-yellow-300\">Quick select:</Label>\r\n              {presetOptions.languages.map((language: string) => (\r\n                <Badge\r\n                  key={language}\r\n                  variant={\r\n                    promptData.language === language ? \"default\" : \"outline\"\r\n                  }\r\n                  className={`cursor-pointer text-xs ${promptData.language === language ? \"bg-yellow-600 text-white\" : \"border-yellow-600 text-yellow-300 hover:bg-yellow-950/30\"}`}\r\n                  onClick={() => setPromptData({ ...promptData, language })}\r\n                >\r\n                  {language}\r\n                </Badge>\r\n              ))}\r\n            </div>\r\n          </div>\r\n        </div>\r\n        {/* Visual Style */}\r\n        <div className=\"space-y-2 p-4 border-l-4 border-purple-500 bg-purple-950/20 rounded-lg\">\r\n          <Label\r\n            htmlFor=\"style\"\r\n            className=\"flex items-center gap-2 text-purple-300 font-medium\"\r\n          >\r\n            🎨 Visual Style\r\n          </Label>\r\n          <div className=\"space-y-2\">\r\n            <input\r\n              id=\"style\"\r\n              type=\"text\"\r\n              placeholder=\"Enter visual style (e.g., Cinematic, Documentary, Anime...)\"\r\n              value={promptData.style}\r\n              onChange={(e) =>\r\n                setPromptData({ ...promptData, style: e.target.value })\r\n              }\r\n              className=\"w-full px-3 py-2 border border-purple-600 bg-purple-950/10 rounded-md text-sm focus:outline-none focus:ring-2 focus:ring-purple-400 focus:border-transparent\"\r\n            />\r\n            <div className=\"flex flex-wrap gap-2\">\r\n              <Label className=\"text-xs text-purple-300\">Quick select:</Label>\r\n              {presetOptions.styles.map((style: string) => (\r\n                <Badge\r\n                  key={style}\r\n                  variant={promptData.style === style ? \"default\" : \"outline\"}\r\n                  className={`cursor-pointer text-xs ${promptData.style === style ? \"bg-purple-600 text-white\" : \"border-purple-600 text-purple-300 hover:bg-purple-950/30\"}`}\r\n                  onClick={() => setPromptData({ ...promptData, style })}\r\n                >\r\n                  {style}\r\n                </Badge>\r\n              ))}\r\n            </div>\r\n          </div>\r\n        </div>\r\n        {/* Camera Angle */}\r\n        <div className=\"space-y-2 p-4 border-l-4 border-indigo-500 bg-indigo-950/20 rounded-lg\">\r\n          <Label\r\n            htmlFor=\"camera\"\r\n            className=\"flex items-center gap-2 text-indigo-300 font-medium\"\r\n          >\r\n            📹 Camera Angle\r\n          </Label>\r\n          <div className=\"space-y-2\">\r\n            <input\r\n              id=\"camera\"\r\n              type=\"text\"\r\n              placeholder=\"Enter camera angle (e.g., Close-up, Wide shot, Drone view...)\"\r\n              value={promptData.camera}\r\n              onChange={(e) =>\r\n                setPromptData({ ...promptData, camera: e.target.value })\r\n              }\r\n              className=\"w-full px-3 py-2 border border-indigo-600 bg-indigo-950/10 rounded-md text-sm focus:outline-none focus:ring-2 focus:ring-indigo-400 focus:border-transparent\"\r\n            />\r\n            <div className=\"flex flex-wrap gap-2\">\r\n              <Label className=\"text-xs text-indigo-300\">Quick select:</Label>\r\n              {presetOptions.cameras.map((camera: string) => (\r\n                <Badge\r\n                  key={camera}\r\n                  variant={promptData.camera === camera ? \"default\" : \"outline\"}\r\n                  className={`cursor-pointer text-xs ${promptData.camera === camera ? \"bg-indigo-600 text-white\" : \"border-indigo-600 text-indigo-300 hover:bg-indigo-950/30\"}`}\r\n                  onClick={() => setPromptData({ ...promptData, camera })}\r\n                >\r\n                  {camera}\r\n                </Badge>\r\n              ))}\r\n            </div>\r\n          </div>\r\n        </div>\r\n        {/* Lighting */}\r\n        <div className=\"space-y-2 p-4 border-l-4 border-pink-500 bg-pink-950/20 rounded-lg\">\r\n          <Label\r\n            htmlFor=\"lighting\"\r\n            className=\"flex items-center gap-2 text-pink-300 font-medium\"\r\n          >\r\n            💡 Lighting\r\n          </Label>\r\n          <div className=\"space-y-2\">\r\n            <input\r\n              id=\"lighting\"\r\n              type=\"text\"\r\n              placeholder=\"Enter lighting type (e.g., Natural, Golden hour, Dramatic...)\"\r\n              value={promptData.lighting}\r\n              onChange={(e) =>\r\n                setPromptData({ ...promptData, lighting: e.target.value })\r\n              }\r\n              className=\"w-full px-3 py-2 border border-pink-600 bg-pink-950/10 rounded-md text-sm focus:outline-none focus:ring-2 focus:ring-pink-400 focus:border-transparent\"\r\n            />\r\n            <div className=\"flex flex-wrap gap-2\">\r\n              <Label className=\"text-xs text-pink-300\">Quick select:</Label>\r\n              {presetOptions.lighting.map((light: string) => (\r\n                <Badge\r\n                  key={light}\r\n                  variant={\r\n                    promptData.lighting === light ? \"default\" : \"outline\"\r\n                  }\r\n                  className={`cursor-pointer text-xs ${promptData.lighting === light ? \"bg-pink-600 text-white\" : \"border-pink-600 text-pink-300 hover:bg-pink-950/30\"}`}\r\n                  onClick={() =>\r\n                    setPromptData({ ...promptData, lighting: light })\r\n                  }\r\n                >\r\n                  {light}\r\n                </Badge>\r\n              ))}\r\n            </div>\r\n          </div>\r\n        </div>\r\n        {/* Mood */}\r\n        <div className=\"space-y-2 p-4 border-l-4 border-rose-500 bg-rose-950/20 rounded-lg\">\r\n          <Label\r\n            htmlFor=\"mood\"\r\n            className=\"flex items-center gap-2 text-rose-300 font-medium\"\r\n          >\r\n            🌟 Mood\r\n          </Label>\r\n          <div className=\"space-y-2\">\r\n            <input\r\n              id=\"mood\"\r\n              type=\"text\"\r\n              placeholder=\"Enter mood (e.g., Peaceful, Energetic, Mysterious...)\"\r\n              value={promptData.mood}\r\n              onChange={(e) =>\r\n                setPromptData({ ...promptData, mood: e.target.value })\r\n              }\r\n              className=\"w-full px-3 py-2 border border-rose-600 bg-rose-950/10 rounded-md text-sm focus:outline-none focus:ring-2 focus:ring-rose-400 focus:border-transparent\"\r\n            />\r\n            <div className=\"flex flex-wrap gap-2\">\r\n              <Label className=\"text-xs text-rose-300\">Quick select:</Label>\r\n              {presetOptions.moods.map((mood: string) => (\r\n                <Badge\r\n                  key={mood}\r\n                  variant={promptData.mood === mood ? \"default\" : \"outline\"}\r\n                  className={`cursor-pointer text-xs ${promptData.mood === mood ? \"bg-rose-600 text-white\" : \"border-rose-600 text-rose-300 hover:bg-rose-950/30\"}`}\r\n                  onClick={() => setPromptData({ ...promptData, mood })}\r\n                >\r\n                  {mood}\r\n                </Badge>\r\n              ))}\r\n            </div>\r\n          </div>\r\n        </div>\r\n        {/* MoodboardUploader */}\r\n        {moodboardEnabled !== undefined &&\r\n          setMoodboardEnabled &&\r\n          setMoodboardImages && (\r\n            MoodboardUploader ? (\r\n              <MoodboardUploader\r\n                images={moodboardImages}\r\n                setImages={setMoodboardImages}\r\n              />\r\n            ) : (\r\n              <DefaultMoodboardUploader\r\n                enabled={moodboardEnabled}\r\n                onEnabledChange={setMoodboardEnabled}\r\n                onImagesChange={setMoodboardImages}\r\n                maxImages={3}\r\n                value={moodboardImages}\r\n              />\r\n            )\r\n          )}\r\n      </CardContent>\r\n    </Card>\r\n  );\r\n}\r\n","import {\r\n  Card,\r\n  CardHeader,\r\n  CardTitle,\r\n  CardContent,\r\n  Button,\r\n  Textarea,\r\n  Badge,\r\n} from \"@turbo-super/ui\";\r\nimport { Copy, Shuffle, Sparkles, Trash2 } from \"lucide-react\";\r\n\r\ninterface PromptPreviewProps {\r\n  generatedPrompt: string;\r\n  setGeneratedPrompt: (prompt: string) => void;\r\n  randomizePrompt: () => void;\r\n  clearAll: () => void;\r\n  copyToClipboard: (text: string) => void;\r\n  copied: boolean;\r\n  setActiveTab: (tab: string) => void;\r\n  isEnhancing: boolean;\r\n  enhancePrompt: () => void;\r\n}\r\n\r\nexport function PromptPreview({\r\n  generatedPrompt,\r\n  setGeneratedPrompt,\r\n  randomizePrompt,\r\n  clearAll,\r\n  copyToClipboard,\r\n  copied,\r\n  setActiveTab,\r\n  isEnhancing,\r\n  enhancePrompt,\r\n}: PromptPreviewProps) {\r\n  return (\r\n    <Card className=\"w-full\">\r\n      <CardHeader>\r\n        <CardTitle className=\"flex items-center gap-2\">\r\n          <Copy className=\"w-5 h-5\" />\r\n          Generated Prompt\r\n          <Badge\r\n            variant=\"secondary\"\r\n            className=\"ml-auto text-xs\"\r\n          >\r\n            Preview\r\n          </Badge>\r\n        </CardTitle>\r\n      </CardHeader>\r\n      <CardContent>\r\n        <div className=\"space-y-4\">\r\n          {/* Textarea with Copy button in top-right - Now Editable */}\r\n          <div className=\"relative\">\r\n            <Textarea\r\n              value={generatedPrompt}\r\n              onChange={(e: React.ChangeEvent<HTMLTextAreaElement>) =>\r\n                setGeneratedPrompt(e.target.value)\r\n              }\r\n              placeholder=\"Your generated prompt will appear here, or type your own prompt...\"\r\n              className=\"min-h-[400px] font-mono text-sm resize-none pr-20 bg-background border-border text-foreground\"\r\n            />\r\n            <div className=\"absolute top-2 right-2 flex gap-1\">\r\n              <Button\r\n                size=\"sm\"\r\n                variant=\"ghost\"\r\n                onClick={() => setGeneratedPrompt(\"\")}\r\n                disabled={!generatedPrompt}\r\n                className=\"size-8 p-0 hover:bg-background/80\"\r\n                title=\"Clear text\"\r\n              >\r\n                <Trash2 className=\"size-4\" />\r\n              </Button>\r\n              <Button\r\n                size=\"sm\"\r\n                variant=\"ghost\"\r\n                onClick={() => copyToClipboard(generatedPrompt)}\r\n                disabled={!generatedPrompt}\r\n                className=\"size-8 p-0 hover:bg-background/80\"\r\n                title={copied ? \"Copied!\" : \"Copy to clipboard\"}\r\n              >\r\n                <Copy className=\"size-4\" />\r\n              </Button>\r\n            </div>\r\n          </div>\r\n          {/* Action Buttons */}\r\n          <div className=\"space-y-3\">\r\n            {/* Quick Actions */}\r\n            <div className=\"flex gap-2\">\r\n              <Button\r\n                onClick={randomizePrompt}\r\n                variant=\"outline\"\r\n                className=\"flex-1\"\r\n              >\r\n                <Shuffle className=\"size-4 mr-2\" />\r\n                Randomize All\r\n              </Button>\r\n              <Button\r\n                onClick={clearAll}\r\n                variant=\"outline\"\r\n                className=\"flex-1\"\r\n              >\r\n                <Trash2 className=\"size-4 mr-2\" />\r\n                Clear All\r\n              </Button>\r\n            </div>\r\n            {/* Navigate to AI Enhancement - Large and Prominent */}\r\n            <Button\r\n              onClick={() => {\r\n                setActiveTab(\"enhance\");\r\n                setTimeout(() => {\r\n                  if (generatedPrompt && !isEnhancing) {\r\n                    enhancePrompt();\r\n                  }\r\n                }, 100);\r\n              }}\r\n              disabled={!generatedPrompt}\r\n              size=\"lg\"\r\n              className=\"w-full h-16 text-lg font-bold bg-gradient-to-r from-green-600 to-blue-600 hover:from-green-700 hover:to-blue-700 text-white shadow-lg transform hover:scale-[1.02] transition-all duration-200\"\r\n            >\r\n              <Sparkles className=\"size-6 mr-3\" />\r\n              Continue to AI Enhancement →\r\n            </Button>\r\n          </div>\r\n        </div>\r\n      </CardContent>\r\n    </Card>\r\n  );\r\n}\r\n","import {\r\n  Card,\r\n  CardHeader,\r\n  CardTitle,\r\n  CardContent,\r\n  Button,\r\n  Textarea,\r\n  Badge,\r\n  StripePaymentButton,\r\n} from \"@turbo-super/ui\";\r\nimport {\r\n  Sparkles,\r\n  Loader2,\r\n  Settings,\r\n  ChevronDown,\r\n  ChevronUp,\r\n  Copy,\r\n  CreditCard,\r\n} from \"lucide-react\";\r\n\r\ninterface AIEnhancementProps {\r\n  enhancedPrompt: string;\r\n  setEnhancedPrompt: (prompt: string) => void;\r\n  generatedPrompt: string;\r\n  enhanceWithSelectedFocus: () => void;\r\n  isEnhancing: boolean;\r\n  enhanceError: string;\r\n  enhancementInfo: any;\r\n  selectedFocusTypes: string[];\r\n  toggleFocusType: (\r\n    type: \"character\" | \"action\" | \"cinematic\" | \"safe\"\r\n  ) => void;\r\n  includeAudio: boolean;\r\n  setIncludeAudio: (val: boolean) => void;\r\n  customCharacterLimit: number;\r\n  setCustomCharacterLimit: (val: number) => void;\r\n  showSettings: boolean;\r\n  setShowSettings: (val: boolean) => void;\r\n  copied: boolean;\r\n  copyToClipboard: (text: string) => void;\r\n}\r\n\r\nexport function AIEnhancement({\r\n  enhancedPrompt,\r\n  setEnhancedPrompt,\r\n  generatedPrompt,\r\n  enhanceWithSelectedFocus,\r\n  isEnhancing,\r\n  enhanceError,\r\n  enhancementInfo,\r\n  selectedFocusTypes,\r\n  toggleFocusType,\r\n  includeAudio,\r\n  setIncludeAudio,\r\n  customCharacterLimit,\r\n  setCustomCharacterLimit,\r\n  showSettings,\r\n  setShowSettings,\r\n  copied,\r\n  copyToClipboard,\r\n}: AIEnhancementProps) {\r\n  return (\r\n    <Card className=\"w-full\">\r\n      <CardHeader>\r\n        <CardTitle className=\"flex items-center gap-2\">\r\n          <Sparkles className=\"w-5 h-5 text-purple-600\" />\r\n          AI Enhanced Prompt\r\n        </CardTitle>\r\n      </CardHeader>\r\n      <CardContent>\r\n        <div className=\"space-y-4\">\r\n          {/* Main AI Enhance Button - Large and Prominent */}\r\n          <Button\r\n            onClick={enhanceWithSelectedFocus}\r\n            disabled={isEnhancing}\r\n            size=\"lg\"\r\n            className=\"w-full h-16 text-lg font-bold bg-gradient-to-r from-green-600 to-blue-600 hover:from-green-700 hover:to-blue-700 text-white shadow-lg transform hover:scale-[1.02] transition-all duration-200\"\r\n          >\r\n            {isEnhancing ? (\r\n              <>\r\n                <Loader2 className=\"w-6 h-6 mr-3 animate-spin\" />\r\n                Enhancing with AI...\r\n              </>\r\n            ) : (\r\n              <>\r\n                <Sparkles className=\"w-6 h-6 mr-3\" />\r\n                {enhancedPrompt.trim()\r\n                  ? \"Re-enhance with AI\"\r\n                  : \"Enhance with AI\"}\r\n                {selectedFocusTypes.length > 0 && (\r\n                  <span className=\"ml-2 text-sm opacity-90\">\r\n                    ({selectedFocusTypes.length} focus\r\n                    {selectedFocusTypes.length !== 1 ? \"es\" : \"\"})\r\n                  </span>\r\n                )}\r\n              </>\r\n            )}\r\n          </Button>\r\n          {/* Quick Enhancement Actions */}\r\n          <div className=\"grid grid-cols-2 md:grid-cols-3 lg:grid-cols-5 gap-2\">\r\n            <Button\r\n              variant={\r\n                selectedFocusTypes.includes(\"character\") ? \"default\" : \"outline\"\r\n              }\r\n              size=\"sm\"\r\n              onClick={() => toggleFocusType(\"character\")}\r\n              className=\"text-xs\"\r\n            >\r\n              👤 Focus Character\r\n            </Button>\r\n            <Button\r\n              variant={\r\n                selectedFocusTypes.includes(\"action\") ? \"default\" : \"outline\"\r\n              }\r\n              size=\"sm\"\r\n              onClick={() => toggleFocusType(\"action\")}\r\n              className=\"text-xs\"\r\n            >\r\n              🎬 Focus Action\r\n            </Button>\r\n            <Button\r\n              variant={\r\n                selectedFocusTypes.includes(\"cinematic\") ? \"default\" : \"outline\"\r\n              }\r\n              size=\"sm\"\r\n              onClick={() => toggleFocusType(\"cinematic\")}\r\n              className=\"text-xs\"\r\n            >\r\n              🎥 More Cinematic\r\n            </Button>\r\n            <Button\r\n              variant={includeAudio ? \"default\" : \"outline\"}\r\n              size=\"sm\"\r\n              onClick={() => setIncludeAudio(!includeAudio)}\r\n              className={`text-xs ${\r\n                includeAudio\r\n                  ? \"bg-blue-600 text-white border-blue-600 hover:bg-blue-700\"\r\n                  : \"bg-blue-50 border-blue-200 hover:bg-blue-100\"\r\n              }`}\r\n            >\r\n              🔊 Audio & Voice\r\n            </Button>\r\n            <Button\r\n              variant={\r\n                selectedFocusTypes.includes(\"safe\") ? \"default\" : \"outline\"\r\n              }\r\n              size=\"sm\"\r\n              onClick={() => toggleFocusType(\"safe\")}\r\n              className={`text-xs ${\r\n                selectedFocusTypes.includes(\"safe\")\r\n                  ? \"bg-green-600 text-white border-green-600 hover:bg-green-700\"\r\n                  : \"bg-green-50 border-green-200 hover:bg-green-100\"\r\n              }`}\r\n            >\r\n              🛡️ Safe Content\r\n            </Button>\r\n          </div>\r\n          {/* Collapsible Settings */}\r\n          <div className=\"border rounded-lg\">\r\n            <Button\r\n              variant=\"ghost\"\r\n              onClick={() => setShowSettings(!showSettings)}\r\n              className=\"w-full justify-between p-3 h-auto\"\r\n            >\r\n              <div className=\"flex items-center gap-2\">\r\n                <Settings className=\"w-4 h-4\" />\r\n                <span className=\"text-sm\">Enhancement Settings</span>\r\n                <Badge\r\n                  variant=\"outline\"\r\n                  className=\"text-xs\"\r\n                >\r\n                  {customCharacterLimit} chars • GPT-4.1\r\n                </Badge>\r\n              </div>\r\n              {showSettings ? (\r\n                <ChevronUp className=\"w-4 h-4\" />\r\n              ) : (\r\n                <ChevronDown className=\"w-4 h-4\" />\r\n              )}\r\n            </Button>\r\n            {showSettings && (\r\n              <div className=\"px-3 pb-3 space-y-3 border-t\">\r\n                {/* Character Limit Slider */}\r\n                <div className=\"space-y-3\">\r\n                  <div className=\"flex items-center justify-between\">\r\n                    <span className=\"text-xs text-muted-foreground\">\r\n                      Character Limit\r\n                    </span>\r\n                    <Badge\r\n                      variant=\"outline\"\r\n                      className=\"text-xs\"\r\n                    >\r\n                      {customCharacterLimit} chars\r\n                    </Badge>\r\n                  </div>\r\n                  <div className=\"space-y-2\">\r\n                    <input\r\n                      type=\"range\"\r\n                      min=\"200\"\r\n                      max=\"10000\"\r\n                      step=\"100\"\r\n                      value={customCharacterLimit}\r\n                      onChange={(e) =>\r\n                        setCustomCharacterLimit(Number(e.target.value))\r\n                      }\r\n                      className=\"w-full h-2 bg-gray-200 rounded-lg appearance-none cursor-pointer slider\"\r\n                    />\r\n                    <div className=\"flex justify-between text-xs text-muted-foreground\">\r\n                      <span>200</span>\r\n                      <span>2K</span>\r\n                      <span>5K</span>\r\n                      <span>10K</span>\r\n                    </div>\r\n                  </div>\r\n                  <div className=\"text-xs text-muted-foreground\">\r\n                    {customCharacterLimit < 600 && \"Concise and focused\"}\r\n                    {customCharacterLimit >= 600 &&\r\n                      customCharacterLimit < 1500 &&\r\n                      \"Balanced detail\"}\r\n                    {customCharacterLimit >= 1500 &&\r\n                      customCharacterLimit < 3000 &&\r\n                      \"Rich and detailed\"}\r\n                    {customCharacterLimit >= 3000 && \"Extremely detailed\"}\r\n                  </div>\r\n                </div>\r\n                {/* Model Info */}\r\n                <div className=\"space-y-2\">\r\n                  <span className=\"text-xs text-muted-foreground\">\r\n                    AI Model\r\n                  </span>\r\n                  <div className=\"p-2 bg-muted rounded text-xs\">\r\n                    <div className=\"font-medium\">GPT-4.1</div>\r\n                    <div className=\"text-muted-foreground\">\r\n                      Best quality enhancement model\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            )}\r\n          </div>\r\n          {enhanceError && (\r\n            <div className=\"p-3 bg-red-50 border border-red-200 rounded-lg\">\r\n              <p className=\"text-sm text-red-600\">{enhanceError}</p>\r\n            </div>\r\n          )}\r\n          {/* AI Enhanced Prompt Display */}\r\n          <div className=\"relative\">\r\n            <Textarea\r\n              value={enhancedPrompt}\r\n              onChange={(e) => setEnhancedPrompt(e.target.value)}\r\n              placeholder=\"Click 'Enhance with AI' to generate a professional, detailed prompt...\"\r\n              className=\"min-h-[500px] font-mono text-sm resize-none whitespace-pre-wrap pr-12 bg-background border-border text-foreground\"\r\n            />\r\n            <Button\r\n              size=\"sm\"\r\n              variant=\"ghost\"\r\n              onClick={() => copyToClipboard(enhancedPrompt)}\r\n              disabled={!enhancedPrompt}\r\n              className=\"absolute top-2 right-2 h-8 w-8 p-0 hover:bg-background/80\"\r\n              title={copied ? \"Copied!\" : \"Copy enhanced prompt\"}\r\n            >\r\n              <Copy className=\"w-4 h-4\" />\r\n            </Button>\r\n          </div>\r\n          {/* Enhancement Info - Compact */}\r\n          {enhancementInfo && (\r\n            <div className=\"p-3 bg-muted/50 rounded-lg\">\r\n              <div className=\"flex justify-between items-center text-xs text-muted-foreground\">\r\n                <div className=\"flex items-center gap-3\">\r\n                  <span>\r\n                    Model:{\" \"}\r\n                    <span className=\"font-medium text-foreground\">\r\n                      {enhancementInfo.modelName || enhancementInfo.model}\r\n                    </span>\r\n                  </span>\r\n                  <span>\r\n                    Length:{\" \"}\r\n                    <span className=\"font-medium text-foreground\">\r\n                      {enhancementInfo.length}\r\n                    </span>\r\n                  </span>\r\n                </div>\r\n                <div className=\"flex items-center gap-2\">\r\n                  <span>\r\n                    Characters:{\" \"}\r\n                    <span className=\"font-medium text-foreground\">\r\n                      {enhancementInfo.actualCharacters} /{\" \"}\r\n                      {enhancementInfo.targetCharacters}\r\n                    </span>\r\n                  </span>\r\n                  <Badge\r\n                    variant={\r\n                      enhancementInfo.actualCharacters <=\r\n                      enhancementInfo.targetCharacters\r\n                        ? \"default\"\r\n                        : \"secondary\"\r\n                    }\r\n                    className=\"text-xs\"\r\n                  >\r\n                    {enhancementInfo.actualCharacters <=\r\n                    enhancementInfo.targetCharacters\r\n                      ? \"✓ Within limit\"\r\n                      : \"⚠ Over limit\"}\r\n                  </Badge>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          )}\r\n          {/* Bottom Enhance Button - Duplicate for convenience */}\r\n          <Button\r\n            onClick={enhanceWithSelectedFocus}\r\n            disabled={isEnhancing}\r\n            size=\"lg\"\r\n            className=\"w-full h-16 text-lg font-bold bg-gradient-to-r from-green-600 to-blue-600 hover:from-green-700 hover:to-blue-700 text-white shadow-lg transform hover:scale-[1.02] transition-all duration-200\"\r\n          >\r\n            {isEnhancing ? (\r\n              <>\r\n                <Loader2 className=\"w-6 h-6 mr-3 animate-spin\" />\r\n                Enhancing with AI...\r\n              </>\r\n            ) : (\r\n              <>\r\n                <Sparkles className=\"w-6 h-6 mr-3\" />\r\n                {enhancedPrompt.trim()\r\n                  ? \"Re-enhance with AI\"\r\n                  : \"Enhance with AI\"}\r\n                {selectedFocusTypes.length > 0 && (\r\n                  <span className=\"ml-2 text-sm opacity-90\">\r\n                    ({selectedFocusTypes.length} focus\r\n                    {selectedFocusTypes.length !== 1 ? \"es\" : \"\"})\r\n                  </span>\r\n                )}\r\n              </>\r\n            )}\r\n          </Button>\r\n\r\n          {/* Payment Button - Only show when we have an enhanced prompt */}\r\n          {generatedPrompt.trim() && (\r\n            <div className=\"mt-6 p-4 bg-gradient-to-r from-purple-50/50 to-blue-50/50 dark:from-purple-950/30 dark:to-blue-950/30 border border-purple-200/50 dark:border-purple-600/30 rounded-lg\">\r\n              <div className=\"text-center mb-4\">\r\n                <h3 className=\"text-lg font-semibold text-purple-900 dark:text-purple-100 mb-2\">\r\n                  Ready to Generate Your Video?\r\n                </h3>\r\n                <p className=\"text-sm text-purple-700 dark:text-purple-300\">\r\n                  Your enhanced prompt is ready! Generate a professional VEO3\r\n                  video for just $1.00\r\n                </p>\r\n              </div>\r\n              <StripePaymentButton\r\n                variant=\"video\"\r\n                toolSlug=\"veo3-prompt-generator\"\r\n                toolTitle=\"VEO3 Video Generator\"\r\n                price={1.0}\r\n                apiEndpoint=\"/api/stripe-prices\"\r\n                checkoutEndpoint=\"/api/create-checkout\"\r\n                className=\"border-0 shadow-none\"\r\n                prompt={generatedPrompt}\r\n                // toolSlug=\"veo3-prompt-generator\"\r\n                // toolTitle=\"VEO3 Video Generator\"\r\n                // onPaymentClick={() => console.log(\"VEO3 payment started\")}\r\n              />\r\n            </div>\r\n          )}\r\n        </div>\r\n      </CardContent>\r\n    </Card>\r\n  );\r\n}\r\n","import {\r\n  Card,\r\n  CardHeader,\r\n  CardTitle,\r\n  CardContent,\r\n  Button,\r\n  Badge,\r\n} from \"@turbo-super/ui\";\r\nimport { Copy, Trash2 } from \"lucide-react\";\r\nimport { HistoryItem } from \"../types\";\r\n\r\ninterface PromptHistoryProps {\r\n  promptHistory: HistoryItem[];\r\n  loadFromHistory: (item: HistoryItem) => void;\r\n  clearHistory: () => void;\r\n  setActiveTab: (tab: string) => void;\r\n}\r\n\r\nexport function PromptHistory({\r\n  promptHistory,\r\n  loadFromHistory,\r\n  clearHistory,\r\n  setActiveTab,\r\n}: PromptHistoryProps) {\r\n  return (\r\n    <Card className=\"w-full\">\r\n      {promptHistory.length > 0 ? (\r\n        <>\r\n          <CardHeader>\r\n            <div className=\"flex items-center justify-between\">\r\n              <CardTitle className=\"flex items-center gap-2\">\r\n                <Copy className=\"w-5 h-5\" />\r\n                Recent Prompts History\r\n                <Badge\r\n                  variant=\"outline\"\r\n                  className=\"ml-2\"\r\n                >\r\n                  {promptHistory.length}/10\r\n                </Badge>\r\n              </CardTitle>\r\n              <Button\r\n                onClick={clearHistory}\r\n                variant=\"ghost\"\r\n                size=\"sm\"\r\n                className=\"text-muted-foreground hover:text-destructive\"\r\n              >\r\n                <Trash2 className=\"w-4 h-4\" />\r\n              </Button>\r\n            </div>\r\n          </CardHeader>\r\n          <CardContent>\r\n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\r\n              {promptHistory.slice(0, 10).map((historyItem) => (\r\n                <div\r\n                  key={historyItem.id}\r\n                  className=\"p-4 border rounded-lg hover:bg-muted/50 transition-colors\"\r\n                >\r\n                  <div className=\"flex justify-between items-start mb-3\">\r\n                    <p className=\"text-xs text-muted-foreground\">\r\n                      {historyItem.timestamp &&\r\n                      typeof historyItem.timestamp === \"object\" &&\r\n                      \"toLocaleString\" in historyItem.timestamp\r\n                        ? historyItem.timestamp.toLocaleString()\r\n                        : String(historyItem.timestamp)}\r\n                    </p>\r\n                    <div className=\"flex gap-1\">\r\n                      {historyItem.model && (\r\n                        <Badge\r\n                          variant=\"outline\"\r\n                          className=\"text-xs\"\r\n                        >\r\n                          {historyItem.model}\r\n                        </Badge>\r\n                      )}\r\n                      <Badge\r\n                        variant=\"secondary\"\r\n                        className=\"text-xs\"\r\n                      >\r\n                        {historyItem.length}\r\n                      </Badge>\r\n                    </div>\r\n                  </div>\r\n                  <p className=\"text-sm mb-3 line-clamp-3\">\r\n                    {historyItem.basicPrompt &&\r\n                    historyItem.basicPrompt.length > 120\r\n                      ? historyItem.basicPrompt.substring(0, 120) + \"...\"\r\n                      : historyItem.basicPrompt}\r\n                  </p>\r\n                  <Button\r\n                    onClick={() => loadFromHistory(historyItem)}\r\n                    variant=\"outline\"\r\n                    size=\"sm\"\r\n                    className=\"w-full\"\r\n                  >\r\n                    Load This Version\r\n                  </Button>\r\n                </div>\r\n              ))}\r\n            </div>\r\n          </CardContent>\r\n        </>\r\n      ) : (\r\n        <CardContent className=\"flex flex-col items-center justify-center py-12\">\r\n          <Copy className=\"w-12 h-12 text-muted-foreground mb-4\" />\r\n          <h3 className=\"text-lg font-semibold mb-2\">No History Yet</h3>\r\n          <p className=\"text-muted-foreground text-center mb-4\">\r\n            Generate and enhance prompts to see them here\r\n          </p>\r\n          <Button\r\n            variant=\"outline\"\r\n            onClick={() => setActiveTab(\"builder\")}\r\n          >\r\n            Start Building\r\n          </Button>\r\n        </CardContent>\r\n      )}\r\n    </Card>\r\n  );\r\n}\r\n","import { PromptData, Character } from \"../types\";\r\n\r\nexport const generatePrompt = (data: PromptData): string => {\r\n  const parts: string[] = [];\r\n\r\n  if (data.scene) parts.push(data.scene);\r\n\r\n  if (data.characters.length > 0) {\r\n    const validCharacters = data.characters.filter(\r\n      (char) => char.name || char.description\r\n    );\r\n    if (validCharacters.length > 0) {\r\n      const characterDescriptions = validCharacters.map((char) => {\r\n        let desc = char.description || char.name || \"a character\";\r\n        if (char.speech && data.language) {\r\n          desc += ` who says in ${data.language.toLowerCase()}: \"${char.speech}\"`;\r\n        }\r\n        return desc;\r\n      });\r\n      parts.push(`featuring ${characterDescriptions.join(\", \")}`);\r\n    }\r\n  }\r\n\r\n  if (data.action) parts.push(`${data.action}`);\r\n  if (data.camera) parts.push(`Shot with ${data.camera.toLowerCase()}`);\r\n  if (data.style) parts.push(`${data.style.toLowerCase()} style`);\r\n  if (data.lighting) parts.push(`${data.lighting.toLowerCase()} lighting`);\r\n  if (data.mood) parts.push(`${data.mood.toLowerCase()} mood`);\r\n\r\n  return parts.length > 0\r\n    ? parts.join(\", \") + \".\"\r\n    : \"Your generated prompt will appear here, or type your own prompt...\";\r\n};\r\n\r\nexport const createRandomPromptData = (): PromptData => {\r\n  const styles = [\r\n    \"Cinematic\",\r\n    \"Documentary\",\r\n    \"Anime\",\r\n    \"Realistic\",\r\n    \"Artistic\",\r\n    \"Vintage\",\r\n    \"Modern\",\r\n  ];\r\n  const cameras = [\r\n    \"Close-up\",\r\n    \"Wide shot\",\r\n    \"Over-the-shoulder\",\r\n    \"Drone view\",\r\n    \"Handheld\",\r\n    \"Static\",\r\n  ];\r\n  const lighting = [\r\n    \"Natural\",\r\n    \"Golden hour\",\r\n    \"Blue hour\",\r\n    \"Dramatic\",\r\n    \"Soft\",\r\n    \"Neon\",\r\n    \"Candlelight\",\r\n  ];\r\n  const moods = [\r\n    \"Peaceful\",\r\n    \"Energetic\",\r\n    \"Mysterious\",\r\n    \"Romantic\",\r\n    \"Tense\",\r\n    \"Joyful\",\r\n    \"Melancholic\",\r\n  ];\r\n  const languages = [\r\n    \"English\",\r\n    \"Spanish\",\r\n    \"French\",\r\n    \"German\",\r\n    \"Italian\",\r\n    \"Russian\",\r\n    \"Japanese\",\r\n    \"Chinese\",\r\n  ];\r\n\r\n  return {\r\n    scene: \"A serene lakeside at sunset\",\r\n    characters: [\r\n      {\r\n        id: \"1\",\r\n        name: \"Person\",\r\n        description: \"A person in casual clothes\",\r\n        speech: Math.random() > 0.5 ? \"Perfect evening for this!\" : \"\",\r\n      },\r\n    ],\r\n    action: \"skipping stones across the water\",\r\n    language: languages[Math.floor(Math.random() * languages.length)],\r\n    style: styles[Math.floor(Math.random() * styles.length)],\r\n    camera: cameras[Math.floor(Math.random() * cameras.length)],\r\n    lighting: lighting[Math.floor(Math.random() * lighting.length)],\r\n    mood: moods[Math.floor(Math.random() * moods.length)],\r\n  };\r\n};\r\n\r\nexport const createEmptyPromptData = (): PromptData => ({\r\n  scene: \"\",\r\n  style: \"\",\r\n  camera: \"\",\r\n  characters: [],\r\n  action: \"\",\r\n  lighting: \"\",\r\n  mood: \"\",\r\n  language: \"English\",\r\n});\r\n\r\nexport const createCharacter = (id?: string): Character => ({\r\n  id: id || Date.now().toString(),\r\n  name: \"\",\r\n  description: \"\",\r\n  speech: \"\",\r\n});\r\n\r\nexport const copyToClipboard = async (text: string): Promise<boolean> => {\r\n  try {\r\n    await navigator.clipboard.writeText(text);\r\n    return true;\r\n  } catch (error) {\r\n    console.error(\"Failed to copy to clipboard:\", error);\r\n    return false;\r\n  }\r\n};\r\n\r\nexport const getLocaleLanguage = (): string => {\r\n  if (typeof window === \"undefined\") return \"English\";\r\n\r\n  const locale = window.location.pathname.split(\"/\")[1];\r\n  const localeToLanguage: Record<string, string> = {\r\n    en: \"English\",\r\n    ru: \"Russian\",\r\n    es: \"Spanish\",\r\n    hi: \"Hindi\",\r\n    tr: \"Turkish\",\r\n  };\r\n\r\n  return localeToLanguage[locale] || \"English\";\r\n};\r\n","import { PresetOptions } from \"../types\";\r\n\r\nexport const PRESET_OPTIONS: PresetOptions = {\r\n  styles: [\r\n    \"Cinematic\",\r\n    \"Documentary\",\r\n    \"Anime\",\r\n    \"Realistic\",\r\n    \"Artistic\",\r\n    \"Vintage\",\r\n    \"Modern\",\r\n  ],\r\n  cameras: [\r\n    \"Close-up\",\r\n    \"Wide shot\",\r\n    \"Over-the-shoulder\",\r\n    \"Drone view\",\r\n    \"Handheld\",\r\n    \"Static\",\r\n  ],\r\n  lighting: [\r\n    \"Natural\",\r\n    \"Golden hour\",\r\n    \"Blue hour\",\r\n    \"Dramatic\",\r\n    \"Soft\",\r\n    \"Neon\",\r\n    \"Candlelight\",\r\n  ],\r\n  moods: [\r\n    \"Peaceful\",\r\n    \"Energetic\",\r\n    \"Mysterious\",\r\n    \"Romantic\",\r\n    \"Tense\",\r\n    \"Joyful\",\r\n    \"Melancholic\",\r\n  ],\r\n  languages: [\r\n    \"English\",\r\n    \"Spanish\",\r\n    \"French\",\r\n    \"German\",\r\n    \"Italian\",\r\n    \"Russian\",\r\n    \"Japanese\",\r\n    \"Chinese\",\r\n  ],\r\n};\r\n\r\nexport const STORAGE_KEYS = {\r\n  PROMPT_HISTORY: \"veo3-prompt-history\",\r\n  CUSTOM_CHARACTER_LIMIT: \"veo3-custom-character-limit\",\r\n  INCLUDE_AUDIO: \"veo3-include-audio\",\r\n  MOODBOARD_ENABLED: \"veo3-moodboard-enabled\",\r\n} as const;\r\n\r\nexport const DEFAULT_VALUES = {\r\n  CHARACTER_LIMIT: 4000,\r\n  LANGUAGE: \"English\",\r\n  INCLUDE_AUDIO: true,\r\n  MOODBOARD_ENABLED: true,\r\n  HISTORY_LIMIT: 10,\r\n} as const;\r\n","\"use client\";\r\n\r\nimport { useState, useEffect } from \"react\";\r\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@turbo-super/ui\";\r\nimport { BookOpen } from \"lucide-react\";\r\nimport { PromptBuilder } from \"./PromptBuilder\";\r\nimport { PromptPreview } from \"./PromptPreview\";\r\nimport { AIEnhancement } from \"./AIEnhancement\";\r\nimport { PromptHistory } from \"./PromptHistory\";\r\nimport {\r\n  PromptData,\r\n  EnhancementInfo,\r\n  MoodboardImage,\r\n  PresetOptions,\r\n  HistoryItem,\r\n  Character,\r\n} from \"../types\";\r\nimport {\r\n  generatePrompt,\r\n  createRandomPromptData,\r\n  copyToClipboard as copyToClipboardUtil,\r\n  getLocaleLanguage,\r\n} from \"../utils\";\r\nimport { PRESET_OPTIONS, DEFAULT_VALUES } from \"../constants\";\r\n\r\ninterface Veo3PromptGeneratorProps {\r\n  enhancePromptFunction?: (params: {\r\n    prompt: string;\r\n    customLimit: number;\r\n    model: string;\r\n    focusType?: string;\r\n    includeAudio: boolean;\r\n    promptData: PromptData;\r\n    moodboard?: {\r\n      enabled: boolean;\r\n      images: MoodboardImage[];\r\n    };\r\n  }) => Promise<{\r\n    enhancedPrompt: string;\r\n    model?: string;\r\n    characterLimit?: number;\r\n    characterCount?: number;\r\n    targetCharacters?: number;\r\n    metadata?: any;\r\n  }>;\r\n  MoodboardUploader?: React.ComponentType<{\r\n    images: MoodboardImage[];\r\n    setImages: (images: MoodboardImage[]) => void;\r\n  }>;\r\n  showInfoBanner?: boolean;\r\n  className?: string;\r\n}\r\n\r\nexport function Veo3PromptGenerator({\r\n  enhancePromptFunction,\r\n  MoodboardUploader,\r\n  showInfoBanner = true,\r\n  className = \"\",\r\n}: Veo3PromptGeneratorProps) {\r\n  const [promptData, setPromptData] = useState<PromptData>({\r\n    scene: \"\",\r\n    style: \"\",\r\n    camera: \"\",\r\n    characters: [{ id: \"default\", name: \"\", description: \"\", speech: \"\" }],\r\n    action: \"\",\r\n    lighting: \"\",\r\n    mood: \"\",\r\n    language: \"English\",\r\n  });\r\n  const [generatedPrompt, setGeneratedPrompt] = useState(\"\");\r\n  const [enhancedPrompt, setEnhancedPrompt] = useState(\"\");\r\n  const [isEnhancing, setIsEnhancing] = useState(false);\r\n  const [enhanceError, setEnhanceError] = useState(\"\");\r\n  const [customCharacterLimit, setCustomCharacterLimit] = useState<number>(\r\n    DEFAULT_VALUES.CHARACTER_LIMIT\r\n  );\r\n  const [selectedModel] = useState<\"gpt-4.1\">(\"gpt-4.1\");\r\n  const [promptHistory, setPromptHistory] = useState<HistoryItem[]>([]);\r\n  const [showSettings, setShowSettings] = useState(false);\r\n  const [copied, setCopied] = useState(false);\r\n  const [enhancementInfo, setEnhancementInfo] =\r\n    useState<EnhancementInfo | null>(null);\r\n  const [activeTab, setActiveTab] = useState(\"builder\");\r\n  const [selectedFocusTypes, setSelectedFocusTypes] = useState<\r\n    Array<\"character\" | \"action\" | \"cinematic\" | \"safe\">\r\n  >([\"safe\"]);\r\n  const [includeAudio, setIncludeAudio] = useState<boolean>(\r\n    DEFAULT_VALUES.INCLUDE_AUDIO\r\n  );\r\n  const [moodboardEnabled, setMoodboardEnabled] = useState<boolean>(\r\n    DEFAULT_VALUES.MOODBOARD_ENABLED\r\n  );\r\n  const [moodboardImages, setMoodboardImages] = useState<MoodboardImage[]>([]);\r\n\r\n  // Load history from localStorage\r\n  useEffect(() => {\r\n    const savedHistory = localStorage.getItem(\"veo3-prompt-history\");\r\n    if (savedHistory) {\r\n      try {\r\n        const parsed = JSON.parse(savedHistory);\r\n        const historyWithDates = parsed.map((item: any) => ({\r\n          ...item,\r\n          timestamp: new Date(item.timestamp),\r\n        }));\r\n        setPromptHistory(historyWithDates);\r\n      } catch (error) {\r\n        console.error(\"Failed to load prompt history:\", error);\r\n      }\r\n    }\r\n  }, []);\r\n\r\n  // Save history to localStorage\r\n  useEffect(() => {\r\n    if (promptHistory.length > 0) {\r\n      localStorage.setItem(\r\n        \"veo3-prompt-history\",\r\n        JSON.stringify(promptHistory)\r\n      );\r\n    }\r\n  }, [promptHistory]);\r\n\r\n  // Generate prompt when promptData changes\r\n  useEffect(() => {\r\n    const hasValidCharacter = promptData.characters.some(\r\n      (char) => char.name || char.description\r\n    );\r\n    if (promptData.scene || hasValidCharacter) {\r\n      const prompt = generatePrompt(promptData);\r\n      setGeneratedPrompt(prompt);\r\n    }\r\n  }, [promptData]);\r\n\r\n  // Set language based on locale\r\n  useEffect(() => {\r\n    const defaultLanguage = getLocaleLanguage();\r\n    setPromptData((prev) => ({ ...prev, language: defaultLanguage }));\r\n  }, []);\r\n\r\n  const addCharacter = () => {\r\n    setPromptData((prev) => ({\r\n      ...prev,\r\n      characters: [\r\n        ...prev.characters,\r\n        { id: Date.now().toString(), name: \"\", description: \"\", speech: \"\" },\r\n      ],\r\n    }));\r\n  };\r\n\r\n  const updateCharacter = (\r\n    id: string,\r\n    field: keyof Character,\r\n    value: string\r\n  ) => {\r\n    setPromptData((prev) => ({\r\n      ...prev,\r\n      characters: prev.characters.map((char) =>\r\n        char.id === id ? { ...char, [field]: value } : char\r\n      ),\r\n    }));\r\n  };\r\n\r\n  const removeCharacter = (id: string) => {\r\n    setPromptData((prev) => ({\r\n      ...prev,\r\n      characters: prev.characters.filter((char) => char.id !== id),\r\n    }));\r\n  };\r\n\r\n  const clearAll = () => {\r\n    const emptyData: PromptData = {\r\n      scene: \"\",\r\n      style: \"\",\r\n      camera: \"\",\r\n      characters: [],\r\n      action: \"\",\r\n      lighting: \"\",\r\n      mood: \"\",\r\n      language: \"English\",\r\n    };\r\n    setPromptData(emptyData);\r\n    setGeneratedPrompt(\"\");\r\n    setEnhancedPrompt(\"\");\r\n    setEnhanceError(\"\");\r\n  };\r\n\r\n  const saveToHistory = (\r\n    basicPrompt: string,\r\n    enhancedPrompt: string,\r\n    length: string,\r\n    model: string,\r\n    promptData: PromptData\r\n  ) => {\r\n    const newHistoryItem: HistoryItem = {\r\n      id: Date.now().toString(),\r\n      timestamp: new Date(),\r\n      basicPrompt,\r\n      enhancedPrompt,\r\n      length,\r\n      model,\r\n      promptData,\r\n    };\r\n    setPromptHistory((prev) => {\r\n      const updated = [newHistoryItem, ...prev];\r\n      return updated.slice(0, 10);\r\n    });\r\n  };\r\n\r\n  const clearHistory = () => {\r\n    setPromptHistory([]);\r\n    localStorage.removeItem(\"veo3-prompt-history\");\r\n  };\r\n\r\n  const randomizePrompt = () => {\r\n    const randomData = createRandomPromptData();\r\n    setPromptData(randomData);\r\n  };\r\n\r\n  const copyToClipboard = async (text: string) => {\r\n    const success = await copyToClipboardUtil(text);\r\n    if (success) {\r\n      setCopied(true);\r\n      setTimeout(() => setCopied(false), 2000);\r\n    }\r\n  };\r\n\r\n  const loadFromHistory = (historyItem: HistoryItem) => {\r\n    setPromptData(historyItem.promptData);\r\n    setGeneratedPrompt(historyItem.basicPrompt);\r\n    setEnhancedPrompt(historyItem.enhancedPrompt);\r\n    if (historyItem.length) {\r\n      const match = historyItem.length.match(/(\\d+)/);\r\n      if (match) {\r\n        const charLimit = parseInt(match[1]);\r\n        if (charLimit >= 200 && charLimit <= 10000) {\r\n          setCustomCharacterLimit(charLimit);\r\n        }\r\n      }\r\n    }\r\n  };\r\n\r\n  const toggleFocusType = (\r\n    focusType: \"character\" | \"action\" | \"cinematic\" | \"safe\"\r\n  ) => {\r\n    setSelectedFocusTypes((prev) => {\r\n      if (prev.includes(focusType)) {\r\n        return prev.filter((type) => type !== focusType);\r\n      } else {\r\n        return [...prev, focusType];\r\n      }\r\n    });\r\n  };\r\n\r\n  const enhancePrompt = async (focusType?: string) => {\r\n    if (!enhancePromptFunction) {\r\n      console.warn(\"No enhance function provided\");\r\n      return;\r\n    }\r\n\r\n    let promptToEnhance = \"\";\r\n    if (activeTab === \"enhance\" && enhancedPrompt.trim()) {\r\n      promptToEnhance = enhancedPrompt.trim();\r\n    } else if (generatedPrompt.trim()) {\r\n      promptToEnhance = generatedPrompt.trim();\r\n    } else {\r\n      return;\r\n    }\r\n\r\n    setIsEnhancing(true);\r\n    setEnhanceError(\"\");\r\n\r\n    try {\r\n      const data = await enhancePromptFunction({\r\n        prompt: promptToEnhance,\r\n        customLimit: customCharacterLimit,\r\n        model: selectedModel,\r\n        focusType: focusType,\r\n        includeAudio: includeAudio,\r\n        promptData: promptData,\r\n        ...(moodboardEnabled && moodboardImages.length > 0\r\n          ? {\r\n              moodboard: {\r\n                enabled: true,\r\n                images: moodboardImages.map((img) => ({\r\n                  id: img.id,\r\n                  url: img.url,\r\n                  base64: img.base64,\r\n                  tags: img.tags,\r\n                  description: img.description,\r\n                  weight: img.weight,\r\n                })),\r\n              },\r\n            }\r\n          : {}),\r\n      });\r\n\r\n      if (data.enhancedPrompt) {\r\n        setEnhancedPrompt(data.enhancedPrompt);\r\n        setEnhancementInfo({\r\n          model: data.model || selectedModel,\r\n          modelName: data.model || selectedModel,\r\n          length: `${data.characterLimit || customCharacterLimit} chars`,\r\n          actualCharacters: data.characterCount || data.enhancedPrompt.length,\r\n          targetCharacters: data.targetCharacters || customCharacterLimit,\r\n        });\r\n\r\n        const basicPromptForHistory =\r\n          activeTab === \"enhance\" && enhancedPrompt.trim()\r\n            ? promptToEnhance\r\n            : generatedPrompt;\r\n        saveToHistory(\r\n          basicPromptForHistory,\r\n          data.enhancedPrompt,\r\n          `${data.characterLimit || customCharacterLimit} chars`,\r\n          data.model || selectedModel,\r\n          promptData\r\n        );\r\n      } else {\r\n        throw new Error(\"No enhanced prompt received\");\r\n      }\r\n    } catch (error) {\r\n      console.error(\"Enhancement error:\", error);\r\n      setEnhanceError(\r\n        error instanceof Error ? error.message : \"Failed to enhance prompt\"\r\n      );\r\n    } finally {\r\n      setIsEnhancing(false);\r\n    }\r\n  };\r\n\r\n  const enhanceWithSelectedFocus = async () => {\r\n    if (selectedFocusTypes.length === 0) {\r\n      await enhancePrompt();\r\n    } else {\r\n      await enhancePrompt(selectedFocusTypes.join(\",\"));\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className={`w-full max-w-6xl mx-auto ${className}`}>\r\n      {/* Info Banner */}\r\n      {showInfoBanner && (\r\n        <div className=\"mb-6 p-4 bg-gradient-to-r from-green-50/10 to-blue-50/10 dark:from-green-950/20 dark:to-blue-950/20 border border-green-200/20 dark:border-green-600/20 rounded-lg\">\r\n          <div className=\"flex items-start gap-3\">\r\n            <div className=\"flex-shrink-0 w-8 h-8 bg-green-100/20 dark:bg-green-900/30 rounded-full flex items-center justify-center\">\r\n              <BookOpen className=\"w-4 h-4 text-green-600 dark:text-green-400\" />\r\n            </div>\r\n            <div className=\"flex-1\">\r\n              <h3 className=\"font-semibold text-green-900 dark:text-green-100 mb-1\">\r\n                Master VEO3 Video Generation\r\n              </h3>\r\n              <p className=\"text-sm text-green-700 dark:text-green-300 mb-2\">\r\n                Learn professional prompting techniques and best practices for\r\n                Google&apos;s most advanced AI video model.\r\n              </p>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      )}\r\n\r\n      <Tabs\r\n        value={activeTab}\r\n        onValueChange={setActiveTab}\r\n        className=\"space-y-6\"\r\n      >\r\n        <TabsList className=\"grid w-full grid-cols-3\">\r\n          <TabsTrigger value=\"builder\">Prompt Builder</TabsTrigger>\r\n          <TabsTrigger value=\"enhance\">AI Enhancement</TabsTrigger>\r\n          <TabsTrigger value=\"history\">\r\n            History ({promptHistory.length}/10)\r\n          </TabsTrigger>\r\n        </TabsList>\r\n\r\n        <TabsContent value=\"builder\">\r\n          <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\r\n            <PromptBuilder\r\n              promptData={promptData}\r\n              setPromptData={setPromptData}\r\n              addCharacter={addCharacter}\r\n              updateCharacter={updateCharacter}\r\n              removeCharacter={removeCharacter}\r\n              presetOptions={PRESET_OPTIONS}\r\n              moodboardEnabled={moodboardEnabled}\r\n              setMoodboardEnabled={setMoodboardEnabled}\r\n              moodboardImages={moodboardImages}\r\n              setMoodboardImages={setMoodboardImages}\r\n              MoodboardUploader={MoodboardUploader || undefined}\r\n            />\r\n            <PromptPreview\r\n              generatedPrompt={generatedPrompt}\r\n              setGeneratedPrompt={setGeneratedPrompt}\r\n              randomizePrompt={randomizePrompt}\r\n              clearAll={clearAll}\r\n              copyToClipboard={copyToClipboard}\r\n              copied={copied}\r\n              setActiveTab={setActiveTab}\r\n              isEnhancing={isEnhancing}\r\n              enhancePrompt={enhancePrompt}\r\n            />\r\n          </div>\r\n        </TabsContent>\r\n\r\n        <TabsContent value=\"enhance\">\r\n          <AIEnhancement\r\n            enhancedPrompt={enhancedPrompt}\r\n            setEnhancedPrompt={setEnhancedPrompt}\r\n            generatedPrompt={generatedPrompt}\r\n            enhanceWithSelectedFocus={enhanceWithSelectedFocus}\r\n            isEnhancing={isEnhancing}\r\n            enhanceError={enhanceError}\r\n            enhancementInfo={enhancementInfo}\r\n            selectedFocusTypes={selectedFocusTypes}\r\n            toggleFocusType={toggleFocusType}\r\n            includeAudio={includeAudio}\r\n            setIncludeAudio={setIncludeAudio}\r\n            customCharacterLimit={customCharacterLimit}\r\n            setCustomCharacterLimit={setCustomCharacterLimit}\r\n            showSettings={showSettings}\r\n            setShowSettings={setShowSettings}\r\n            copied={copied}\r\n            copyToClipboard={copyToClipboard}\r\n          />\r\n        </TabsContent>\r\n\r\n        <TabsContent value=\"history\">\r\n          <PromptHistory\r\n            promptHistory={promptHistory}\r\n            loadFromHistory={loadFromHistory}\r\n            clearHistory={clearHistory}\r\n            setActiveTab={setActiveTab}\r\n          />\r\n        </TabsContent>\r\n      </Tabs>\r\n    </div>\r\n  );\r\n}\r\n","export interface Character {\r\n  id: string;\r\n  name: string;\r\n  description: string;\r\n  speech: string;\r\n}\r\n\r\nexport interface PromptData {\r\n  scene: string;\r\n  style: string;\r\n  camera: string;\r\n  characters: Character[];\r\n  action: string;\r\n  lighting: string;\r\n  mood: string;\r\n  language: string;\r\n}\r\n\r\nexport interface EnhancementInfo {\r\n  model: string;\r\n  modelName: string;\r\n  length: string;\r\n  actualCharacters: number;\r\n  targetCharacters: number;\r\n}\r\n\r\nexport interface MoodboardImage {\r\n  id: string;\r\n  file?: File;\r\n  url?: string;\r\n  base64?: string;\r\n  tags: string[];\r\n  description: string;\r\n  weight: number;\r\n}\r\n\r\nexport interface PresetOptions {\r\n  styles: string[];\r\n  cameras: string[];\r\n  lighting: string[];\r\n  moods: string[];\r\n  languages: string[];\r\n}\r\n\r\nexport interface HistoryItem {\r\n  id: string;\r\n  timestamp: Date;\r\n  basicPrompt: string;\r\n  enhancedPrompt: string;\r\n  length: string;\r\n  model: string;\r\n  promptData: PromptData;\r\n}\r\n\r\n// Export types as values for JavaScript compatibility\r\nexport const PromptDataType = {} as PromptData;\r\nexport const MoodboardImageType = {} as MoodboardImage;\r\nexport const CharacterType = {} as Character;\r\nexport const EnhancementInfoType = {} as EnhancementInfo;\r\nexport const PresetOptionsType = {} as PresetOptions;\r\nexport const HistoryItemType = {} as HistoryItem;\r\n"]}