{"version":3,"sources":["../src/image-generation/strategies/text-to-image.ts","../src/image-generation/strategies/image-to-image.ts","../src/image-generation/strategies/inpainting.ts","../src/image-generation/utils.ts","../src/video-generation/strategies/text-to-video.ts","../src/video-generation/strategies/video-to-video.ts","../src/video-generation/utils.ts","../src/balance/services.ts","../src/artifacts/services.ts","../src/ai-tools/tools.ts","../src/ai-tools/configuration/image-generation.ts","../src/ai-tools/configuration/video-generation.ts","../src/ai-tools/configuration/script-generation.ts","../src/ai-tools/image-generation-tools.ts","../src/ai-tools/video-generation-tools.ts","../src/ai-tools/video-models-tools.ts","../src/ai-tools/prompt-enhancement/enhancer.ts","../src/ai-tools/script-generation/generator.ts","../src/ai-tools/enhance-prompt.ts","../src/ai-tools/prompt-enhancement-tool.ts","../src/ai-tools/script-generation-tool.ts","../src/ai-providers/models.ts","../src/ai-providers/test-models.ts","../src/ai-providers/providers.ts","../src/ai-prompts/prompts.ts","../src/entitlements/entitlements.ts","../src/data-stream/writer.ts","../src/chat-media/media.ts","../src/chat-media/artifact-database.ts"],"names":["superDuperAIClient","tool","checkBalanceBeforeArtifact","getOperationDisplayName","style","readableTitle","z","mediaType","generateUUID"],"mappings":"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","file":"index.mjs","sourcesContent":["import { ImageGenerationParams, ImageGenerationResult } from \"../types\";\r\nimport { superDuperAIClient } from \"@turbo-super/api\";\r\n\r\nexport class TextToImageStrategy {\r\n  private client = superDuperAIClient;\r\n\r\n  async generate(\r\n    params: ImageGenerationParams\r\n  ): Promise<ImageGenerationResult> {\r\n    try {\r\n      // Validate parameters\r\n      this.validateParams(params);\r\n\r\n      // Prepare request payload\r\n      const payload = {\r\n        prompt: params.prompt,\r\n        negative_prompt: params.negativePrompt || \"\",\r\n        width: params.width,\r\n        height: params.height,\r\n        steps: params.steps || 20,\r\n        cfg_scale: params.cfgScale || 7.5,\r\n        seed: params.seed || -1,\r\n        model: params.model || \"stable-diffusion-xl\",\r\n      };\r\n\r\n      // Make API request\r\n      const response = await this.client.request<ImageGenerationResult>({\r\n        method: \"POST\",\r\n        url: \"/generation/image\",\r\n        data: payload,\r\n      });\r\n\r\n      return response;\r\n    } catch (error) {\r\n      throw new Error(\r\n        `Text-to-image generation failed: ${error instanceof Error ? error.message : \"Unknown error\"}`\r\n      );\r\n    }\r\n  }\r\n\r\n  private validateParams(params: ImageGenerationParams): void {\r\n    if (!params.prompt || params.prompt.trim().length === 0) {\r\n      throw new Error(\"Prompt is required\");\r\n    }\r\n\r\n    if (params.width <= 0 || params.height <= 0) {\r\n      throw new Error(\"Width and height must be positive numbers\");\r\n    }\r\n\r\n    if (params.steps && (params.steps < 1 || params.steps > 100)) {\r\n      throw new Error(\"Steps must be between 1 and 100\");\r\n    }\r\n\r\n    if (params.cfgScale && (params.cfgScale < 1 || params.cfgScale > 20)) {\r\n      throw new Error(\"CFG Scale must be between 1 and 20\");\r\n    }\r\n  }\r\n}\r\n\r\n// Export default instance\r\nexport const textToImageStrategy = new TextToImageStrategy();\r\n","import { ImageToImageParams, ImageGenerationResult } from \"../types\";\r\nimport { superDuperAIClient } from \"@turbo-super/api\";\r\n\r\nexport class ImageToImageStrategy {\r\n  private client = superDuperAIClient;\r\n\r\n  async generate(params: ImageToImageParams): Promise<ImageGenerationResult> {\r\n    try {\r\n      // Validate parameters\r\n      this.validateParams(params);\r\n\r\n      // Prepare request payload\r\n      const payload = {\r\n        prompt: params.prompt,\r\n        negative_prompt: params.negativePrompt || \"\",\r\n        input_image: params.inputImage,\r\n        width: params.width,\r\n        height: params.height,\r\n        steps: params.steps || 20,\r\n        cfg_scale: params.cfgScale || 7.5,\r\n        seed: params.seed || -1,\r\n        model: params.model || \"stable-diffusion-xl\",\r\n        strength: params.strength || 0.75,\r\n        denoising_strength: params.denoisingStrength || 0.75,\r\n      };\r\n\r\n      // Make API request\r\n      const response = await this.client.request<ImageGenerationResult>({\r\n        method: \"POST\",\r\n        url: \"/generation/image-to-image\",\r\n        data: payload,\r\n      });\r\n\r\n      return response;\r\n    } catch (error) {\r\n      throw new Error(\r\n        `Image-to-image generation failed: ${error instanceof Error ? error.message : \"Unknown error\"}`\r\n      );\r\n    }\r\n  }\r\n\r\n  private validateParams(params: ImageToImageParams): void {\r\n    if (!params.prompt || params.prompt.trim().length === 0) {\r\n      throw new Error(\"Prompt is required\");\r\n    }\r\n\r\n    if (!params.inputImage) {\r\n      throw new Error(\"Input image is required\");\r\n    }\r\n\r\n    if (params.width <= 0 || params.height <= 0) {\r\n      throw new Error(\"Width and height must be positive numbers\");\r\n    }\r\n\r\n    if (params.steps && (params.steps < 1 || params.steps > 100)) {\r\n      throw new Error(\"Steps must be between 1 and 100\");\r\n    }\r\n\r\n    if (params.cfgScale && (params.cfgScale < 1 || params.cfgScale > 20)) {\r\n      throw new Error(\"CFG Scale must be between 1 and 20\");\r\n    }\r\n\r\n    if (params.strength && (params.strength < 0 || params.strength > 1)) {\r\n      throw new Error(\"Strength must be between 0 and 1\");\r\n    }\r\n\r\n    if (\r\n      params.denoisingStrength &&\r\n      (params.denoisingStrength < 0 || params.denoisingStrength > 1)\r\n    ) {\r\n      throw new Error(\"Denoising strength must be between 0 and 1\");\r\n    }\r\n  }\r\n}\r\n\r\n// Export default instance\r\nexport const imageToImageStrategy = new ImageToImageStrategy();\r\n","import { ImageToImageParams, ImageGenerationResult } from \"../types\";\r\nimport { superDuperAIClient } from \"@turbo-super/api\";\r\n\r\nexport interface InpaintingParams extends ImageToImageParams {\r\n  mask: string; // Base64 or URL of the mask\r\n  maskBlur?: number; // Blur radius for the mask edges\r\n}\r\n\r\nexport class InpaintingStrategy {\r\n  private client = superDuperAIClient;\r\n\r\n  async generate(params: InpaintingParams): Promise<ImageGenerationResult> {\r\n    try {\r\n      // Validate parameters\r\n      this.validateParams(params);\r\n\r\n      // Prepare request payload\r\n      const payload = {\r\n        prompt: params.prompt,\r\n        negative_prompt: params.negativePrompt || \"\",\r\n        input_image: params.inputImage,\r\n        mask: params.mask,\r\n        width: params.width,\r\n        height: params.height,\r\n        steps: params.steps || 20,\r\n        cfg_scale: params.cfgScale || 7.5,\r\n        seed: params.seed || -1,\r\n        model: params.model || \"stable-diffusion-xl\",\r\n        strength: params.strength || 0.75,\r\n        mask_blur: params.maskBlur || 4,\r\n      };\r\n\r\n      // Make API request\r\n      const response = await this.client.request<ImageGenerationResult>({\r\n        method: \"POST\",\r\n        url: \"/generation/inpainting\",\r\n        data: payload,\r\n      });\r\n\r\n      return response;\r\n    } catch (error) {\r\n      throw new Error(\r\n        `Inpainting generation failed: ${error instanceof Error ? error.message : \"Unknown error\"}`\r\n      );\r\n    }\r\n  }\r\n\r\n  private validateParams(params: InpaintingParams): void {\r\n    if (!params.prompt || params.prompt.trim().length === 0) {\r\n      throw new Error(\"Prompt is required\");\r\n    }\r\n\r\n    if (!params.inputImage) {\r\n      throw new Error(\"Input image is required\");\r\n    }\r\n\r\n    if (!params.mask) {\r\n      throw new Error(\"Mask is required for inpainting\");\r\n    }\r\n\r\n    if (params.width <= 0 || params.height <= 0) {\r\n      throw new Error(\"Width and height must be positive numbers\");\r\n    }\r\n\r\n    if (params.steps && (params.steps < 1 || params.steps > 100)) {\r\n      throw new Error(\"Steps must be between 1 and 100\");\r\n    }\r\n\r\n    if (params.cfgScale && (params.cfgScale < 1 || params.cfgScale > 20)) {\r\n      throw new Error(\"CFG Scale must be between 1 and 20\");\r\n    }\r\n\r\n    if (params.strength && (params.strength < 0 || params.strength > 1)) {\r\n      throw new Error(\"Strength must be between 0 and 1\");\r\n    }\r\n\r\n    if (params.maskBlur && (params.maskBlur < 0 || params.maskBlur > 64)) {\r\n      throw new Error(\"Mask blur must be between 0 and 64\");\r\n    }\r\n  }\r\n}\r\n\r\n// Export default instance\r\nexport const inpaintingStrategy = new InpaintingStrategy();\r\n","import { ImageGenerationConfig } from \"./types\";\r\n\r\n// Default configuration for image generation\r\nexport const DEFAULT_IMAGE_CONFIG: ImageGenerationConfig = {\r\n  defaultModel: \"stable-diffusion-xl\",\r\n  maxSteps: 50,\r\n  maxCfgScale: 20,\r\n  supportedResolutions: [\r\n    { width: 512, height: 512 },\r\n    { width: 768, height: 768 },\r\n    { width: 1024, height: 1024 },\r\n    { width: 1024, height: 768 },\r\n    { width: 768, height: 1024 },\r\n  ],\r\n  defaultStrength: 0.75,\r\n};\r\n\r\n// Image generation types\r\nexport type ImageGenType = \"text-to-image\" | \"image-to-image\";\r\n\r\n// Utility functions for image generation\r\nexport class ImageGenerationUtils {\r\n  /**\r\n   * Validate if resolution is supported\r\n   */\r\n  static isResolutionSupported(width: number, height: number): boolean {\r\n    return DEFAULT_IMAGE_CONFIG.supportedResolutions.some(\r\n      (res) => res.width === width && res.height === height\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Get closest supported resolution\r\n   */\r\n  static getClosestResolution(\r\n    width: number,\r\n    height: number\r\n  ): { width: number; height: number } {\r\n    let closest = DEFAULT_IMAGE_CONFIG.supportedResolutions[0];\r\n    let minDistance = Infinity;\r\n\r\n    for (const res of DEFAULT_IMAGE_CONFIG.supportedResolutions) {\r\n      const distance = Math.sqrt(\r\n        Math.pow(res.width - width, 2) + Math.pow(res.height - height, 2)\r\n      );\r\n      if (distance < minDistance) {\r\n        minDistance = distance;\r\n        closest = res;\r\n      }\r\n    }\r\n\r\n    return closest;\r\n  }\r\n\r\n  /**\r\n   * Calculate aspect ratio\r\n   */\r\n  static getAspectRatio(width: number, height: number): number {\r\n    return width / height;\r\n  }\r\n\r\n  /**\r\n   * Check if image is square\r\n   */\r\n  static isSquare(width: number, height: number): boolean {\r\n    return width === height;\r\n  }\r\n\r\n  /**\r\n   * Check if image is portrait\r\n   */\r\n  static isPortrait(width: number, height: number): boolean {\r\n    return height > width;\r\n  }\r\n\r\n  /**\r\n   * Check if image is landscape\r\n   */\r\n  static isLandscape(width: number, height: number): boolean {\r\n    return width > height;\r\n  }\r\n\r\n  /**\r\n   * Generate a random seed\r\n   */\r\n  static generateRandomSeed(): number {\r\n    return Math.floor(Math.random() * 2147483647);\r\n  }\r\n\r\n  /**\r\n   * Validate prompt length\r\n   */\r\n  static validatePromptLength(\r\n    prompt: string,\r\n    maxLength: number = 1000\r\n  ): boolean {\r\n    return prompt.length <= maxLength;\r\n  }\r\n\r\n  /**\r\n   * Sanitize prompt text\r\n   */\r\n  static sanitizePrompt(prompt: string): string {\r\n    return prompt\r\n      .trim()\r\n      .replace(/\\s+/g, \" \") // Replace multiple spaces with single space\r\n      .replace(/[^\\w\\s\\-.,!?()]/g, \"\"); // Remove special characters except basic punctuation\r\n  }\r\n\r\n  /**\r\n   * Normalize image generation type\r\n   */\r\n  static normalizeImageGenerationType(value: any): ImageGenType {\r\n    return value === \"image-to-image\" ? \"image-to-image\" : \"text-to-image\";\r\n  }\r\n\r\n  /**\r\n   * Ensure non-empty prompt with fallback\r\n   */\r\n  static ensureNonEmptyPrompt(input: any, fallback: string): string {\r\n    const str = typeof input === \"string\" ? input.trim() : \"\";\r\n    return str.length > 0 ? str : fallback;\r\n  }\r\n\r\n  /**\r\n   * Select image-to-image model\r\n   */\r\n  static async selectImageToImageModel(\r\n    rawModelName: string,\r\n    getAvailableImageModels: () => Promise<any[]>,\r\n    options?: { allowInpainting?: boolean }\r\n  ): Promise<string | null> {\r\n    const allowInpainting = options?.allowInpainting ?? false;\r\n    const allImageModels = await getAvailableImageModels();\r\n    const allI2I = allImageModels.filter(\r\n      (m: any) => m.type === \"image_to_image\"\r\n    );\r\n\r\n    const wants = String(rawModelName || \"\");\r\n    const baseToken = wants.toLowerCase().includes(\"flux\")\r\n      ? \"flux\"\r\n      : wants.split(\"/\").pop()?.split(\"-\")[0] || wants.toLowerCase();\r\n\r\n    const candidates = allowInpainting\r\n      ? allI2I\r\n      : allI2I.filter((m: any) => !/inpaint/i.test(String(m.name || \"\")));\r\n\r\n    let pick = candidates.find(\r\n      (m: any) =>\r\n        String(m.name || \"\").toLowerCase() === wants.toLowerCase() ||\r\n        String(m.label || \"\").toLowerCase() === wants.toLowerCase()\r\n    );\r\n    if (!pick && baseToken) {\r\n      pick = candidates.find(\r\n        (m: any) =>\r\n          String(m.name || \"\")\r\n            .toLowerCase()\r\n            .includes(baseToken) ||\r\n          String(m.label || \"\")\r\n            .toLowerCase()\r\n            .includes(baseToken)\r\n      );\r\n    }\r\n    if (!pick && candidates.length > 0) pick = candidates[0];\r\n\r\n    return pick?.name || null;\r\n  }\r\n}\r\n","import { VideoGenerationParams, VideoGenerationResult } from \"../types\";\r\nimport { superDuperAIClient } from \"@turbo-super/api\";\r\n\r\nexport class TextToVideoStrategy {\r\n  private client = superDuperAIClient;\r\n\r\n  async generate(\r\n    params: VideoGenerationParams\r\n  ): Promise<VideoGenerationResult> {\r\n    try {\r\n      // Validate parameters\r\n      this.validateParams(params);\r\n\r\n      // Prepare request payload\r\n      const payload = {\r\n        prompt: params.prompt,\r\n        negative_prompt: params.negativePrompt || \"\",\r\n        width: params.width,\r\n        height: params.height,\r\n        duration: params.duration,\r\n        fps: params.fps || 24,\r\n        model: params.model || \"veo-2\",\r\n        seed: params.seed || -1,\r\n      };\r\n\r\n      // Make API request\r\n      const response = await this.client.request<VideoGenerationResult>({\r\n        method: \"POST\",\r\n        url: \"/generation/video\",\r\n        data: payload,\r\n      });\r\n\r\n      return response;\r\n    } catch (error) {\r\n      throw new Error(\r\n        `Text-to-video generation failed: ${error instanceof Error ? error.message : \"Unknown error\"}`\r\n      );\r\n    }\r\n  }\r\n\r\n  private validateParams(params: VideoGenerationParams): void {\r\n    if (!params.prompt || params.prompt.trim().length === 0) {\r\n      throw new Error(\"Prompt is required\");\r\n    }\r\n\r\n    if (params.width <= 0 || params.height <= 0) {\r\n      throw new Error(\"Width and height must be positive numbers\");\r\n    }\r\n\r\n    if (params.duration <= 0 || params.duration > 60) {\r\n      throw new Error(\"Duration must be between 0 and 60 seconds\");\r\n    }\r\n\r\n    if (params.fps && (params.fps < 1 || params.fps > 60)) {\r\n      throw new Error(\"FPS must be between 1 and 60\");\r\n    }\r\n  }\r\n}\r\n\r\n// Export default instance\r\nexport const textToVideoStrategy = new TextToVideoStrategy();\r\n","import { VideoToVideoParams, VideoGenerationResult } from \"../types\";\r\nimport { superDuperAIClient } from \"@turbo-super/api\";\r\n\r\nexport class VideoToVideoStrategy {\r\n  private client = superDuperAIClient;\r\n\r\n  async generate(params: VideoToVideoParams): Promise<VideoGenerationResult> {\r\n    try {\r\n      // Validate parameters\r\n      this.validateParams(params);\r\n\r\n      // Prepare request payload\r\n      const payload = {\r\n        prompt: params.prompt,\r\n        negative_prompt: params.negativePrompt || \"\",\r\n        input_video: params.inputVideo,\r\n        width: params.width,\r\n        height: params.height,\r\n        duration: params.duration,\r\n        fps: params.fps || 24,\r\n        model: params.model || \"veo-2\",\r\n        seed: params.seed || -1,\r\n        strength: params.strength || 0.75,\r\n      };\r\n\r\n      // Make API request\r\n      const response = await this.client.request<VideoGenerationResult>({\r\n        method: \"POST\",\r\n        url: \"/generation/video-to-video\",\r\n        data: payload,\r\n      });\r\n\r\n      return response;\r\n    } catch (error) {\r\n      throw new Error(\r\n        `Video-to-video generation failed: ${error instanceof Error ? error.message : \"Unknown error\"}`\r\n      );\r\n    }\r\n  }\r\n\r\n  private validateParams(params: VideoToVideoParams): void {\r\n    if (!params.prompt || params.prompt.trim().length === 0) {\r\n      throw new Error(\"Prompt is required\");\r\n    }\r\n\r\n    if (!params.inputVideo) {\r\n      throw new Error(\"Input video is required\");\r\n    }\r\n\r\n    if (params.width <= 0 || params.height <= 0) {\r\n      throw new Error(\"Width and height must be positive numbers\");\r\n    }\r\n\r\n    if (params.duration <= 0 || params.duration > 60) {\r\n      throw new Error(\"Duration must be between 0 and 60 seconds\");\r\n    }\r\n\r\n    if (params.fps && (params.fps < 1 || params.fps > 60)) {\r\n      throw new Error(\"FPS must be between 1 and 60\");\r\n    }\r\n\r\n    if (params.strength && (params.strength < 0 || params.strength > 1)) {\r\n      throw new Error(\"Strength must be between 0 and 1\");\r\n    }\r\n  }\r\n}\r\n\r\n// Export default instance\r\nexport const videoToVideoStrategy = new VideoToVideoStrategy();\r\n","import { VideoGenerationConfig } from \"./types\";\r\n\r\n// Default configuration for video generation\r\nexport const DEFAULT_VIDEO_CONFIG: VideoGenerationConfig = {\r\n  defaultModel: \"veo-2\",\r\n  maxDuration: 60,\r\n  minDuration: 1,\r\n  supportedFps: [24, 25, 30, 60],\r\n  supportedResolutions: [\r\n    { width: 512, height: 512 },\r\n    { width: 768, height: 768 },\r\n    { width: 1024, height: 1024 },\r\n    { width: 1024, height: 768 },\r\n    { width: 768, height: 1024 },\r\n  ],\r\n  defaultStrength: 0.75,\r\n};\r\n\r\n// Utility functions for video generation\r\nexport class VideoGenerationUtils {\r\n  /**\r\n   * Validate if resolution is supported\r\n   */\r\n  static isResolutionSupported(width: number, height: number): boolean {\r\n    return DEFAULT_VIDEO_CONFIG.supportedResolutions.some(\r\n      (res) => res.width === width && res.height === height\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Get closest supported resolution\r\n   */\r\n  static getClosestResolution(\r\n    width: number,\r\n    height: number\r\n  ): { width: number; height: number } {\r\n    let closest = DEFAULT_VIDEO_CONFIG.supportedResolutions[0];\r\n    let minDistance = Infinity;\r\n\r\n    for (const res of DEFAULT_VIDEO_CONFIG.supportedResolutions) {\r\n      const distance = Math.sqrt(\r\n        Math.pow(res.width - width, 2) + Math.pow(res.height - height, 2)\r\n      );\r\n      if (distance < minDistance) {\r\n        minDistance = distance;\r\n        closest = res;\r\n      }\r\n    }\r\n\r\n    return closest;\r\n  }\r\n\r\n  /**\r\n   * Validate duration\r\n   */\r\n  static validateDuration(duration: number): boolean {\r\n    return (\r\n      duration >= DEFAULT_VIDEO_CONFIG.minDuration &&\r\n      duration <= DEFAULT_VIDEO_CONFIG.maxDuration\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Validate FPS\r\n   */\r\n  static validateFps(fps: number): boolean {\r\n    return DEFAULT_VIDEO_CONFIG.supportedFps.includes(fps);\r\n  }\r\n\r\n  /**\r\n   * Get closest supported FPS\r\n   */\r\n  static getClosestFps(fps: number): number {\r\n    let closest = DEFAULT_VIDEO_CONFIG.supportedFps[0];\r\n    let minDistance = Infinity;\r\n\r\n    for (const supportedFps of DEFAULT_VIDEO_CONFIG.supportedFps) {\r\n      const distance = Math.abs(supportedFps - fps);\r\n      if (distance < minDistance) {\r\n        minDistance = distance;\r\n        closest = supportedFps;\r\n      }\r\n    }\r\n\r\n    return closest;\r\n  }\r\n\r\n  /**\r\n   * Calculate video file size estimate\r\n   */\r\n  static estimateFileSize(\r\n    width: number,\r\n    height: number,\r\n    duration: number,\r\n    fps: number\r\n  ): number {\r\n    // Rough estimate: 1 byte per pixel per frame\r\n    const pixelsPerFrame = width * height;\r\n    const totalFrames = duration * fps;\r\n    return pixelsPerFrame * totalFrames;\r\n  }\r\n}\r\n","import {\r\n  UserBalance,\r\n  CreditTransaction,\r\n  CreditUsage,\r\n  BalanceConfig,\r\n} from \"./types\";\r\nimport { superDuperAIClient } from \"@turbo-super/api\";\r\n\r\nexport class BalanceService {\r\n  private client = superDuperAIClient;\r\n\r\n  async getUserBalance(userId: string): Promise<UserBalance> {\r\n    try {\r\n      const response = await this.client.request<UserBalance>({\r\n        method: \"GET\",\r\n        url: `/user/${userId}/balance`,\r\n      });\r\n      return response;\r\n    } catch (error) {\r\n      throw new Error(\r\n        `Failed to get user balance: ${error instanceof Error ? error.message : \"Unknown error\"}`\r\n      );\r\n    }\r\n  }\r\n\r\n  async addCredits(\r\n    userId: string,\r\n    amount: number,\r\n    type: \"purchase\" | \"bonus\"\r\n  ): Promise<CreditTransaction> {\r\n    try {\r\n      const response = await this.client.request<CreditTransaction>({\r\n        method: \"POST\",\r\n        url: `/user/${userId}/credits`,\r\n        data: {\r\n          amount,\r\n          type,\r\n          description: `${type === \"purchase\" ? \"Credit purchase\" : \"Bonus credits\"}`,\r\n        },\r\n      });\r\n      return response;\r\n    } catch (error) {\r\n      throw new Error(\r\n        `Failed to add credits: ${error instanceof Error ? error.message : \"Unknown error\"}`\r\n      );\r\n    }\r\n  }\r\n\r\n  async useCredits(\r\n    userId: string,\r\n    usage: CreditUsage\r\n  ): Promise<CreditTransaction> {\r\n    try {\r\n      const response = await this.client.request<CreditTransaction>({\r\n        method: \"POST\",\r\n        url: `/user/${userId}/credits/use`,\r\n        data: usage,\r\n      });\r\n      return response;\r\n    } catch (error) {\r\n      throw new Error(\r\n        `Failed to use credits: ${error instanceof Error ? error.message : \"Unknown error\"}`\r\n      );\r\n    }\r\n  }\r\n\r\n  async getTransactionHistory(\r\n    userId: string,\r\n    limit = 50,\r\n    offset = 0\r\n  ): Promise<CreditTransaction[]> {\r\n    try {\r\n      const response = await this.client.request<CreditTransaction[]>({\r\n        method: \"GET\",\r\n        url: `/user/${userId}/transactions`,\r\n        params: { limit, offset },\r\n      });\r\n      return response;\r\n    } catch (error) {\r\n      throw new Error(\r\n        `Failed to get transaction history: ${error instanceof Error ? error.message : \"Unknown error\"}`\r\n      );\r\n    }\r\n  }\r\n\r\n  async getBalanceConfig(): Promise<BalanceConfig> {\r\n    try {\r\n      const response = await this.client.request<BalanceConfig>({\r\n        method: \"GET\",\r\n        url: \"/config/balance\",\r\n      });\r\n      return response;\r\n    } catch (error) {\r\n      throw new Error(\r\n        `Failed to get balance config: ${error instanceof Error ? error.message : \"Unknown error\"}`\r\n      );\r\n    }\r\n  }\r\n}\r\n\r\n// Export default instance\r\nexport const balanceService = new BalanceService();\r\n","import {\r\n  Artifact,\r\n  ArtifactCollection,\r\n  ArtifactSearchParams,\r\n  ArtifactKind,\r\n  SaveDocumentProps,\r\n  CreateDocumentCallbackProps,\r\n  UpdateDocumentCallbackProps,\r\n  DocumentHandler,\r\n} from \"./types\";\r\nimport { superDuperAIClient } from \"@turbo-super/api\";\r\n\r\nexport class ArtifactService {\r\n  private client = superDuperAIClient;\r\n\r\n  async getArtifact(id: string): Promise<Artifact> {\r\n    try {\r\n      const response = await this.client.request<Artifact>({\r\n        method: \"GET\",\r\n        url: `/artifacts/${id}`,\r\n      });\r\n      return response;\r\n    } catch (error) {\r\n      throw new Error(\r\n        `Failed to get artifact: ${error instanceof Error ? error.message : \"Unknown error\"}`\r\n      );\r\n    }\r\n  }\r\n\r\n  async getUserArtifacts(\r\n    userId: string,\r\n    params?: ArtifactSearchParams\r\n  ): Promise<Artifact[]> {\r\n    try {\r\n      const response = await this.client.request<Artifact[]>({\r\n        method: \"GET\",\r\n        url: `/user/${userId}/artifacts`,\r\n        params,\r\n      });\r\n      return response;\r\n    } catch (error) {\r\n      throw new Error(\r\n        `Failed to get user artifacts: ${error instanceof Error ? error.message : \"Unknown error\"}`\r\n      );\r\n    }\r\n  }\r\n\r\n  async createArtifact(\r\n    artifact: Omit<Artifact, \"id\" | \"metadata\">\r\n  ): Promise<Artifact> {\r\n    try {\r\n      const response = await this.client.request<Artifact>({\r\n        method: \"POST\",\r\n        url: \"/artifacts\",\r\n        data: artifact,\r\n      });\r\n      return response;\r\n    } catch (error) {\r\n      throw new Error(\r\n        `Failed to create artifact: ${error instanceof Error ? error.message : \"Unknown error\"}`\r\n      );\r\n    }\r\n  }\r\n\r\n  async updateArtifact(\r\n    id: string,\r\n    updates: Partial<Artifact>\r\n  ): Promise<Artifact> {\r\n    try {\r\n      const response = await this.client.request<Artifact>({\r\n        method: \"PUT\",\r\n        url: `/artifacts/${id}`,\r\n        data: updates,\r\n      });\r\n      return response;\r\n    } catch (error) {\r\n      throw new Error(\r\n        `Failed to update artifact: ${error instanceof Error ? error.message : \"Unknown error\"}`\r\n      );\r\n    }\r\n  }\r\n\r\n  async deleteArtifact(id: string): Promise<void> {\r\n    try {\r\n      await this.client.request({\r\n        method: \"DELETE\",\r\n        url: `/artifacts/${id}`,\r\n      });\r\n    } catch (error) {\r\n      throw new Error(\r\n        `Failed to delete artifact: ${error instanceof Error ? error.message : \"Unknown error\"}`\r\n      );\r\n    }\r\n  }\r\n\r\n  async getCollections(userId: string): Promise<ArtifactCollection[]> {\r\n    try {\r\n      const response = await this.client.request<ArtifactCollection[]>({\r\n        method: \"GET\",\r\n        url: `/user/${userId}/collections`,\r\n      });\r\n      return response;\r\n    } catch (error) {\r\n      throw new Error(\r\n        `Failed to get collections: ${error instanceof Error ? error.message : \"Unknown error\"}`\r\n      );\r\n    }\r\n  }\r\n\r\n  async createCollection(\r\n    collection: Omit<ArtifactCollection, \"id\" | \"createdAt\" | \"updatedAt\">\r\n  ): Promise<ArtifactCollection> {\r\n    try {\r\n      const response = await this.client.request<ArtifactCollection>({\r\n        method: \"POST\",\r\n        url: \"/collections\",\r\n        data: collection,\r\n      });\r\n      return response;\r\n    } catch (error) {\r\n      throw new Error(\r\n        `Failed to create collection: ${error instanceof Error ? error.message : \"Unknown error\"}`\r\n      );\r\n    }\r\n  }\r\n\r\n  async addArtifactToCollection(\r\n    collectionId: string,\r\n    artifactId: string\r\n  ): Promise<void> {\r\n    try {\r\n      await this.client.request({\r\n        method: \"POST\",\r\n        url: `/collections/${collectionId}/artifacts`,\r\n        data: { artifactId },\r\n      });\r\n    } catch (error) {\r\n      throw new Error(\r\n        `Failed to add artifact to collection: ${error instanceof Error ? error.message : \"Unknown error\"}`\r\n      );\r\n    }\r\n  }\r\n\r\n  // Utility functions from existing artifacts server.ts\r\n  static getThumbnailUrl(content: string): string | null {\r\n    try {\r\n      const data = JSON.parse(content);\r\n      if (!data) return null;\r\n      // Common fields\r\n      if (typeof data.thumbnailUrl === \"string\") return data.thumbnailUrl;\r\n      if (typeof data.thumbnail_url === \"string\") return data.thumbnail_url;\r\n      // Fallbacks for image/video specific\r\n      if (typeof data.imageUrl === \"string\") return data.imageUrl;\r\n      if (typeof data.videoUrl === \"string\") return data.videoUrl;\r\n    } catch (_) {\r\n      // ignore parse errors\r\n    }\r\n    return null;\r\n  }\r\n\r\n  static createDocumentHandler<T extends ArtifactKind>(config: {\r\n    kind: T;\r\n    onCreateDocument: (params: CreateDocumentCallbackProps) => Promise<string>;\r\n    onUpdateDocument: (params: UpdateDocumentCallbackProps) => Promise<string>;\r\n  }): DocumentHandler<T> {\r\n    return {\r\n      kind: config.kind,\r\n      onCreateDocument: async (args: CreateDocumentCallbackProps) => {\r\n        console.log(\r\n          \"📄 createDocumentHandler.onCreateDocument called for kind:\",\r\n          config.kind\r\n        );\r\n\r\n        const draftContent = await config.onCreateDocument({\r\n          id: args.id,\r\n          title: args.title,\r\n          content: args.content,\r\n          dataStream: args.dataStream,\r\n          session: args.session,\r\n        });\r\n\r\n        console.log(\"📄 Draft content generated:\", draftContent);\r\n\r\n        // Send the content to the stream so it reaches the client\r\n        args.dataStream.writeData({\r\n          type: \"text-delta\",\r\n          content: draftContent,\r\n        });\r\n\r\n        if (args.session?.user?.id) {\r\n          // Extract human-readable title from JSON if needed\r\n          let readableTitle = args.title;\r\n          try {\r\n            // Check if title is JSON for image/video artifacts\r\n            if (config.kind === \"image\" || config.kind === \"video\") {\r\n              if (args.title.startsWith(\"{\") && args.title.endsWith(\"}\")) {\r\n                const titleParams = JSON.parse(args.title);\r\n                // Use prompt as readable title\r\n                readableTitle =\r\n                  titleParams.prompt || `AI Generated ${config.kind}`;\r\n              } else if (args.title.includes('Video: \"')) {\r\n                // Handle video format: 'Video: \"prompt\" {...}'\r\n                const promptMatch = args.title.match(/Video: \"([^\"]+)\"/);\r\n                if (promptMatch) {\r\n                  readableTitle = promptMatch[1];\r\n                }\r\n              }\r\n            }\r\n          } catch (e) {\r\n            console.warn(\"Failed to parse title for readable version:\", e);\r\n          }\r\n\r\n          // Save document to database\r\n          // Note: This would need to be implemented based on your database setup\r\n          console.log(\"📄 Saving document:\", {\r\n            id: args.id,\r\n            title: readableTitle,\r\n            kind: config.kind,\r\n            content: draftContent,\r\n            userId: args.session.user.id,\r\n          });\r\n        }\r\n      },\r\n      onUpdateDocument: async (args: UpdateDocumentCallbackProps) => {\r\n        console.log(\r\n          \"📄 createDocumentHandler.onUpdateDocument called for kind:\",\r\n          config.kind\r\n        );\r\n\r\n        const updatedContent = await config.onUpdateDocument({\r\n          document: args.document,\r\n          description: args.description,\r\n          dataStream: args.dataStream,\r\n          session: args.session,\r\n        });\r\n\r\n        console.log(\"📄 Updated content generated:\", updatedContent);\r\n\r\n        // Send the content to the stream so it reaches the client\r\n        args.dataStream.writeData({\r\n          type: \"text-delta\",\r\n          content: updatedContent,\r\n        });\r\n\r\n        if (args.session?.user?.id) {\r\n          // Update document in database\r\n          // Note: This would need to be implemented based on your database setup\r\n          console.log(\"📄 Updating document:\", {\r\n            id: args.document.id,\r\n            content: updatedContent,\r\n            userId: args.session.user.id,\r\n          });\r\n        }\r\n      },\r\n    };\r\n  }\r\n}\r\n\r\n// Export default instance\r\nexport const artifactService = new ArtifactService();\r\n","// AI Tools for document creation and management\r\n\r\n// Placeholder types for AI SDK compatibility\r\ninterface DataStreamWriter {\r\n  writeData: (data: { type: string; content: any }) => void;\r\n}\r\n\r\ninterface ToolFunction {\r\n  description: string;\r\n  parameters: any;\r\n  execute: (params: any) => Promise<any>;\r\n}\r\n\r\n// Placeholder tool function - this should be imported from the actual application\r\nconst tool = (config: ToolFunction) => config;\r\n\r\n// Placeholder types - these should be imported from the actual application\r\ninterface Document {\r\n  id: string;\r\n  title: string;\r\n  kind: string;\r\n  content?: string;\r\n  createdAt: Date;\r\n}\r\n\r\ninterface Suggestion {\r\n  id: string;\r\n  documentId: string;\r\n  originalText: string;\r\n  suggestedText: string;\r\n  description: string;\r\n  isResolved: boolean;\r\n}\r\n\r\ninterface Session {\r\n  user?: {\r\n    id: string;\r\n    email?: string;\r\n  };\r\n}\r\n\r\n// Placeholder functions - these should be imported from the actual application\r\nconst generateUUID = (): string => {\r\n  return Math.random().toString(36).substring(2) + Date.now().toString(36);\r\n};\r\n\r\nconst getDocumentById = async ({\r\n  id,\r\n}: {\r\n  id: string;\r\n}): Promise<Document | null> => {\r\n  // This should be imported from the actual application\r\n  return null;\r\n};\r\n\r\nconst saveSuggestions = async ({\r\n  suggestions,\r\n}: {\r\n  suggestions: any[];\r\n}): Promise<void> => {\r\n  // This should be imported from the actual application\r\n};\r\n\r\nconst documentHandlersByArtifactKind: Array<{\r\n  kind: string;\r\n  onCreateDocument: (params: any) => Promise<void>;\r\n  onUpdateDocument: (params: any) => Promise<void>;\r\n}> = [\r\n  // This should be imported from the actual application\r\n];\r\n\r\nconst artifactKinds = [\"text\", \"sheet\", \"image\", \"video\", \"script\"] as const;\r\n\r\ninterface CreateDocumentProps {\r\n  session: Session;\r\n  dataStream: DataStreamWriter;\r\n}\r\n\r\nexport const createDocument = ({ session, dataStream }: CreateDocumentProps) =>\r\n  tool({\r\n    description:\r\n      \"Create a document for a writing or content creation activities. This tool will call other functions that will generate the contents of the document based on the title and kind.\",\r\n    parameters: {\r\n      title: { type: \"string\" },\r\n      kind: { type: \"string\", enum: artifactKinds },\r\n      content: { type: \"string\", optional: true },\r\n    },\r\n    execute: async ({\r\n      title,\r\n      kind,\r\n      content,\r\n    }: {\r\n      title: string;\r\n      kind: string;\r\n      content?: string;\r\n    }) => {\r\n      console.log(\"📄 ===== CREATE DOCUMENT TOOL CALLED =====\");\r\n      console.log(\"📄 KIND:\", kind);\r\n      console.log(\"📄 TITLE (first 100 chars):\", title.substring(0, 100));\r\n      console.log(\"📄 CONTENT provided:\", content ? \"Yes\" : \"No\");\r\n      console.log(\"📄 CONTENT length:\", content?.length || 0);\r\n\r\n      const id = generateUUID();\r\n      console.log(\"📄 GENERATED ID:\", id);\r\n\r\n      console.log(\"📄 ✅ WRITING KIND TO DATA STREAM...\");\r\n      dataStream.writeData({\r\n        type: \"kind\",\r\n        content: kind,\r\n      });\r\n\r\n      console.log(\"📄 ✅ WRITING ID TO DATA STREAM...\");\r\n      dataStream.writeData({\r\n        type: \"id\",\r\n        content: id,\r\n      });\r\n\r\n      console.log(\"📄 ✅ WRITING TITLE TO DATA STREAM...\");\r\n      dataStream.writeData({\r\n        type: \"title\",\r\n        content: title,\r\n      });\r\n\r\n      console.log(\"📄 ✅ WRITING CLEAR TO DATA STREAM...\");\r\n      dataStream.writeData({\r\n        type: \"clear\",\r\n        content: \"\",\r\n      });\r\n\r\n      console.log(\"📄 🔍 LOOKING FOR DOCUMENT HANDLER FOR KIND:\", kind);\r\n      console.log(\r\n        \"📄 📋 AVAILABLE HANDLERS:\",\r\n        documentHandlersByArtifactKind.map((h) => h.kind)\r\n      );\r\n\r\n      const documentHandler = documentHandlersByArtifactKind.find(\r\n        (documentHandlerByArtifactKind) =>\r\n          documentHandlerByArtifactKind.kind === kind\r\n      );\r\n\r\n      if (!documentHandler) {\r\n        console.error(\"📄 ❌ NO DOCUMENT HANDLER FOUND FOR KIND:\", kind);\r\n        throw new Error(`No document handler found for kind: ${kind}`);\r\n      }\r\n\r\n      console.log(\"📄 ✅ FOUND DOCUMENT HANDLER, CALLING onCreateDocument...\");\r\n\r\n      try {\r\n        await documentHandler.onCreateDocument({\r\n          id,\r\n          title,\r\n          content,\r\n          dataStream,\r\n          session,\r\n        });\r\n        console.log(\"📄 ✅ DOCUMENT HANDLER COMPLETED SUCCESSFULLY\");\r\n      } catch (error) {\r\n        console.error(\"📄 ❌ DOCUMENT HANDLER ERROR:\", error);\r\n        console.error(\r\n          \"📄 ❌ ERROR STACK:\",\r\n          error instanceof Error ? error.stack : \"No stack\"\r\n        );\r\n        throw error;\r\n      }\r\n\r\n      console.log(\"📄 ✅ WRITING FINISH TO DATA STREAM...\");\r\n      dataStream.writeData({ type: \"finish\", content: \"\" });\r\n\r\n      const result = {\r\n        id,\r\n        title,\r\n        kind,\r\n        content: \"Document created successfully\",\r\n      };\r\n\r\n      console.log(\"📄 ✅ FINAL RESULT:\", result);\r\n      return result;\r\n    },\r\n  });\r\n\r\ninterface UpdateDocumentProps {\r\n  session: Session;\r\n  dataStream: DataStreamWriter;\r\n}\r\n\r\nexport const updateDocument = ({ session, dataStream }: UpdateDocumentProps) =>\r\n  tool({\r\n    description: \"Update a document with the given description.\",\r\n    parameters: {\r\n      id: { type: \"string\", description: \"The ID of the document to update\" },\r\n      description: {\r\n        type: \"string\",\r\n        description: \"The description of changes that need to be made\",\r\n      },\r\n    },\r\n    execute: async ({\r\n      id,\r\n      description,\r\n    }: {\r\n      id: string;\r\n      description: string;\r\n    }) => {\r\n      const document = await getDocumentById({ id });\r\n\r\n      if (!document) {\r\n        return {\r\n          error: \"Document not found\",\r\n        };\r\n      }\r\n\r\n      dataStream.writeData({\r\n        type: \"clear\",\r\n        content: document.title,\r\n      });\r\n\r\n      const documentHandler = documentHandlersByArtifactKind.find(\r\n        (documentHandlerByArtifactKind) =>\r\n          documentHandlerByArtifactKind.kind === document.kind\r\n      );\r\n\r\n      if (!documentHandler) {\r\n        throw new Error(`No document handler found for kind: ${document.kind}`);\r\n      }\r\n\r\n      await documentHandler.onUpdateDocument({\r\n        document,\r\n        description,\r\n        dataStream,\r\n        session,\r\n      });\r\n\r\n      dataStream.writeData({ type: \"finish\", content: \"\" });\r\n\r\n      return {\r\n        id,\r\n        title: document.title,\r\n        kind: document.kind,\r\n        content: \"The document has been updated successfully.\",\r\n      };\r\n    },\r\n  });\r\n\r\ninterface RequestSuggestionsProps {\r\n  session: Session;\r\n  dataStream: DataStreamWriter;\r\n}\r\n\r\nexport const requestSuggestions = ({\r\n  session,\r\n  dataStream,\r\n}: RequestSuggestionsProps) =>\r\n  tool({\r\n    description: \"Request suggestions for a document\",\r\n    parameters: {\r\n      documentId: {\r\n        type: \"string\",\r\n        description: \"The ID of the document to request edits\",\r\n      },\r\n    },\r\n    execute: async ({ documentId }: { documentId: string }) => {\r\n      const document = await getDocumentById({ id: documentId });\r\n\r\n      if (!document || !document.content) {\r\n        return {\r\n          error: \"Document not found\",\r\n        };\r\n      }\r\n\r\n      const suggestions: Array<\r\n        Omit<Suggestion, \"userId\" | \"createdAt\" | \"documentCreatedAt\">\r\n      > = [];\r\n\r\n      // Note: This requires myProvider to be available\r\n      // For now, we'll create a placeholder implementation\r\n      const mockSuggestions = [\r\n        {\r\n          originalText: \"This is a sample sentence.\",\r\n          suggestedText: \"This is an improved sample sentence.\",\r\n          description: \"Enhanced clarity and flow\",\r\n          id: generateUUID(),\r\n          documentId: documentId,\r\n          isResolved: false,\r\n        },\r\n      ];\r\n\r\n      for (const suggestion of mockSuggestions) {\r\n        dataStream.writeData({\r\n          type: \"suggestion\",\r\n          content: suggestion,\r\n        });\r\n\r\n        suggestions.push(suggestion);\r\n      }\r\n\r\n      if (session.user?.id) {\r\n        const userId = session.user.id;\r\n\r\n        await saveSuggestions({\r\n          suggestions: suggestions.map((suggestion) => ({\r\n            ...suggestion,\r\n            userId,\r\n            createdAt: new Date(),\r\n            documentCreatedAt: document.createdAt,\r\n          })),\r\n        });\r\n      }\r\n\r\n      return {\r\n        id: documentId,\r\n        title: document.title,\r\n        kind: document.kind,\r\n        message: \"Suggestions have been added to the document\",\r\n      };\r\n    },\r\n  });\r\n","import { z } from 'zod';\r\nimport { superDuperAIClient } from '@turbo-super/api';\r\nimport { AIImageGenerationConfig, MediaOption, ConfigurationResult } from './types';\r\n\r\n// Schema for image generation configuration\r\nexport const configureImageGenerationSchema = z.object({\r\n  prompt: z.string().optional().describe('Detailed description of the image to generate'),\r\n  sourceImageUrl: z.string().url().optional().describe('Optional source image URL for image-to-image generation'),\r\n  style: z.string().optional().describe('Style of the image (realistic, cinematic, anime, etc.)'),\r\n  resolution: z.string().optional().describe('Image resolution (1920x1080, square, vertical, etc.)'),\r\n  shotSize: z.string().optional().describe('Shot size/camera angle (close-up, medium-shot, etc.)'),\r\n  model: z.string().optional().describe('AI model to use (FLUX, etc.)'),\r\n  seed: z.number().optional().describe('Seed for reproducible results'),\r\n  batchSize: z.number().min(1).max(3).optional().describe('Number of images to generate simultaneously (1-3)'),\r\n});\r\n\r\nexport type ConfigureImageGenerationParams = z.infer<typeof configureImageGenerationSchema>;\r\n\r\nexport class ImageGenerationConfigurationTool {\r\n  private client = superDuperAIClient;\r\n\r\n  /**\r\n   * Configure image generation settings\r\n   */\r\n  async configureImageGeneration(params: ConfigureImageGenerationParams): Promise<ConfigurationResult> {\r\n    try {\r\n      // Validate input\r\n      const validatedParams = configureImageGenerationSchema.parse(params);\r\n\r\n      // If no prompt provided, return configuration panel\r\n      if (!validatedParams.prompt) {\r\n        const config = await this.getImageGenerationConfig();\r\n        return {\r\n          config,\r\n          message: 'Image generation configuration loaded. Please provide a prompt to start generation.',\r\n          suggestions: [\r\n            'Describe the image you want to generate in detail',\r\n            'Choose a style that matches your vision',\r\n            'Select appropriate resolution for your needs',\r\n            'Consider the shot size for composition'\r\n          ],\r\n          nextSteps: [\r\n            'Enter a detailed prompt',\r\n            'Select generation parameters',\r\n            'Click generate to start'\r\n          ]\r\n        };\r\n      }\r\n\r\n      // If prompt provided, start generation\r\n      return await this.startImageGeneration(validatedParams);\r\n    } catch (error) {\r\n      throw new Error(\r\n        `Image generation configuration failed: ${error instanceof Error ? error.message : 'Unknown error'}`\r\n      );\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get image generation configuration\r\n   */\r\n  async getImageGenerationConfig(): Promise<AIImageGenerationConfig> {\r\n    try {\r\n      const response = await this.client.request<{\r\n        availableModels: any[];\r\n        availableResolutions: any[];\r\n        availableStyles: any[];\r\n        availableShotSizes: any[];\r\n        supportedFormats: string[];\r\n        maxBatchSize: number;\r\n        qualityOptions: any[];\r\n        defaultSettings: any;\r\n      }>({\r\n        method: 'GET',\r\n        url: '/api/config/image-generation',\r\n      });\r\n\r\n      return {\r\n        availableModels: this.parseMediaOptions(response.availableModels),\r\n        availableResolutions: this.parseMediaOptions(response.availableResolutions),\r\n        availableStyles: this.parseMediaOptions(response.availableStyles),\r\n        availableShotSizes: this.parseMediaOptions(response.availableShotSizes),\r\n        supportedFormats: response.supportedFormats || ['PNG', 'JPEG', 'WEBP'],\r\n        maxBatchSize: response.maxBatchSize || 3,\r\n        qualityOptions: this.parseMediaOptions(response.qualityOptions),\r\n        defaultSettings: response.defaultSettings || {\r\n          model: 'comfyui/flux',\r\n          resolution: '1024x1024',\r\n          style: 'realistic',\r\n          shotSize: 'medium-shot'\r\n        }\r\n      };\r\n    } catch (error) {\r\n      // Return default configuration if API fails\r\n      return this.getDefaultImageConfig();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Start image generation\r\n   */\r\n  private async startImageGeneration(params: ConfigureImageGenerationParams): Promise<ConfigurationResult> {\r\n    try {\r\n      const generationRequest = {\r\n        prompt: params.prompt,\r\n        sourceImageUrl: params.sourceImageUrl,\r\n        style: params.style || 'realistic',\r\n        resolution: params.resolution || '1024x1024',\r\n        shotSize: params.shotSize || 'medium-shot',\r\n        model: params.model || 'comfyui/flux',\r\n        seed: params.seed,\r\n        batchSize: params.batchSize || 1\r\n      };\r\n\r\n      const response = await this.client.request<{\r\n        success: boolean;\r\n        message: string;\r\n        generationId?: string;\r\n      }>({\r\n        method: 'POST',\r\n        url: '/api/generate/image',\r\n        data: generationRequest,\r\n      });\r\n\r\n      if (response.success) {\r\n        return {\r\n          config: await this.getImageGenerationConfig(),\r\n          message: response.message || 'Image generation started successfully!',\r\n          suggestions: [\r\n            'Monitor generation progress in real-time',\r\n            'Adjust parameters if needed',\r\n            'Save generated images to your gallery'\r\n          ],\r\n          nextSteps: [\r\n            'Wait for generation to complete',\r\n            'Review and download results',\r\n            'Share or save to gallery'\r\n          ]\r\n        };\r\n      } else {\r\n        throw new Error(response.message || 'Failed to start image generation');\r\n      }\r\n    } catch (error) {\r\n      throw new Error(\r\n        `Failed to start image generation: ${error instanceof Error ? error.message : 'Unknown error'}`\r\n      );\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Parse media options from API response\r\n   */\r\n  private parseMediaOptions(options: any[]): MediaOption[] {\r\n    return options.map(option => ({\r\n      id: option.id || option.name || '',\r\n      name: option.name || option.id || '',\r\n      label: option.label || option.name || option.id || '',\r\n      description: option.description || '',\r\n      category: option.category || '',\r\n      tags: option.tags || []\r\n    }));\r\n  }\r\n\r\n  /**\r\n   * Get default image generation configuration\r\n   */\r\n  private getDefaultImageConfig(): AIImageGenerationConfig {\r\n    return {\r\n      availableModels: [\r\n        { id: 'comfyui/flux', name: 'FLUX', label: 'FLUX Pro', description: 'High-quality image generation', category: 'pro' },\r\n        { id: 'comfyui/flux-dev', name: 'FLUX Dev', label: 'FLUX Dev', description: 'Development version', category: 'dev' }\r\n      ],\r\n      availableResolutions: [\r\n        { id: '1024x1024', name: '1024x1024', label: 'Square HD', description: 'Standard square format' },\r\n        { id: '1920x1080', name: '1920x1080', label: 'Full HD', description: 'Widescreen format' },\r\n        { id: '1080x1920', name: '1080x1920', label: 'Portrait HD', description: 'Vertical format' }\r\n      ],\r\n      availableStyles: [\r\n        { id: 'realistic', name: 'Realistic', label: 'Realistic', description: 'Photorealistic style' },\r\n        { id: 'cinematic', name: 'Cinematic', label: 'Cinematic', description: 'Movie-like style' },\r\n        { id: 'anime', name: 'Anime', label: 'Anime', description: 'Japanese animation style' }\r\n      ],\r\n      availableShotSizes: [\r\n        { id: 'close-up', name: 'Close-up', label: 'Close-up', description: 'Tight framing' },\r\n        { id: 'medium-shot', name: 'Medium Shot', label: 'Medium Shot', description: 'Balanced framing' },\r\n        { id: 'long-shot', name: 'Long Shot', label: 'Long Shot', description: 'Wide framing' }\r\n      ],\r\n      supportedFormats: ['PNG', 'JPEG', 'WEBP'],\r\n      maxBatchSize: 3,\r\n      qualityOptions: [\r\n        { id: 'standard', name: 'Standard', label: 'Standard', description: 'Good quality, fast generation' },\r\n        { id: 'high', name: 'High', label: 'High', description: 'Better quality, slower generation' }\r\n      ],\r\n      defaultSettings: {\r\n        model: 'comfyui/flux',\r\n        resolution: '1024x1024',\r\n        style: 'realistic',\r\n        shotSize: 'medium-shot'\r\n      }\r\n    };\r\n  }\r\n}\r\n\r\n// Export default instance\r\nexport const imageGenerationConfigurationTool = new ImageGenerationConfigurationTool();\r\n","// Video generation configuration (placeholder)\r\nexport const videoGenerationConfigurationTool = {\r\n  // TODO: Implement video generation configuration\r\n};\r\n","// Script generation configuration (placeholder)\r\nexport const scriptGenerationConfigurationTool = {\r\n  // TODO: Implement script generation configuration\r\n};\r\n","// Image Generation Tools\r\n\r\n// Placeholder types for AI SDK compatibility\r\ninterface ToolFunction {\r\n  description: string;\r\n  parameters: any;\r\n  execute: (params: any) => Promise<any>;\r\n}\r\n\r\n// Placeholder tool function - this should be imported from the actual application\r\nconst tool = (config: ToolFunction) => config;\r\n\r\n// Placeholder types - these should be imported from the actual application\r\ninterface Session {\r\n  user?: {\r\n    id: string;\r\n    email?: string;\r\n  };\r\n}\r\n\r\ninterface CreateImageDocumentParams {\r\n  createDocument: any;\r\n  session?: Session | null;\r\n  defaultSourceImageUrl?: string;\r\n}\r\n\r\n// Placeholder functions - these should be imported from the actual application\r\nconst getImageGenerationConfig = async () => {\r\n  // This should be imported from the actual application\r\n  return {\r\n    availableModels: [],\r\n    availableResolutions: [],\r\n    availableStyles: [],\r\n  };\r\n};\r\n\r\nconst checkBalanceBeforeArtifact = async (\r\n  session: Session,\r\n  operation: string\r\n) => {\r\n  // This should be imported from the actual application\r\n  return { hasBalance: true };\r\n};\r\n\r\nconst getOperationDisplayName = (operation: string) => {\r\n  // This should be imported from the actual application\r\n  return operation;\r\n};\r\n\r\nexport const configureImageGeneration = (params?: CreateImageDocumentParams) =>\r\n  tool({\r\n    description:\r\n      \"Configure image generation settings or generate an image directly if prompt is provided. Supports text-to-image by default, and image-to-image when a sourceImageUrl is provided. When triggered, creates an image artifact that shows generation progress in real-time.\",\r\n    parameters: {\r\n      prompt: {\r\n        type: \"string\",\r\n        optional: true,\r\n        description:\r\n          \"Detailed description of the image to generate. If provided, will immediately create image artifact and start generation\",\r\n      },\r\n      sourceImageUrl: {\r\n        type: \"string\",\r\n        optional: true,\r\n        description:\r\n          \"Optional source image URL for image-to-image generation (e.g., when the user uploaded an image in chat). If provided, the system will run image-to-image.\",\r\n      },\r\n      style: {\r\n        type: \"string\",\r\n        optional: true,\r\n        description:\r\n          'Style of the image. Supports many formats: \"realistic\", \"cinematic\", \"anime\", \"cartoon\", \"sketch\", \"painting\", \"steampunk\", \"fantasy\", \"sci-fi\", \"horror\", \"minimalist\", \"abstract\", \"portrait\", \"landscape\", and many more available styles',\r\n      },\r\n      resolution: {\r\n        type: \"string\",\r\n        optional: true,\r\n        description:\r\n          'Image resolution. Accepts various formats: \"1920x1080\", \"1920×1080\", \"1920 x 1080\", \"full hd\", \"fhd\", \"1080p\", \"square\", \"vertical\", \"horizontal\", etc.',\r\n      },\r\n      shotSize: {\r\n        type: \"string\",\r\n        optional: true,\r\n        description:\r\n          'Shot size/camera angle. Accepts: \"close-up\", \"medium-shot\", \"long-shot\", \"extreme-close-up\", \"portrait\", \"two-shot\", etc.',\r\n      },\r\n      model: {\r\n        type: \"string\",\r\n        optional: true,\r\n        description:\r\n          'AI model to use. Models are loaded dynamically from SuperDuperAI API. Use model name like \"FLUX\" or full model ID.',\r\n      },\r\n      seed: {\r\n        type: \"number\",\r\n        optional: true,\r\n        description: \"Seed for reproducible results\",\r\n      },\r\n      batchSize: {\r\n        type: \"number\",\r\n        optional: true,\r\n        min: 1,\r\n        max: 3,\r\n        description:\r\n          \"Number of images to generate simultaneously (1-3). Higher batch sizes generate multiple variations at once.\",\r\n      },\r\n    },\r\n    execute: async ({\r\n      prompt,\r\n      sourceImageUrl,\r\n      style,\r\n      resolution,\r\n      shotSize,\r\n      model,\r\n      seed,\r\n      batchSize,\r\n    }: {\r\n      prompt?: string;\r\n      sourceImageUrl?: string;\r\n      style?: string;\r\n      resolution?: string;\r\n      shotSize?: string;\r\n      model?: string;\r\n      seed?: number;\r\n      batchSize?: number;\r\n    }) => {\r\n      console.log(\"🔧 configureImageGeneration called with:\", {\r\n        prompt,\r\n        style,\r\n        resolution,\r\n        shotSize,\r\n        model,\r\n        seed,\r\n        batchSize,\r\n      });\r\n\r\n      // AICODE-NOTE: Use new factory to get configuration with OpenAPI models\r\n      console.log(\"🖼️ Loading image configuration from OpenAPI factory...\");\r\n      const config = await getImageGenerationConfig();\r\n\r\n      console.log(\"🖼️ ✅ Loaded image config:\", {\r\n        modelsCount: config.availableModels.length,\r\n        resolutionsCount: config.availableResolutions.length,\r\n        stylesCount: config.availableStyles.length,\r\n      });\r\n\r\n      // If no prompt provided, return configuration panel\r\n      if (!prompt) {\r\n        console.log(\"🖼️ No prompt provided, returning configuration panel\");\r\n        return {\r\n          type: \"configuration_panel\",\r\n          message:\r\n            \"Image generation configuration panel opened. Please provide a prompt to generate an image.\",\r\n          config: {\r\n            availableModels: config.availableModels,\r\n            availableResolutions: config.availableResolutions,\r\n            availableStyles: config.availableStyles,\r\n          },\r\n        };\r\n      }\r\n\r\n      // Check balance before proceeding\r\n      if (params?.session) {\r\n        const balanceCheck = await checkBalanceBeforeArtifact(\r\n          params.session,\r\n          \"image_generation\"\r\n        );\r\n        if (!balanceCheck.hasBalance) {\r\n          return {\r\n            error: \"Insufficient balance for image generation\",\r\n            operation: getOperationDisplayName(\"image_generation\"),\r\n          };\r\n        }\r\n      }\r\n\r\n      // Create image artifact and start generation\r\n      console.log(\"🖼️ Creating image artifact and starting generation...\");\r\n\r\n      // This is a placeholder implementation\r\n      // In the actual application, this would create an artifact and start the generation process\r\n      return {\r\n        type: \"image_generation_started\",\r\n        message: \"Image generation started successfully\",\r\n        prompt,\r\n        sourceImageUrl,\r\n        style,\r\n        resolution,\r\n        shotSize,\r\n        model,\r\n        seed,\r\n        batchSize,\r\n        artifactId: \"placeholder-artifact-id\",\r\n      };\r\n    },\r\n  });\r\n","// Placeholder for ai-sdk tool function\r\nconst tool = (config: any) => config;\r\n\r\n// Placeholder types for external dependencies\r\ninterface CreateVideoDocumentParams {\r\n  createDocument: any;\r\n  session?: any;\r\n}\r\n\r\ninterface MediaOption {\r\n  id: string;\r\n  label: string;\r\n  description: string;\r\n}\r\n\r\ninterface VideoGenerationConfig {\r\n  type: string;\r\n  availableResolutions: any[];\r\n  availableStyles: MediaOption[];\r\n  availableShotSizes: any[];\r\n  availableModels: any[];\r\n  availableFrameRates: any[];\r\n  defaultSettings: any;\r\n}\r\n\r\ninterface AdaptedModel {\r\n  id: string;\r\n  name: string;\r\n  label: string;\r\n  description: string;\r\n  value: string;\r\n  workflowPath: string;\r\n  price: number;\r\n  type: any;\r\n  source: any;\r\n}\r\n\r\n// Placeholder enums\r\nenum GenerationTypeEnum {\r\n  TEXT_TO_VIDEO = \"text_to_video\",\r\n  IMAGE_TO_VIDEO = \"image_to_video\",\r\n  TEXT_TO_IMAGE = \"text_to_image\",\r\n  IMAGE_TO_IMAGE = \"image_to_image\",\r\n}\r\n\r\nenum GenerationSourceEnum {\r\n  LOCAL = \"local\",\r\n  FAL_AI = \"fal_ai\",\r\n  GOOGLE_CLOUD = \"google_cloud\",\r\n  AZURE_OPENAI_SORA = \"azure_openai_sora\",\r\n  AZURE_OPENAI_IMAGE = \"azure_openai_image\",\r\n}\r\n\r\n// Placeholder functions\r\nasync function getStyles() {\r\n  return { items: [] };\r\n}\r\n\r\nfunction findStyle(style: string, styles: MediaOption[]) {\r\n  return styles.find(s => s.id === style || s.label === style);\r\n}\r\n\r\nasync function createVideoMediaSettings() {\r\n  return { availableModels: [] };\r\n}\r\n\r\nasync function getBestVideoModel(params: any) {\r\n  return null;\r\n}\r\n\r\n// Placeholder constants\r\nconst VIDEO_RESOLUTIONS: any[] = [];\r\nconst SHOT_SIZES: any[] = [];\r\nconst VIDEO_FRAME_RATES: any[] = [];\r\nconst DEFAULT_VIDEO_RESOLUTION = { label: \"HD\" };\r\nconst DEFAULT_VIDEO_DURATION = 5;\r\n\r\nfunction getModelCompatibleResolutions(modelName: string): any[] {\r\n  return VIDEO_RESOLUTIONS;\r\n}\r\n\r\nfunction getDefaultResolutionForModel(modelName: string): any {\r\n  return DEFAULT_VIDEO_RESOLUTION;\r\n}\r\n\r\nasync function checkBalanceBeforeArtifact(session: any, operation: string, operationType: string, multipliers: string[], operationDisplayName: string): Promise<{ valid: boolean; cost: number; userMessage?: string }> {\r\n  return { valid: true, cost: 0 };\r\n}\r\n\r\nfunction getOperationDisplayName(operationType: string): string {\r\n  return operationType;\r\n}\r\n\r\n// Helper function to convert string source to enum\r\nfunction convertSourceToEnum(source: string): GenerationSourceEnum {\r\n  switch (source) {\r\n    case \"local\":\r\n      return GenerationSourceEnum.LOCAL;\r\n    case \"fal_ai\":\r\n      return GenerationSourceEnum.FAL_AI;\r\n    case \"google_cloud\":\r\n      return GenerationSourceEnum.GOOGLE_CLOUD;\r\n    case \"azure_openai_sora\":\r\n      return GenerationSourceEnum.AZURE_OPENAI_SORA;\r\n    case \"azure_openai_image\":\r\n      return GenerationSourceEnum.AZURE_OPENAI_IMAGE;\r\n    default:\r\n      return GenerationSourceEnum.LOCAL;\r\n  }\r\n}\r\n\r\n// Helper function to convert string type to enum\r\nfunction convertTypeToEnum(type: string): GenerationTypeEnum {\r\n  switch (type) {\r\n    case \"text_to_video\":\r\n      return GenerationTypeEnum.TEXT_TO_VIDEO;\r\n    case \"image_to_video\":\r\n      return GenerationTypeEnum.IMAGE_TO_VIDEO;\r\n    case \"text_to_image\":\r\n      return GenerationTypeEnum.TEXT_TO_IMAGE;\r\n    case \"image_to_image\":\r\n      return GenerationTypeEnum.IMAGE_TO_IMAGE;\r\n    default:\r\n      return GenerationTypeEnum.TEXT_TO_VIDEO;\r\n  }\r\n}\r\n\r\nexport const configureVideoGeneration = (params?: CreateVideoDocumentParams) =>\r\n  tool({\r\n    description:\r\n      \"Configure video generation settings or generate a video directly if prompt is provided. When prompt is provided, this will create a video artifact that shows generation progress in real-time. Available models are loaded dynamically from SuperDuperAI API.\",\r\n    parameters: {\r\n      prompt: {\r\n        type: \"string\",\r\n        optional: true,\r\n        description: \"Detailed description of the video to generate. If provided, will immediately create video artifact and start generation\"\r\n      },\r\n      negativePrompt: {\r\n        type: \"string\",\r\n        optional: true,\r\n        description: \"What to avoid in the video generation\"\r\n      },\r\n      style: {\r\n        type: \"string\",\r\n        optional: true,\r\n        description: \"Style of the video\"\r\n      },\r\n      resolution: {\r\n        type: \"string\",\r\n        optional: true,\r\n        description: 'Video resolution (e.g., \"1344x768\", \"1024x1024\"). Default is HD 1344x768 for cost efficiency.'\r\n      },\r\n      shotSize: {\r\n        type: \"string\",\r\n        optional: true,\r\n        description: \"Shot size for the video (extreme-long-shot, long-shot, medium-shot, medium-close-up, close-up, extreme-close-up, two-shot, detail-shot)\"\r\n      },\r\n      model: {\r\n        type: \"string\",\r\n        optional: true,\r\n        description: 'AI model to use. Models are loaded dynamically from SuperDuperAI API. Use model name like \"LTX\" or full model ID. For image-to-video models (VEO, KLING), a source image is required.'\r\n      },\r\n      frameRate: {\r\n        type: \"number\",\r\n        optional: true,\r\n        description: \"Frame rate in FPS (24, 30, 60, 120)\"\r\n      },\r\n      duration: {\r\n        type: \"number\",\r\n        optional: true,\r\n        description: \"Video duration in seconds. Default is 5 seconds for cost efficiency.\"\r\n      },\r\n      sourceImageId: {\r\n        type: \"string\",\r\n        optional: true,\r\n        description: \"ID of source image for image-to-video models (VEO, KLING). Required for image-to-video generation.\"\r\n      },\r\n      sourceImageUrl: {\r\n        type: \"string\",\r\n        optional: true,\r\n        description: \"URL of source image for image-to-video models. Alternative to sourceImageId.\"\r\n      },\r\n      generationType: {\r\n        type: \"string\",\r\n        enum: [\"text-to-video\", \"image-to-video\"],\r\n        optional: true,\r\n        description: 'Generation mode: \"text-to-video\" for text prompts only, \"image-to-video\" when using source image'\r\n      },\r\n    },\r\n    execute: async ({\r\n      prompt,\r\n      negativePrompt,\r\n      style,\r\n      resolution,\r\n      shotSize,\r\n      model,\r\n      frameRate,\r\n      duration,\r\n      sourceImageId,\r\n      sourceImageUrl,\r\n      generationType,\r\n    }: {\r\n      prompt?: string;\r\n      negativePrompt?: string;\r\n      style?: string;\r\n      resolution?: string;\r\n      shotSize?: string;\r\n      model?: string;\r\n      frameRate?: number;\r\n      duration?: number;\r\n      sourceImageId?: string;\r\n      sourceImageUrl?: string;\r\n      generationType?: string;\r\n    }) => {\r\n      console.log(\"🔧 configureVideoGeneration called with:\", {\r\n        prompt,\r\n        negativePrompt,\r\n        style,\r\n        resolution,\r\n        shotSize,\r\n        model,\r\n        frameRate,\r\n        duration,\r\n      });\r\n      console.log(\"🔧 createDocument available:\", !!params?.createDocument);\r\n\r\n      // AICODE-NOTE: Use economical defaults\r\n      const defaultResolution = DEFAULT_VIDEO_RESOLUTION;\r\n      const defaultStyle: MediaOption = {\r\n        id: \"flux_steampunk\",\r\n        label: \"Steampunk\",\r\n        description: \"Steampunk style\",\r\n      };\r\n      const defaultShotSize =\r\n        SHOT_SIZES.find((s: any) => s.id === \"long-shot\") || SHOT_SIZES[0];\r\n\r\n      // AICODE-NOTE: Load models using new factory pattern\r\n      console.log(\r\n        \"🎬 Loading video models from SuperDuperAI API via factory...\"\r\n      );\r\n      const videoSettings = await createVideoMediaSettings();\r\n      const availableModels = videoSettings.availableModels;\r\n\r\n      console.log(\r\n        \"🎬 ✅ Loaded video models:\",\r\n        availableModels.map((m: any) => m.id)\r\n      );\r\n\r\n      // AICODE-NOTE: Use smart model selection that prioritizes text_to_video models like Sora!\r\n      const bestModel: any = await getBestVideoModel({\r\n        vipAllowed: true,\r\n        requireTextToVideo: true, // Prioritize text_to_video for tools\r\n      }); // Allow VIP models for better defaults\r\n\r\n      const defaultModel: AdaptedModel = bestModel\r\n        ? {\r\n            ...bestModel,\r\n            id: bestModel.name,\r\n            label: bestModel.label || bestModel.name,\r\n            description: `${bestModel.label || bestModel.name} - ${bestModel.type}`,\r\n            value: bestModel.name,\r\n            workflowPath: bestModel.params?.workflow_path || \"\",\r\n            price: bestModel.params?.price_per_second || bestModel.price || 0,\r\n            type: convertTypeToEnum(bestModel.type as string),\r\n            source: convertSourceToEnum(bestModel.source as string),\r\n          }\r\n        : ((availableModels.find((m: any) => m.name === \"azure-openai/sora\") ||\r\n            availableModels[0]) as any as AdaptedModel);\r\n\r\n      console.log(\r\n        \"🎯 Smart default model selected:\",\r\n        defaultModel.label,\r\n        \"(type:\",\r\n        defaultModel.type,\r\n        \")\"\r\n      );\r\n\r\n      let styles: MediaOption[] = [];\r\n\r\n      try {\r\n        const response = await getStyles();\r\n        if (\"error\" in response) {\r\n          console.error(response.error);\r\n        } else {\r\n          styles = response.items.map((style: any) => ({\r\n            id: style.name,\r\n            label: style.title ?? style.name,\r\n            description: style.title ?? style.name,\r\n          }));\r\n        }\r\n      } catch (err) {\r\n        console.log(err);\r\n      }\r\n\r\n      // If no prompt provided, return configuration panel\r\n      if (!prompt) {\r\n        console.log(\r\n          \"🔧 No prompt provided, returning video configuration panel\"\r\n        );\r\n        const config: VideoGenerationConfig = {\r\n          type: \"video-generation-settings\",\r\n          availableResolutions: getModelCompatibleResolutions(\r\n            defaultModel.name || defaultModel.id || \"\"\r\n          ),\r\n          availableStyles: styles,\r\n          availableShotSizes: SHOT_SIZES,\r\n          availableModels: availableModels,\r\n          availableFrameRates: VIDEO_FRAME_RATES,\r\n          defaultSettings: {\r\n            resolution: getDefaultResolutionForModel(\r\n              defaultModel.name || defaultModel.id || \"\"\r\n            ),\r\n            style: defaultStyle,\r\n            shotSize: defaultShotSize,\r\n            model: defaultModel,\r\n            frameRate: 30,\r\n            duration: DEFAULT_VIDEO_DURATION, // 5 seconds for economy\r\n            negativePrompt: \"\",\r\n            seed: undefined,\r\n          },\r\n        };\r\n        return config;\r\n      }\r\n\r\n      console.log(\"🔧 ✅ PROMPT PROVIDED, CREATING VIDEO DOCUMENT:\", prompt);\r\n      console.log(\"🔧 ✅ PARAMS OBJECT:\", !!params);\r\n      console.log(\"🔧 ✅ CREATE DOCUMENT AVAILABLE:\", !!params?.createDocument);\r\n\r\n      if (!params?.createDocument) {\r\n        console.log(\r\n          \"🔧 ❌ createDocument not available, returning basic config\"\r\n        );\r\n        const config: VideoGenerationConfig = {\r\n          type: \"video-generation-settings\",\r\n          availableResolutions: getModelCompatibleResolutions(\r\n            defaultModel.name || defaultModel.id || \"\"\r\n          ),\r\n          availableStyles: styles,\r\n          availableShotSizes: SHOT_SIZES,\r\n          availableModels: availableModels,\r\n          availableFrameRates: VIDEO_FRAME_RATES,\r\n          defaultSettings: {\r\n            resolution: getDefaultResolutionForModel(\r\n              defaultModel.name || defaultModel.id || \"\"\r\n            ),\r\n            style: defaultStyle,\r\n            shotSize: defaultShotSize,\r\n            model: defaultModel,\r\n            frameRate: frameRate || 30,\r\n            duration: duration || DEFAULT_VIDEO_DURATION,\r\n            negativePrompt: negativePrompt || \"\",\r\n            seed: undefined,\r\n          },\r\n        };\r\n        return config;\r\n      }\r\n\r\n      try {\r\n        // Find the selected model first (for resolution compatibility check)\r\n        const selectedModel = model\r\n          ? availableModels.find(\r\n              (m: any) =>\r\n                m.label === model ||\r\n                m.id === model ||\r\n                (m as any).apiName === model\r\n            ) || defaultModel\r\n          : defaultModel;\r\n\r\n        // Get model-compatible resolutions\r\n        const compatibleResolutions = getModelCompatibleResolutions(\r\n          selectedModel.name || selectedModel.id || \"\"\r\n        );\r\n\r\n        // Find the selected resolution, but ensure it's compatible with the model\r\n        let selectedResolution = defaultResolution;\r\n        if (resolution) {\r\n          const requestedResolution = VIDEO_RESOLUTIONS.find(\r\n            (r: any) => r.label === resolution\r\n          );\r\n          if (requestedResolution) {\r\n            // Check if requested resolution is compatible with the model\r\n            const isCompatible = compatibleResolutions.some(\r\n              (r: any) => r.label === requestedResolution.label\r\n            );\r\n            if (isCompatible) {\r\n              selectedResolution = requestedResolution;\r\n            } else {\r\n              // Use model-compatible default instead\r\n              selectedResolution = getDefaultResolutionForModel(\r\n                selectedModel.name || selectedModel.id || \"\"\r\n              );\r\n              console.log(\r\n                `🔧 ⚠️ Resolution ${resolution} not compatible with model ${selectedModel.name}, using ${selectedResolution.label} instead`\r\n              );\r\n            }\r\n          }\r\n        } else {\r\n          // No resolution specified, use model-compatible default\r\n          selectedResolution = getDefaultResolutionForModel(\r\n            selectedModel.name || selectedModel.id || \"\"\r\n          );\r\n        }\r\n\r\n        let selectedStyle: MediaOption = defaultStyle;\r\n        if (style) {\r\n          const foundStyle = findStyle(style, styles);\r\n          if (foundStyle) {\r\n            selectedStyle = foundStyle;\r\n            console.log(\r\n              \"🔧 ✅ STYLE MATCHED:\",\r\n              style,\r\n              \"->\",\r\n              selectedStyle.label\r\n            );\r\n          } else {\r\n            console.log(\r\n              \"🔧 ⚠️ STYLE NOT FOUND:\",\r\n              style,\r\n              \"using default:\",\r\n              defaultStyle.label\r\n            );\r\n            console.log(\r\n              \"🔧 📋 Available styles:\",\r\n              styles\r\n                .map((s) => s.label)\r\n                .slice(0, 5)\r\n                .join(\", \"),\r\n              \"...\"\r\n            );\r\n\r\n            // Additional fallback: try to find the most common style types\r\n            const commonStyleFallbacks = [\r\n              \"flux_steampunk\",\r\n              \"steampunk\",\r\n              \"flux_realistic\",\r\n              \"realistic\",\r\n              \"flux_cinematic\",\r\n              \"cinematic\",\r\n              \"flux_anime\",\r\n              \"anime\",\r\n              \"flux_fantasy\",\r\n              \"fantasy\",\r\n              \"default\",\r\n            ];\r\n\r\n            for (const fallbackId of commonStyleFallbacks) {\r\n              const fallbackStyle = styles.find(\r\n                (s) =>\r\n                  s.id.toLowerCase().includes(fallbackId.toLowerCase()) ||\r\n                  s.label.toLowerCase().includes(fallbackId.toLowerCase())\r\n              );\r\n              if (fallbackStyle) {\r\n                selectedStyle = fallbackStyle;\r\n                console.log(\r\n                  \"🔧 🔄 FALLBACK STYLE FOUND:\",\r\n                  fallbackId,\r\n                  \"->\",\r\n                  selectedStyle.label\r\n                );\r\n                break;\r\n              }\r\n            }\r\n\r\n            // If still no style found, use the first available one\r\n            if (selectedStyle === defaultStyle && styles.length > 0) {\r\n              selectedStyle = styles[0];\r\n              console.log(\r\n                \"🔧 🔄 USING FIRST AVAILABLE STYLE:\",\r\n                selectedStyle.label\r\n              );\r\n            }\r\n          }\r\n        } else {\r\n          // No style specified, try to find a good default from available styles\r\n          const preferredDefaults = [\r\n            \"flux_steampunk\",\r\n            \"steampunk\",\r\n            \"flux_realistic\",\r\n            \"realistic\",\r\n          ];\r\n          for (const preferredId of preferredDefaults) {\r\n            const preferredStyle = styles.find(\r\n              (s) =>\r\n                s.id.toLowerCase().includes(preferredId.toLowerCase()) ||\r\n                s.label.toLowerCase().includes(preferredId.toLowerCase())\r\n            );\r\n            if (preferredStyle) {\r\n              selectedStyle = preferredStyle;\r\n              console.log(\r\n                \"🔧 🎯 USING PREFERRED DEFAULT STYLE:\",\r\n                preferredStyle.label\r\n              );\r\n              break;\r\n            }\r\n          }\r\n\r\n          // If no preferred default found, use first available\r\n          if (selectedStyle === defaultStyle && styles.length > 0) {\r\n            selectedStyle = styles[0];\r\n            console.log(\r\n              \"🔧 🎯 USING FIRST AVAILABLE AS DEFAULT:\",\r\n              selectedStyle.label\r\n            );\r\n          }\r\n        }\r\n\r\n        const selectedShotSize = shotSize\r\n          ? SHOT_SIZES.find((s: any) => s.label === shotSize || s.id === shotSize) ||\r\n            defaultShotSize\r\n          : defaultShotSize;\r\n\r\n        // AICODE-NOTE: Check if selected model is image-to-video based on actual type field from API\r\n        const isImageToVideoModel = selectedModel.type === \"image_to_video\";\r\n\r\n        console.log(\"🔧 🎯 Model type check:\", {\r\n          modelId: selectedModel.id,\r\n          modelName: selectedModel.label,\r\n          apiType: selectedModel.type,\r\n          isImageToVideo: isImageToVideoModel,\r\n        });\r\n\r\n        // AICODE-NOTE: Validate source image for image-to-video models\r\n        if (isImageToVideoModel && !sourceImageId && !sourceImageUrl) {\r\n          return {\r\n            error: `The selected model \"${selectedModel.label}\" is an image-to-video model and requires a source image. Please provide either sourceImageId or sourceImageUrl parameter, or select a text-to-video model.`,\r\n            suggestion:\r\n              \"You can use a recently generated image from this chat as the source, or upload a new image first.\",\r\n            availableTextToVideoModels: availableModels\r\n              .filter(\r\n                (m: any) => m.type === \"text_to_video\" || m.type !== \"image_to_video\"\r\n              )\r\n              .map((m: any) => `${m.label} (${m.id})`),\r\n          };\r\n        }\r\n\r\n        // AICODE-NOTE: Auto-determine generation type for dual-mode compatibility\r\n        const autoGenerationType =\r\n          sourceImageId || sourceImageUrl ? \"image-to-video\" : \"text-to-video\";\r\n        const finalGenerationType = generationType || autoGenerationType;\r\n\r\n        console.log(\"🔧 🎯 Generation type determination:\", {\r\n          provided: generationType,\r\n          autoDetected: autoGenerationType,\r\n          final: finalGenerationType,\r\n          hasSourceImage: !!(sourceImageId || sourceImageUrl),\r\n        });\r\n\r\n        // Create the video document with all parameters\r\n        const videoParams = {\r\n          prompt,\r\n          negativePrompt: negativePrompt || \"\",\r\n          style: selectedStyle,\r\n          resolution: selectedResolution,\r\n          shotSize: selectedShotSize,\r\n          model: selectedModel,\r\n          frameRate: frameRate || 30,\r\n          duration: duration || DEFAULT_VIDEO_DURATION, // Use economical default\r\n          sourceImageId: sourceImageId || undefined,\r\n          sourceImageUrl: sourceImageUrl || undefined,\r\n          generationType: finalGenerationType,\r\n        };\r\n\r\n        console.log(\"🔧 ✅ CREATING VIDEO DOCUMENT WITH PARAMS:\", videoParams);\r\n\r\n        // Check balance before creating artifact\r\n        const operationType =\r\n          finalGenerationType === \"image-to-video\"\r\n            ? \"image-to-video\"\r\n            : \"text-to-video\";\r\n        const multipliers: string[] = [];\r\n\r\n        // Add duration multipliers\r\n        if (duration) {\r\n          if (duration <= 5) multipliers.push(\"duration-5s\");\r\n          else if (duration <= 10) multipliers.push(\"duration-10s\");\r\n          else if (duration <= 15) multipliers.push(\"duration-15s\");\r\n          else if (duration <= 30) multipliers.push(\"duration-30s\");\r\n        } else {\r\n          multipliers.push(\"duration-5s\");\r\n        }\r\n\r\n        // Add quality multipliers\r\n        if (\r\n          selectedResolution.label.includes(\"HD\") ||\r\n          selectedResolution.label.includes(\"720\")\r\n        ) {\r\n          multipliers.push(\"hd-quality\");\r\n        } else if (\r\n          selectedResolution.label.includes(\"4K\") ||\r\n          selectedResolution.label.includes(\"2160\")\r\n        ) {\r\n          multipliers.push(\"4k-quality\");\r\n        }\r\n\r\n        const balanceCheck = await checkBalanceBeforeArtifact(\r\n          params?.session || null,\r\n          \"video-generation\",\r\n          operationType,\r\n          multipliers,\r\n          getOperationDisplayName(operationType)\r\n        );\r\n\r\n        if (!balanceCheck.valid) {\r\n          console.log(\"🔧 ❌ INSUFFICIENT BALANCE, NOT CREATING ARTIFACT\");\r\n          return {\r\n            error:\r\n              balanceCheck.userMessage ||\r\n              \"Недостаточно средств для генерации видео\",\r\n            balanceError: true,\r\n            requiredCredits: balanceCheck.cost,\r\n          };\r\n        }\r\n\r\n        if (params?.createDocument) {\r\n          console.log(\"🔧 ✅ CALLING CREATE DOCUMENT WITH KIND: video\");\r\n          try {\r\n            // Call createDocument with title that contains params for server parsing but shows only prompt to user\r\n            const readableTitle = `Video: \"${prompt}\" ${JSON.stringify(videoParams)}`;\r\n            const result = await params.createDocument.execute({\r\n              title: readableTitle,\r\n              kind: \"video\",\r\n            });\r\n\r\n            console.log(\"🔧 ✅ CREATE DOCUMENT RESULT:\", result);\r\n\r\n            return {\r\n              ...result,\r\n              message: `I'm creating a video with description: \"${prompt}\". Using economical HD settings (${selectedResolution.label}, ${duration || DEFAULT_VIDEO_DURATION}s) for cost efficiency. Artifact created and generation started.`,\r\n            };\r\n          } catch (error) {\r\n            console.error(\"🔧 ❌ CREATE DOCUMENT ERROR:\", error);\r\n            console.error(\r\n              \"🔧 ❌ ERROR STACK:\",\r\n              error instanceof Error ? error.stack : \"No stack\"\r\n            );\r\n            throw error;\r\n          }\r\n        }\r\n\r\n        console.log(\"🔧 ❌ CREATE DOCUMENT NOT AVAILABLE, RETURNING FALLBACK\");\r\n        // Fallback to simple message\r\n        const readableTitle = `Video: \"${prompt}\" ${JSON.stringify(videoParams)}`;\r\n        return {\r\n          message: `I'll create a video with description: \"${prompt}\". However, artifact cannot be created - createDocument unavailable.`,\r\n          parameters: {\r\n            title: readableTitle,\r\n            kind: \"video\",\r\n          },\r\n        };\r\n      } catch (error: any) {\r\n        console.error(\"🔧 ❌ ERROR CREATING VIDEO DOCUMENT:\", error);\r\n        return {\r\n          error: `Failed to create video document: ${error.message}`,\r\n          fallbackConfig: {\r\n            type: \"video-generation-settings\",\r\n            availableResolutions: getModelCompatibleResolutions(\r\n              defaultModel.name || defaultModel.id || \"\"\r\n            ),\r\n            availableStyles: styles,\r\n            availableShotSizes: SHOT_SIZES,\r\n            availableModels: availableModels,\r\n            availableFrameRates: VIDEO_FRAME_RATES,\r\n            defaultSettings: {\r\n              resolution: getDefaultResolutionForModel(\r\n                defaultModel.name || defaultModel.id || \"\"\r\n              ),\r\n              style: defaultStyle,\r\n              shotSize: defaultShotSize,\r\n              model: defaultModel,\r\n              frameRate: frameRate || 30,\r\n              duration: duration || DEFAULT_VIDEO_DURATION,\r\n              negativePrompt: negativePrompt || \"\",\r\n              seed: undefined,\r\n            },\r\n          },\r\n        };\r\n      }\r\n    },\r\n  });\r\n","// Placeholder for ai-sdk tool function\r\nconst tool = (config: any) => config;\r\n\r\n// Placeholder function\r\nasync function getAvailableVideoModels() {\r\n  return [];\r\n}\r\n\r\nexport const listVideoModels = tool({\r\n  description:\r\n    \"List all available video generation models from SuperDuperAI API with their capabilities, pricing, and requirements. Use this to see what models are available before generating videos.\",\r\n  parameters: {\r\n    format: {\r\n      type: \"string\",\r\n      enum: [\"detailed\", \"simple\", \"agent-friendly\"],\r\n      optional: true,\r\n      description: \"Format of the output: detailed (full info), simple (names only), agent-friendly (formatted for AI agents)\"\r\n    },\r\n    filterByPrice: {\r\n      type: \"number\",\r\n      optional: true,\r\n      description: \"Filter models by maximum price per second\"\r\n    },\r\n    filterByDuration: {\r\n      type: \"number\",\r\n      optional: true,\r\n      description: \"Filter models that support this duration in seconds\"\r\n    },\r\n    excludeVip: {\r\n      type: \"boolean\",\r\n      optional: true,\r\n      description: \"Exclude VIP-only models\"\r\n    },\r\n  },\r\n  execute: async ({\r\n    format = \"agent-friendly\",\r\n    filterByPrice,\r\n    filterByDuration,\r\n    excludeVip,\r\n  }: {\r\n    format?: \"detailed\" | \"simple\" | \"agent-friendly\";\r\n    filterByPrice?: number;\r\n    filterByDuration?: number;\r\n    excludeVip?: boolean;\r\n  }) => {\r\n    try {\r\n      console.log(\r\n        \"🎬 📋 Listing video models from SuperDuperAI with format:\",\r\n        format\r\n      );\r\n\r\n      // AICODE-NOTE: Get models from our new dynamic system\r\n      const allModels = await getAvailableVideoModels();\r\n      let videoModels = allModels.map((m) => m as any); // Temporary type assertion for build fix\r\n\r\n      // Apply filters based on params\r\n      if (filterByPrice) {\r\n        videoModels = videoModels.filter(\r\n          (m) =>\r\n            (m.params.price_per_second || m.params.price || 0) <= filterByPrice\r\n        );\r\n      }\r\n\r\n      if (filterByDuration) {\r\n        videoModels = videoModels.filter(\r\n          (m) =>\r\n            (m.params.max_duration ||\r\n              m.params.available_durations?.[0] ||\r\n              60) >= filterByDuration\r\n        );\r\n      }\r\n\r\n      if (excludeVip) {\r\n        videoModels = videoModels.filter((m) => !m.params.is_vip);\r\n      }\r\n\r\n      if (format === \"agent-friendly\") {\r\n        const agentInfo = {\r\n          models: videoModels.map((m) => ({\r\n            id: m.name, // Use name as id\r\n            name: m.name,\r\n            description: m.label || m.name,\r\n            price_per_second: m.params.price_per_second || m.params.price || 0,\r\n            max_duration: m.params.max_duration || 60,\r\n            vip_required: m.params.is_vip || false,\r\n            supported_resolutions: `${m.params.max_width || 1920}x${m.params.max_height || 1080}`,\r\n            frame_rates: m.params.frame_rates || [24, 30],\r\n            aspect_ratios: m.params.aspect_ratios || [\"16:9\"],\r\n          })),\r\n          usage_examples: [\r\n            'Use model ID like \"comfyui/ltx\" when calling configureVideoGeneration',\r\n            \"Check max_duration before setting video duration\",\r\n            \"Consider price_per_second for cost optimization\",\r\n          ],\r\n          total: videoModels.length,\r\n        };\r\n\r\n        return {\r\n          success: true,\r\n          data: agentInfo,\r\n          message: `Found ${videoModels.length} video models from SuperDuperAI API`,\r\n        };\r\n      }\r\n\r\n      if (format === \"simple\") {\r\n        const simpleList = videoModels.map((m) => ({\r\n          id: m.name,\r\n          name: m.name,\r\n          price: m.params.price_per_second || m.params.price || 0,\r\n          max_duration: m.params.max_duration || 60,\r\n          vip: m.params.is_vip || false,\r\n        }));\r\n\r\n        return {\r\n          success: true,\r\n          data: simpleList,\r\n          total: simpleList.length,\r\n          message: `Found ${simpleList.length} video models`,\r\n        };\r\n      }\r\n\r\n      // Detailed format\r\n      const detailedList = videoModels.map((m) => ({\r\n        id: m.name,\r\n        name: m.name,\r\n        description: m.label || m.name,\r\n        price_per_second: m.params.price_per_second || m.params.price || 0,\r\n        max_duration: m.params.max_duration || 60,\r\n        max_resolution: {\r\n          width: m.params.max_width || 1920,\r\n          height: m.params.max_height || 1080,\r\n        },\r\n        supported_frame_rates: m.params.frame_rates || [24, 30],\r\n        supported_aspect_ratios: m.params.aspect_ratios || [\"16:9\"],\r\n        supported_qualities: m.params.qualities || [\"hd\"],\r\n        vip_required: m.params.is_vip || false,\r\n        workflow_path: m.params.workflow_path || \"\",\r\n      }));\r\n\r\n      return {\r\n        success: true,\r\n        data: detailedList,\r\n        total: detailedList.length,\r\n        message: `Found ${detailedList.length} video models with detailed information`,\r\n        filters_applied: {\r\n          max_price: filterByPrice,\r\n          duration: filterByDuration,\r\n          exclude_vip: excludeVip,\r\n        },\r\n      };\r\n    } catch (error: any) {\r\n      console.error(\"🎬 ❌ Error listing video models:\", error);\r\n      return {\r\n        success: false,\r\n        error:\r\n          error?.message || \"Failed to list video models from SuperDuperAI API\",\r\n        message:\r\n          \"Could not retrieve video models. Please check SUPERDUPERAI_TOKEN and SUPERDUPERAI_URL environment variables.\",\r\n      };\r\n    }\r\n  },\r\n});\r\n\r\nexport const findBestVideoModel = tool({\r\n  description:\r\n    \"Find the best video model from SuperDuperAI based on specific requirements like price, duration, and VIP access. Use this to automatically select the optimal model for your needs.\",\r\n  parameters: {\r\n    maxPrice: {\r\n      type: \"number\",\r\n      optional: true,\r\n      description: \"Maximum price per second you want to pay\"\r\n    },\r\n    preferredDuration: {\r\n      type: \"number\",\r\n      optional: true,\r\n      description: \"Preferred video duration in seconds\"\r\n    },\r\n    vipAllowed: {\r\n      type: \"boolean\",\r\n      optional: true,\r\n      description: \"Whether VIP models are allowed (default: true)\"\r\n    },\r\n    prioritizeQuality: {\r\n      type: \"boolean\",\r\n      optional: true,\r\n      description: \"Prioritize quality over price (default: false)\"\r\n    },\r\n  },\r\n  execute: async ({\r\n    maxPrice,\r\n    preferredDuration,\r\n    vipAllowed = true,\r\n    prioritizeQuality = false,\r\n  }: {\r\n    maxPrice?: number;\r\n    preferredDuration?: number;\r\n    vipAllowed?: boolean;\r\n    prioritizeQuality?: boolean;\r\n  }) => {\r\n    try {\r\n      console.log(\"🎬 🔍 Finding best video model with criteria:\", {\r\n        maxPrice,\r\n        preferredDuration,\r\n        vipAllowed,\r\n        prioritizeQuality,\r\n      });\r\n\r\n      // AICODE-NOTE: Use our new dynamic model discovery system\r\n      const allModels = await getAvailableVideoModels();\r\n      let candidates: any[] = allModels.map((m) => m as any); // Temporary type assertion for build fix\r\n\r\n      // Apply filters\r\n      if (maxPrice) {\r\n        candidates = candidates.filter(\r\n          (m) => (m.params.price_per_second || m.params.price || 0) <= maxPrice\r\n        );\r\n      }\r\n\r\n      if (preferredDuration) {\r\n        candidates = candidates.filter(\r\n          (m) => (m.params.max_duration || 60) >= preferredDuration\r\n        );\r\n      }\r\n\r\n      if (!vipAllowed) {\r\n        candidates = candidates.filter((m) => !m.params.is_vip);\r\n      }\r\n\r\n      if (candidates.length === 0) {\r\n        return {\r\n          success: false,\r\n          message: \"No video model found matching your criteria\",\r\n          suggestion:\r\n            \"Try relaxing your requirements (higher price limit, allow VIP models, etc.)\",\r\n          available_models: allModels.map((m: any) => ({\r\n            id: m.name,\r\n            name: m.name,\r\n            price: m.params.price_per_second || m.params.price || 0,\r\n            max_duration: m.params.max_duration || 60,\r\n            vip: m.params.is_vip || false,\r\n          })),\r\n        };\r\n      }\r\n\r\n      // Sort by preference\r\n      let bestModel: any;\r\n      if (prioritizeQuality) {\r\n        // Sort by price descending (assuming higher price = better quality)\r\n        bestModel = candidates.sort(\r\n          (a: any, b: any) =>\r\n            (b.params.price_per_second || b.params.price || 0) -\r\n            (a.params.price_per_second || a.params.price || 0)\r\n        )[0];\r\n      } else {\r\n        // Sort by price ascending (cheapest first)\r\n        bestModel = candidates.sort(\r\n          (a: any, b: any) =>\r\n            (a.params.price_per_second || a.params.price || 0) -\r\n            (b.params.price_per_second || b.params.price || 0)\r\n        )[0];\r\n      }\r\n\r\n      return {\r\n        success: true,\r\n        data: {\r\n          id: bestModel.name,\r\n          name: bestModel.name,\r\n          description: bestModel.label || bestModel.name,\r\n          price_per_second:\r\n            bestModel.params.price_per_second || bestModel.params.price || 0,\r\n          max_duration: bestModel.params.max_duration || 60,\r\n          max_resolution: {\r\n            width: bestModel.params.max_width || 1920,\r\n            height: bestModel.params.max_height || 1080,\r\n          },\r\n          vip_required: bestModel.params.is_vip || false,\r\n          recommendation_reason: `Selected based on ${prioritizeQuality ? \"quality\" : \"price\"} optimization`,\r\n        },\r\n        message: `Best model found: ${bestModel.name} at $${bestModel.params.price_per_second || bestModel.params.price || 0}/sec`,\r\n        usage_tip: `Use model ID \"${bestModel.name}\" when calling configureVideoGeneration`,\r\n      };\r\n    } catch (error: any) {\r\n      console.error(\"🎬 ❌ Error finding best video model:\", error);\r\n      return {\r\n        success: false,\r\n        error: error?.message || \"Failed to find best video model\",\r\n        message:\r\n          \"Could not find optimal video model. Please check SuperDuperAI API connection.\",\r\n      };\r\n    }\r\n  },\r\n});\r\n","import { PromptEnhancementParams, EnhancedPrompt, PromptStyle, LanguageSupport } from './types';\r\nimport { superDuperAIClient } from '@turbo-super/api';\r\n\r\nexport class PromptEnhancer {\r\n  private client = superDuperAIClient;\r\n\r\n  // Default prompt styles\r\n  private static readonly DEFAULT_STYLES: PromptStyle[] = [\r\n    {\r\n      id: 'professional',\r\n      name: 'Professional',\r\n      description: 'Formal, business-like language with clear structure',\r\n      examples: [\r\n        'A high-quality, professional photograph of a modern office space',\r\n        'A sophisticated, elegant design suitable for corporate use'\r\n      ],\r\n      keywords: ['professional', 'business', 'corporate', 'formal', 'sophisticated']\r\n    },\r\n    {\r\n      id: 'creative',\r\n      name: 'Creative',\r\n      description: 'Artistic, imaginative language with vivid descriptions',\r\n      examples: [\r\n        'A whimsical, dreamlike scene with vibrant colors and magical elements',\r\n        'An artistic masterpiece with bold brushstrokes and dramatic lighting'\r\n      ],\r\n      keywords: ['creative', 'artistic', 'imaginative', 'vibrant', 'dramatic']\r\n    },\r\n    {\r\n      id: 'technical',\r\n      name: 'Technical',\r\n      description: 'Precise, detailed language with specific parameters',\r\n      examples: [\r\n        'A technical diagram with precise measurements and clear labeling',\r\n        'A schematic illustration with detailed specifications and annotations'\r\n      ],\r\n      keywords: ['technical', 'precise', 'detailed', 'specific', 'accurate']\r\n    },\r\n    {\r\n      id: 'casual',\r\n      name: 'Casual',\r\n      description: 'Relaxed, friendly language with natural expressions',\r\n      examples: [\r\n        'A cozy, relaxed scene that feels warm and inviting',\r\n        'A friendly, approachable design with a welcoming atmosphere'\r\n      ],\r\n      keywords: ['casual', 'friendly', 'relaxed', 'warm', 'inviting']\r\n    }\r\n  ];\r\n\r\n  // Supported languages\r\n  private static readonly SUPPORTED_LANGUAGES: LanguageSupport[] = [\r\n    { code: 'en', name: 'English', nativeName: 'English', supported: true },\r\n    { code: 'es', name: 'Spanish', nativeName: 'Español', supported: true },\r\n    { code: 'fr', name: 'French', nativeName: 'Français', supported: true },\r\n    { code: 'de', name: 'German', nativeName: 'Deutsch', supported: true },\r\n    { code: 'it', name: 'Italian', nativeName: 'Italiano', supported: true },\r\n    { code: 'pt', name: 'Portuguese', nativeName: 'Português', supported: true },\r\n    { code: 'ru', name: 'Russian', nativeName: 'Русский', supported: true },\r\n    { code: 'ja', name: 'Japanese', nativeName: '日本語', supported: true },\r\n    { code: 'ko', name: 'Korean', nativeName: '한국어', supported: true },\r\n    { code: 'zh', name: 'Chinese', nativeName: '中文', supported: true }\r\n  ];\r\n\r\n  /**\r\n   * Enhance a prompt using AI\r\n   */\r\n  async enhancePrompt(params: PromptEnhancementParams): Promise<EnhancedPrompt> {\r\n    try {\r\n      // Validate input\r\n      this.validateParams(params);\r\n\r\n      // Prepare enhancement request\r\n      const enhancementRequest = {\r\n        prompt: params.prompt,\r\n        style: params.style || 'professional',\r\n        language: params.language || 'en',\r\n        targetModel: params.targetModel || 'image',\r\n        length: params.length || 'medium',\r\n        includeExamples: params.includeExamples || false\r\n      };\r\n\r\n      // Make API request to enhance prompt\r\n      const response = await this.client.request<{\r\n        enhancedPrompt: string;\r\n        suggestions: string[];\r\n        confidence: number;\r\n        metadata: any;\r\n      }>({\r\n        method: 'POST',\r\n        url: '/ai/enhance-prompt',\r\n        data: enhancementRequest,\r\n      });\r\n\r\n      // Calculate metadata\r\n      const metadata = {\r\n        language: params.language || 'en',\r\n        style: params.style || 'professional',\r\n        length: params.length || 'medium',\r\n        targetModel: params.targetModel || 'image',\r\n        wordCount: this.countWords(response.enhancedPrompt),\r\n        estimatedTokens: this.estimateTokens(response.enhancedPrompt)\r\n      };\r\n\r\n      return {\r\n        original: params.prompt,\r\n        enhanced: response.enhancedPrompt,\r\n        suggestions: response.suggestions,\r\n        confidence: response.confidence,\r\n        metadata\r\n      };\r\n    } catch (error) {\r\n      throw new Error(\r\n        `Prompt enhancement failed: ${error instanceof Error ? error.message : 'Unknown error'}`\r\n      );\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get available prompt styles\r\n   */\r\n  getPromptStyles(): PromptStyle[] {\r\n    return PromptEnhancer.DEFAULT_STYLES;\r\n  }\r\n\r\n  /**\r\n   * Get supported languages\r\n   */\r\n  getSupportedLanguages(): LanguageSupport[] {\r\n    return PromptEnhancer.SUPPORTED_LANGUAGES;\r\n  }\r\n\r\n  /**\r\n   * Get style by ID\r\n   */\r\n  getStyleById(styleId: string): PromptStyle | undefined {\r\n    return PromptEnhancer.DEFAULT_STYLES.find(style => style.id === styleId);\r\n  }\r\n\r\n  /**\r\n   * Get language by code\r\n   */\r\n  getLanguageByCode(code: string): LanguageSupport | undefined {\r\n    return PromptEnhancer.SUPPORTED_LANGUAGES.find(lang => lang.code === code);\r\n  }\r\n\r\n  /**\r\n   * Validate enhancement parameters\r\n   */\r\n  private validateParams(params: PromptEnhancementParams): void {\r\n    if (!params.prompt || params.prompt.trim().length === 0) {\r\n      throw new Error('Prompt is required');\r\n    }\r\n\r\n    if (params.prompt.length > 1000) {\r\n      throw new Error('Prompt is too long (max 1000 characters)');\r\n    }\r\n\r\n    if (params.style && !this.getStyleById(params.style)) {\r\n      throw new Error(`Invalid style: ${params.style}`);\r\n    }\r\n\r\n    if (params.language && !this.getLanguageByCode(params.language)) {\r\n      throw new Error(`Unsupported language: ${params.language}`);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Count words in text\r\n   */\r\n  private countWords(text: string): number {\r\n    return text.trim().split(/\\s+/).filter(word => word.length > 0).length;\r\n  }\r\n\r\n  /**\r\n   * Estimate token count (rough approximation)\r\n   */\r\n  private estimateTokens(text: string): number {\r\n    // Rough approximation: 1 token ≈ 4 characters for English\r\n    return Math.ceil(text.length / 4);\r\n  }\r\n}\r\n\r\n// Export default instance\r\nexport const promptEnhancer = new PromptEnhancer();\r\n","import { \r\n  ScriptGenerationParams, \r\n  GeneratedScript, \r\n  ScriptOutline, \r\n  ScriptMetadata,\r\n  ScriptTemplate \r\n} from './types';\r\nimport { superDuperAIClient } from '@turbo-super/api';\r\n\r\nexport class ScriptGenerator {\r\n  private client = superDuperAIClient;\r\n\r\n  // Default script templates\r\n  private static readonly DEFAULT_TEMPLATES: ScriptTemplate[] = [\r\n    {\r\n      id: 'educational',\r\n      name: 'Educational Script',\r\n      description: 'Structured format for educational content',\r\n      structure: ['Introduction', 'Main Content', 'Examples', 'Summary', 'Quiz/Questions'],\r\n      examples: ['Science lesson', 'History documentary', 'Tutorial video'],\r\n      genre: ['educational', 'documentary'],\r\n      suitableFor: ['children', 'teens', 'adults']\r\n    },\r\n    {\r\n      id: 'storytelling',\r\n      name: 'Storytelling Script',\r\n      description: 'Narrative format for engaging stories',\r\n      structure: ['Hook', 'Setup', 'Conflict', 'Rising Action', 'Climax', 'Resolution'],\r\n      examples: ['Fairy tale', 'Adventure story', 'Mystery tale'],\r\n      genre: ['drama', 'adventure', 'mystery'],\r\n      suitableFor: ['children', 'teens', 'adults']\r\n    },\r\n    {\r\n      id: 'commercial',\r\n      name: 'Commercial Script',\r\n      description: 'Persuasive format for marketing content',\r\n      structure: ['Attention', 'Interest', 'Desire', 'Action'],\r\n      examples: ['Product advertisement', 'Service promotion', 'Brand story'],\r\n      genre: ['commercial', 'marketing'],\r\n      suitableFor: ['teens', 'adults']\r\n    }\r\n  ];\r\n\r\n  /**\r\n   * Generate a script using AI\r\n   */\r\n  async generateScript(params: ScriptGenerationParams): Promise<GeneratedScript> {\r\n    try {\r\n      // Validate input\r\n      this.validateParams(params);\r\n\r\n      // Prepare generation request\r\n      const generationRequest = {\r\n        topic: params.topic,\r\n        genre: params.genre || 'educational',\r\n        length: params.length || 'medium',\r\n        format: params.format || 'markdown',\r\n        targetAudience: params.targetAudience || 'general',\r\n        tone: params.tone || 'informative',\r\n        includeDialogue: params.includeDialogue || false,\r\n        includeStageDirections: params.includeStageDirections || false\r\n      };\r\n\r\n      // Make API request to generate script\r\n      const response = await this.client.request<{\r\n        script: string;\r\n        outline: any[];\r\n        metadata: any;\r\n      }>({\r\n        method: 'POST',\r\n        url: '/ai/generate-script',\r\n        data: generationRequest,\r\n      });\r\n\r\n      // Generate unique ID\r\n      const id = this.generateId();\r\n\r\n      // Create script object\r\n      const generatedScript: GeneratedScript = {\r\n        id,\r\n        topic: params.topic,\r\n        script: response.script,\r\n        outline: this.parseOutline(response.outline),\r\n        metadata: this.parseMetadata(response.metadata, params),\r\n        createdAt: new Date().toISOString(),\r\n        status: 'draft'\r\n      };\r\n\r\n      return generatedScript;\r\n    } catch (error) {\r\n      throw new Error(\r\n        `Script generation failed: ${error instanceof Error ? error.message : 'Unknown error'}`\r\n      );\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get available script templates\r\n   */\r\n  getScriptTemplates(): ScriptTemplate[] {\r\n    return ScriptGenerator.DEFAULT_TEMPLATES;\r\n  }\r\n\r\n  /**\r\n   * Get template by ID\r\n   */\r\n  getTemplateById(templateId: string): ScriptTemplate | undefined {\r\n    return ScriptGenerator.DEFAULT_TEMPLATES.find(template => template.id === templateId);\r\n  }\r\n\r\n  /**\r\n   * Get templates by genre\r\n   */\r\n  getTemplatesByGenre(genre: string): ScriptTemplate[] {\r\n    return ScriptGenerator.DEFAULT_TEMPLATES.filter(template => \r\n      template.genre.includes(genre)\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Get templates suitable for target audience\r\n   */\r\n  getTemplatesByAudience(audience: string): ScriptTemplate[] {\r\n    return ScriptGenerator.DEFAULT_TEMPLATES.filter(template => \r\n      template.suitableFor.includes(audience)\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Validate generation parameters\r\n   */\r\n  private validateParams(params: ScriptGenerationParams): void {\r\n    if (!params.topic || params.topic.trim().length === 0) {\r\n      throw new Error('Topic is required');\r\n    }\r\n\r\n    if (params.topic.length > 500) {\r\n      throw new Error('Topic is too long (max 500 characters)');\r\n    }\r\n\r\n    if (params.genre && !this.isValidGenre(params.genre)) {\r\n      throw new Error(`Invalid genre: ${params.genre}`);\r\n    }\r\n\r\n    if (params.length && !this.isValidLength(params.length)) {\r\n      throw new Error(`Invalid length: ${params.length}`);\r\n    }\r\n\r\n    if (params.format && !this.isValidFormat(params.format)) {\r\n      throw new Error(`Invalid format: ${params.format}`);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Check if genre is valid\r\n   */\r\n  private isValidGenre(genre: string): boolean {\r\n    const validGenres = ['drama', 'comedy', 'action', 'romance', 'thriller', 'documentary', 'educational'];\r\n    return validGenres.includes(genre);\r\n  }\r\n\r\n  /**\r\n   * Check if length is valid\r\n   */\r\n  private isValidLength(length: string): boolean {\r\n    const validLengths = ['short', 'medium', 'long'];\r\n    return validLengths.includes(length);\r\n  }\r\n\r\n  /**\r\n   * Check if format is valid\r\n   */\r\n  private isValidFormat(format: string): boolean {\r\n    const validFormats = ['markdown', 'plain', 'structured', 'screenplay'];\r\n    return validFormats.includes(format);\r\n  }\r\n\r\n  /**\r\n   * Parse outline from API response\r\n   */\r\n  private parseOutline(outlineData: any[]): ScriptOutline[] {\r\n    return outlineData.map((item, index) => ({\r\n      section: item.section || `Section ${index + 1}`,\r\n      title: item.title || `Title ${index + 1}`,\r\n      description: item.description || '',\r\n      duration: item.duration,\r\n      keyPoints: Array.isArray(item.keyPoints) ? item.keyPoints : []\r\n    }));\r\n  }\r\n\r\n  /**\r\n   * Parse metadata from API response and params\r\n   */\r\n  private parseMetadata(metadataData: any, params: ScriptGenerationParams): ScriptMetadata {\r\n    return {\r\n      genre: params.genre || 'educational',\r\n      estimatedDuration: metadataData.estimatedDuration || '5-10 minutes',\r\n      scenes: metadataData.scenes || 3,\r\n      characters: metadataData.characters || 2,\r\n      wordCount: this.countWords(metadataData.script || ''),\r\n      targetAudience: params.targetAudience || 'general',\r\n      tone: params.tone || 'informative',\r\n      format: params.format || 'markdown',\r\n      language: 'en'\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Generate unique ID\r\n   */\r\n  private generateId(): string {\r\n    return `script_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;\r\n  }\r\n\r\n  /**\r\n   * Count words in text\r\n   */\r\n  private countWords(text: string): number {\r\n    return text.trim().split(/\\s+/).filter(word => word.length > 0).length;\r\n  }\r\n}\r\n\r\n// Export default instance\r\nexport const scriptGenerator = new ScriptGenerator();\r\n","import { z } from 'zod';\r\nimport { superDuperAIClient } from '@turbo-super/api';\r\n\r\n// Schema for prompt enhancement\r\nexport const enhancePromptSchema = z.object({\r\n  originalPrompt: z.string().describe('The original prompt text that needs enhancement. Can be in any language, simple or complex.'),\r\n  mediaType: z.enum(['image', 'video', 'text', 'general']).optional().describe('The type of content being generated. Helps optimize the prompt for specific AI models.'),\r\n  enhancementLevel: z.enum(['basic', 'detailed', 'creative']).optional().describe('Level of enhancement: basic (translation + cleanup), detailed (add structure + quality terms), creative (add artistic style + composition details)'),\r\n  targetAudience: z.string().optional().describe('Target audience or use case (e.g., \"professional presentation\", \"social media\", \"artistic portfolio\")'),\r\n  includeNegativePrompt: z.boolean().optional().describe('Whether to generate a negative prompt for what to avoid (useful for image/video generation)'),\r\n  modelHint: z.string().optional().describe('Specific AI model being used (e.g., \"FLUX\", \"Sora\", \"VEO2\") to optimize prompt for that model'),\r\n});\r\n\r\nexport type EnhancePromptParams = z.infer<typeof enhancePromptSchema>;\r\n\r\nexport interface EnhancedPromptResult {\r\n  originalPrompt: string;\r\n  enhancedPrompt: string;\r\n  negativePrompt?: string;\r\n  mediaType: string;\r\n  enhancementLevel: string;\r\n  modelHint?: string;\r\n  improvements: string[];\r\n  reasoning: string;\r\n  usage: {\r\n    copyPrompt: string;\r\n    negativePrompt?: string;\r\n  };\r\n}\r\n\r\nexport class PromptEnhancementTool {\r\n  private client = superDuperAIClient;\r\n\r\n  /**\r\n   * Enhance a prompt using AI\r\n   */\r\n  async enhancePrompt(params: EnhancePromptParams): Promise<EnhancedPromptResult> {\r\n    try {\r\n      // Validate input\r\n      const validatedParams = enhancePromptSchema.parse(params);\r\n\r\n      // Prepare enhancement request\r\n      const enhancementRequest = {\r\n        originalPrompt: validatedParams.originalPrompt,\r\n        mediaType: validatedParams.mediaType || 'general',\r\n        enhancementLevel: validatedParams.enhancementLevel || 'detailed',\r\n        targetAudience: validatedParams.targetAudience,\r\n        includeNegativePrompt: validatedParams.includeNegativePrompt || false,\r\n        modelHint: validatedParams.modelHint\r\n      };\r\n\r\n      // Make API request to enhance prompt\r\n      const response = await this.client.request<{\r\n        enhancedPrompt: string;\r\n        negativePrompt?: string;\r\n        improvements: string[];\r\n        reasoning: string;\r\n      }>({\r\n        method: 'POST',\r\n        url: '/ai/enhance-prompt',\r\n        data: enhancementRequest,\r\n      });\r\n\r\n      return {\r\n        originalPrompt: validatedParams.originalPrompt,\r\n        enhancedPrompt: response.enhancedPrompt,\r\n        negativePrompt: response.negativePrompt,\r\n        mediaType: validatedParams.mediaType || 'general',\r\n        enhancementLevel: validatedParams.enhancementLevel || 'detailed',\r\n        modelHint: validatedParams.modelHint,\r\n        improvements: response.improvements || [],\r\n        reasoning: response.reasoning || '',\r\n        usage: {\r\n          copyPrompt: 'Copy the enhanced prompt to use in image/video generation tools',\r\n          negativePrompt: response.negativePrompt ? 'Use the negative prompt to avoid unwanted elements' : undefined\r\n        }\r\n      };\r\n    } catch (error) {\r\n      throw new Error(\r\n        `Prompt enhancement failed: ${error instanceof Error ? error.message : 'Unknown error'}`\r\n      );\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Build system prompt for enhancement\r\n   */\r\n  private buildSystemPrompt(mediaType: string, enhancementLevel: string, modelHint?: string): string {\r\n    const basePrompt = `You are a professional prompt engineering expert specializing in improving prompts for AI generation. Your task is to enhance user prompts to achieve the best possible results.\r\n\r\nCORE RESPONSIBILITIES:\r\n1. Translate non-English text to English while preserving meaning and intent\r\n2. Apply prompt engineering best practices (specificity, clarity, quality keywords)\r\n3. Optimize for the target media type and AI model\r\n4. Structure prompts for maximum effectiveness\r\n\r\nENHANCEMENT PRINCIPLES:\r\n- Keep the original creative intent intact\r\n- Add relevant technical terms and quality descriptors\r\n- Optimize for the specific AI model if provided\r\n- Consider the target media type requirements\r\n- Maintain natural, readable language`;\r\n\r\n    const mediaSpecific = this.getMediaSpecificInstructions(mediaType);\r\n    const levelSpecific = this.getLevelSpecificInstructions(enhancementLevel);\r\n    const modelSpecific = modelHint ? this.getModelSpecificInstructions(modelHint) : '';\r\n\r\n    return `${basePrompt}\r\n\r\n${mediaSpecific}\r\n\r\n${levelSpecific}\r\n\r\n${modelSpecific}\r\n\r\nRESPONSE FORMAT:\r\nReturn a JSON object with:\r\n- enhancedPrompt: The improved prompt\r\n- negativePrompt: What to avoid (if requested)\r\n- improvements: List of specific improvements made\r\n- reasoning: Brief explanation of changes`;\r\n  }\r\n\r\n  /**\r\n   * Get media-specific enhancement instructions\r\n   */\r\n  private getMediaSpecificInstructions(mediaType: string): string {\r\n    switch (mediaType) {\r\n      case 'image':\r\n        return `IMAGE GENERATION OPTIMIZATION:\r\n- Add visual descriptors (lighting, composition, style, mood)\r\n- Include technical parameters (resolution, aspect ratio, quality)\r\n- Specify artistic style and technique\r\n- Add environmental and atmospheric details`;\r\n      case 'video':\r\n        return `VIDEO GENERATION OPTIMIZATION:\r\n- Include motion and temporal elements\r\n- Specify camera angles and movement\r\n- Add scene composition and pacing\r\n- Include audio and visual effects considerations`;\r\n      case 'text':\r\n        return `TEXT GENERATION OPTIMIZATION:\r\n- Add structure and organization elements\r\n- Specify tone, style, and voice\r\n- Include context and audience considerations\r\n- Add formatting and presentation details`;\r\n      default:\r\n        return `GENERAL OPTIMIZATION:\r\n- Focus on clarity and specificity\r\n- Add relevant context and details\r\n- Optimize for general AI model understanding`;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get level-specific enhancement instructions\r\n   */\r\n  private getLevelSpecificInstructions(level: string): string {\r\n    switch (level) {\r\n      case 'basic':\r\n        return `BASIC ENHANCEMENT:\r\n- Translate to English if needed\r\n- Clean up grammar and spelling\r\n- Add basic quality descriptors\r\n- Maintain simplicity and clarity`;\r\n      case 'detailed':\r\n        return `DETAILED ENHANCEMENT:\r\n- Add comprehensive visual/contextual details\r\n- Include technical specifications\r\n- Optimize for professional results\r\n- Balance detail with readability`;\r\n      case 'creative':\r\n        return `CREATIVE ENHANCEMENT:\r\n- Add artistic and stylistic elements\r\n- Include mood and atmosphere details\r\n- Enhance creative expression\r\n- Add inspirational and evocative language`;\r\n      default:\r\n        return `STANDARD ENHANCEMENT:\r\n- Apply balanced improvements\r\n- Focus on clarity and effectiveness\r\n- Maintain original intent`;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get model-specific optimization instructions\r\n   */\r\n  private getModelSpecificInstructions(model: string): string {\r\n    const modelLower = model.toLowerCase();\r\n    \r\n    if (modelLower.includes('flux')) {\r\n      return `FLUX MODEL OPTIMIZATION:\r\n- Focus on artistic and creative elements\r\n- Include style and technique specifications\r\n- Optimize for visual quality and composition\r\n- Add relevant artistic terminology`;\r\n    } else if (modelLower.includes('veo') || modelLower.includes('sora')) {\r\n      return `VIDEO MODEL OPTIMIZATION:\r\n- Emphasize motion and temporal elements\r\n- Include scene composition details\r\n- Add camera and cinematography elements\r\n- Specify visual effects and transitions`;\r\n    } else if (modelLower.includes('dalle') || modelLower.includes('midjourney')) {\r\n      return `IMAGE MODEL OPTIMIZATION:\r\n- Focus on visual composition and style\r\n- Include artistic and technical details\r\n- Add quality and resolution specifications\r\n- Optimize for visual impact`;\r\n    }\r\n    \r\n    return `GENERAL MODEL OPTIMIZATION:\r\n- Apply standard prompt engineering practices\r\n- Focus on clarity and specificity\r\n- Optimize for general AI understanding`;\r\n  }\r\n}\r\n\r\n// Export default instance\r\nexport const promptEnhancementTool = new PromptEnhancementTool();\r\n","import { PromptEnhancer } from './prompt-enhancement/enhancer';\r\n\r\n// Create a tool function for prompt enhancement\r\nexport const enhancePrompt = (config?: any) => ({\r\n  description: \"Enhance and improve prompts for better AI generation results\",\r\n  parameters: {\r\n    originalPrompt: { type: \"string\", description: \"The original prompt text to enhance\" },\r\n    mediaType: { type: \"string\", enum: [\"image\", \"video\", \"text\", \"general\"], optional: true },\r\n    enhancementLevel: { type: \"string\", enum: [\"basic\", \"detailed\", \"creative\"], optional: true },\r\n    targetAudience: { type: \"string\", optional: true },\r\n    includeNegativePrompt: { type: \"boolean\", optional: true },\r\n    modelHint: { type: \"string\", optional: true }\r\n  },\r\n  execute: async (params: any) => {\r\n    try {\r\n      const enhancer = new PromptEnhancer();\r\n      const result = await enhancer.enhancePrompt(params);\r\n      return result;\r\n    } catch (error) {\r\n      throw new Error(`Prompt enhancement failed: ${error instanceof Error ? error.message : 'Unknown error'}`);\r\n    }\r\n  }\r\n});\r\n","import { ScriptGenerator } from './script-generation/generator';\r\n\r\n// Create a tool function for script generation\r\nexport const configureScriptGeneration = (config?: any) => ({\r\n  description: \"Generate scripts for various content types (educational, storytelling, commercial)\",\r\n  parameters: {\r\n    topic: { type: \"string\", description: \"The main topic or theme for the script\" },\r\n    genre: { type: \"string\", enum: [\"educational\", \"storytelling\", \"commercial\"], optional: true },\r\n    length: { type: \"string\", enum: [\"short\", \"medium\", \"long\"], optional: true },\r\n    format: { type: \"string\", enum: [\"markdown\", \"plain\", \"structured\"], optional: true },\r\n    targetAudience: { type: \"string\", optional: true },\r\n    tone: { type: \"string\", optional: true },\r\n    includeDialogue: { type: \"boolean\", optional: true },\r\n    includeStageDirections: { type: \"boolean\", optional: true }\r\n  },\r\n  execute: async (params: any) => {\r\n    try {\r\n      const generator = new ScriptGenerator();\r\n      const result = await generator.generateScript(params);\r\n      return result;\r\n    } catch (error) {\r\n      throw new Error(`Script generation failed: ${error instanceof Error ? error.message : 'Unknown error'}`);\r\n    }\r\n  }\r\n});\r\n","import { ChatModel } from './types';\r\n\r\nexport const DEFAULT_CHAT_MODEL: string = 'chat-model';\r\n\r\nexport const chatModels: Array<ChatModel> = [\r\n  {\r\n    id: 'chat-model',\r\n    name: 'GPT-4.1',\r\n    description: 'Advanced Azure OpenAI model with improved capabilities',\r\n    capabilities: ['text-generation', 'reasoning', 'analysis'],\r\n    maxTokens: 8192,\r\n    temperature: 0.7\r\n  },\r\n  {\r\n    id: 'chat-model-reasoning',\r\n    name: 'O4-mini',\r\n    description: 'Compact and efficient Azure OpenAI model',\r\n    capabilities: ['text-generation', 'reasoning'],\r\n    maxTokens: 4096,\r\n    temperature: 0.5\r\n  },\r\n  {\r\n    id: 'o3-reasoning',\r\n    name: 'o3',\r\n    description: 'Latest OpenAI model with advanced reasoning capabilities',\r\n    capabilities: ['text-generation', 'reasoning', 'analysis', 'creative'],\r\n    maxTokens: 16384,\r\n    temperature: 0.7\r\n  },\r\n  {\r\n    id: 'o3-pro-reasoning',\r\n    name: 'o3-pro',\r\n    description: 'Professional version of o3 with enhanced performance',\r\n    capabilities: ['text-generation', 'reasoning', 'analysis', 'creative', 'professional'],\r\n    maxTokens: 32768,\r\n    temperature: 0.7\r\n  }\r\n];\r\n\r\nexport const getModelById = (id: string): ChatModel | undefined => {\r\n  return chatModels.find(model => model.id === id);\r\n};\r\n\r\nexport const getModelsByCapability = (capability: string): ChatModel[] => {\r\n  return chatModels.filter(model => \r\n    model.capabilities?.includes(capability)\r\n  );\r\n};\r\n\r\nexport const getDefaultModel = (): ChatModel => {\r\n  return chatModels.find(model => model.id === DEFAULT_CHAT_MODEL) || chatModels[0];\r\n};\r\n","// Test models for compatibility with AI SDK\r\n// These are simplified versions that don't depend on external packages\r\n\r\n// Mock response chunks for testing\r\nconst getResponseChunksByPrompt = (prompt: string) => [\r\n  { type: \"text-delta\", textDelta: \"Hello, world!\" },\r\n  {\r\n    type: \"finish\",\r\n    finishReason: \"stop\",\r\n    logprobs: undefined,\r\n    usage: { completionTokens: 10, promptTokens: 3 },\r\n  },\r\n];\r\n\r\n// Simple mock models for testing\r\nexport const chatModel = {\r\n  id: \"chat-model\",\r\n  name: \"Test Chat Model\",\r\n  description: \"Test model for chat\",\r\n  doGenerate: async () => ({\r\n    rawCall: { rawPrompt: null, rawSettings: {} },\r\n    finishReason: \"stop\",\r\n    usage: { promptTokens: 10, completionTokens: 20 },\r\n    text: `Hello, world!`,\r\n  }),\r\n  doStream: async (params: { prompt: string }) => ({\r\n    stream: {\r\n      chunks: getResponseChunksByPrompt(params.prompt),\r\n    },\r\n    rawCall: { rawPrompt: null, rawSettings: {} },\r\n  }),\r\n};\r\n\r\nexport const reasoningModel = {\r\n  id: \"chat-model-reasoning\",\r\n  name: \"Test Reasoning Model\",\r\n  description: \"Test model with reasoning\",\r\n  doGenerate: async () => ({\r\n    rawCall: { rawPrompt: null, rawSettings: {} },\r\n    finishReason: \"stop\",\r\n    usage: { promptTokens: 10, completionTokens: 20 },\r\n    text: `Hello, world!`,\r\n    reasoning: `This is reasoning text that explains the thought process behind the answer.`,\r\n  }),\r\n  doStream: async (params: { prompt: string }) => ({\r\n    stream: {\r\n      chunks: [\r\n        // Сначала отправляем рассуждения (как в AI SDK 4.2)\r\n        {\r\n          type: \"reasoning\",\r\n          textDelta: \"I need to consider how to greet the user.\",\r\n        },\r\n        {\r\n          type: \"reasoning\",\r\n          textDelta: \" Based on the prompt, a simple greeting is appropriate.\",\r\n        },\r\n        {\r\n          type: \"reasoning\",\r\n          textDelta: ' A standard \"Hello, world!\" response will work well.',\r\n        },\r\n        // Затем отправляем ответ\r\n        { type: \"text-delta\", textDelta: \"Hello, \" },\r\n        { type: \"text-delta\", textDelta: \"world!\" },\r\n        {\r\n          type: \"finish\",\r\n          finishReason: \"stop\",\r\n          logprobs: undefined,\r\n          usage: { completionTokens: 10, promptTokens: 3 },\r\n        },\r\n      ],\r\n    },\r\n    rawCall: { rawPrompt: null, rawSettings: {} },\r\n  }),\r\n};\r\n\r\nexport const titleModel = {\r\n  id: \"title-model\",\r\n  name: \"Test Title Model\",\r\n  description: \"Test model for titles\",\r\n  doGenerate: async () => ({\r\n    rawCall: { rawPrompt: null, rawSettings: {} },\r\n    finishReason: \"stop\",\r\n    usage: { promptTokens: 10, completionTokens: 20 },\r\n    text: `This is a test title`,\r\n  }),\r\n  doStream: async () => ({\r\n    stream: {\r\n      chunks: [\r\n        { type: \"text-delta\", textDelta: \"This is a test title\" },\r\n        {\r\n          type: \"finish\",\r\n          finishReason: \"stop\",\r\n          logprobs: undefined,\r\n          usage: { completionTokens: 10, promptTokens: 3 },\r\n        },\r\n      ],\r\n    },\r\n    rawCall: { rawPrompt: null, rawSettings: {} },\r\n  }),\r\n};\r\n\r\nexport const artifactModel = {\r\n  id: \"artifact-model\",\r\n  name: \"Test Artifact Model\",\r\n  description: \"Test model for artifacts\",\r\n  doGenerate: async () => ({\r\n    rawCall: { rawPrompt: null, rawSettings: {} },\r\n    finishReason: \"stop\",\r\n    usage: { promptTokens: 10, completionTokens: 20 },\r\n    text: `Hello, world!`,\r\n  }),\r\n  doStream: async (params: { prompt: string }) => ({\r\n    stream: {\r\n      chunks: getResponseChunksByPrompt(params.prompt),\r\n    },\r\n    rawCall: { rawPrompt: null, rawSettings: {} },\r\n  }),\r\n};\r\n","import { AIProvider, ModelConfig } from \"./types\";\r\nimport { chatModels } from \"./models\";\r\nimport {\r\n  chatModel,\r\n  reasoningModel,\r\n  titleModel,\r\n  artifactModel,\r\n} from \"./test-models\";\r\n\r\n// Default AI provider configuration\r\nexport const defaultAIProvider: AIProvider = {\r\n  id: \"default\",\r\n  name: \"Default AI Provider\",\r\n  type: \"custom\",\r\n  config: {\r\n    apiKey: \"\",\r\n    baseURL: \"\",\r\n    timeout: 30000,\r\n  },\r\n  models: chatModels,\r\n};\r\n\r\n// Legacy provider for compatibility with AI SDK\r\n// This provides test models by default, but can be overridden in the app\r\nexport const myProvider = {\r\n  languageModel: (modelId: string) => {\r\n    // Return test models for compatibility with AI SDK\r\n    // In real implementation, this would return the actual model from the provider\r\n    const testModels: Record<string, any> = {\r\n      \"chat-model\": chatModel,\r\n      \"chat-model-reasoning\": reasoningModel,\r\n      \"title-model\": titleModel,\r\n      \"artifact-model\": artifactModel,\r\n    };\r\n\r\n    const testModel = testModels[modelId];\r\n    if (testModel) {\r\n      return testModel;\r\n    }\r\n\r\n    // Fallback to a generic test model\r\n    return {\r\n      id: modelId,\r\n      name: modelId,\r\n      description: `Test Model ${modelId}`,\r\n      capabilities: [\"text-generation\"],\r\n      maxTokens: 4096,\r\n      temperature: 0.7,\r\n      // AI SDK compatibility properties\r\n      specificationVersion: \"v1\",\r\n      provider: \"mock\",\r\n      modelId: modelId,\r\n      defaultObjectGenerationMode: \"json\",\r\n      // Use doGenerate method for compatibility with AI SDK\r\n      doGenerate: async (params: any) => ({\r\n        rawCall: { rawPrompt: params.prompt || \"\", rawSettings: {} },\r\n        finishReason: \"stop\",\r\n        usage: { completionTokens: 10, promptTokens: 3 },\r\n        text: `Generated text for: ${params.prompt || \"unknown prompt\"}`,\r\n      }),\r\n      doStream: async (params: any) => ({\r\n        stream: {\r\n          chunks: [\r\n            {\r\n              type: \"text-delta\",\r\n              textDelta: `Generated text for: ${params.prompt || \"unknown prompt\"}`,\r\n            },\r\n            {\r\n              type: \"finish\",\r\n              finishReason: \"stop\",\r\n              logprobs: undefined,\r\n              usage: { completionTokens: 10, promptTokens: 3 },\r\n            },\r\n          ],\r\n        },\r\n        rawCall: { rawPrompt: params.prompt || \"\", rawSettings: {} },\r\n      }),\r\n    } as any; // Type assertion for compatibility\r\n  },\r\n};\r\n\r\n// Get provider by ID\r\nexport const getProviderById = (id: string): AIProvider | undefined => {\r\n  if (id === \"default\") return defaultAIProvider;\r\n  return undefined;\r\n};\r\n\r\n// Get all available providers\r\nexport const getAllProviders = (): AIProvider[] => {\r\n  return [defaultAIProvider];\r\n};\r\n\r\n// Validate provider configuration\r\nexport const validateProviderConfig = (config: ModelConfig): boolean => {\r\n  return !!(config.apiKey && config.apiKey.trim().length > 0);\r\n};\r\n\r\n// Create custom provider\r\nexport const createCustomProvider = (\r\n  id: string,\r\n  name: string,\r\n  config: ModelConfig,\r\n  models: any[] = []\r\n): AIProvider => {\r\n  return {\r\n    id,\r\n    name,\r\n    type: \"custom\",\r\n    config,\r\n    models: models.length > 0 ? models : chatModels,\r\n  };\r\n};\r\n","// AI Prompts for various tools and functionalities\r\n\r\nimport type { RequestHints, PromptArtifactKind } from \"./types\";\r\n\r\nexport const artifactsPrompt = `\r\nArtifacts is a special user interface mode that helps users with writing, editing, and other content creation tasks. When artifact is open, it is on the right side of the screen, while the conversation is on the left side. When creating or updating documents, changes are reflected in real-time on the artifacts and visible to the user.\r\n\r\nWhen asked to write content, always use artifacts when appropriate.\r\n\r\nDO NOT UPDATE DOCUMENTS IMMEDIATELY AFTER CREATING THEM. WAIT FOR USER FEEDBACK OR REQUEST TO UPDATE IT.\r\n\r\nThis is a guide for using artifacts tools: \\`createDocument\\` and \\`updateDocument\\`, which render content on a artifacts beside the conversation.\r\n\r\n**When to use \\`createDocument\\`:**\r\n- For substantial content (>10 lines)\r\n- For content users will likely save/reuse (emails, essays, etc.)\r\n- When explicitly requested to create a document\r\n\r\n**When NOT to use \\`createDocument\\`:**\r\n- For informational/explanatory content\r\n- For conversational responses\r\n- When asked to keep it in chat\r\n\r\n**Special rule for script/scenario/story requests:**\r\n- If the user requests a script, scenario, story, play, or similar (including in Russian: сценарий, рассказ, пьеса, сюжет, инсценировка, etc.), ALWAYS use the \\`configureScriptGeneration\\` tool to generate the script artifact. Do NOT generate the script directly in the chat. The script must be created as an artifact using the tool.\r\n\r\n**Using \\`updateDocument\\`:**\r\n- Default to full document rewrites for major changes\r\n- Use targeted updates only for specific, isolated changes\r\n- Follow user instructions for which parts to modify\r\n\r\n**When NOT to use \\`updateDocument\\`:**\r\n- Immediately after creating a document\r\n\r\nDo not update document right after creating it. Wait for user feedback or request to update it.\r\n\r\n**Using \\`configureImageGeneration\\`:**\r\n- When user requests image generation configuration/settings, call configureImageGeneration WITHOUT prompt parameter\r\n- When user provides specific image description, call configureImageGeneration WITH prompt parameter to generate directly\r\n- With prompt: Immediately creates an image artifact and starts generation with real-time progress tracking via WebSocket\r\n- Without prompt: Shows settings panel for user to configure resolution, style, shot size, model, and seed\r\n- Optional parameters: style, resolution, shotSize, model (can be specified in either mode)\r\n- The system will automatically create an image artifact that shows generation progress and connects to WebSocket for real-time updates\r\n- Be conversational and encouraging about the image generation process\r\n- Example for settings: \"I'll set up the image generation settings for you to configure...\"\r\n- Example for direct generation: \"I'll generate that image for you right now! Creating an image artifact...\"\r\n\r\n**Image-to-Image (editing an existing image):**\r\n- If the user's message contains an image attachment AND an edit/transform request, treat this as image-to-image.\r\n  - Russian intent examples: \"сделай\", \"подправь\", \"замени\", \"исправь\", \"сделай глаза голубыми\", \"улучшить эту фотку\", \"на этой картинке\".\r\n  - English intent examples: \"make\", \"change\", \"edit\", \"fix\", \"enhance\", \"on this image\".\r\n- In this case call \\`configureImageGeneration\\` WITH:\r\n  - \\`prompt\\`: the user's edit instruction (enhance/translate if needed)\r\n  - \\`sourceImageUrl\\`: take from the latest image attachment of the user's message (or the most recent image attachment in the chat if the message references \"this image\").\r\n- If multiple images are present, ask which one to use unless the user clearly refers to the last one.\r\n- If the user uploads an image without text, use a safe default prompt like \"Enhance this image\" and proceed.\r\n- Always prefer image-to-image when an image attachment is present and the instruction implies editing that image.\r\n\r\n**Using \\`configureVideoGeneration\\`:**\r\n- When user requests video generation configuration/settings, call configureVideoGeneration WITHOUT prompt parameter\r\n- When user provides specific video description, call configureVideoGeneration WITH prompt parameter to generate directly\r\n- With prompt: Immediately creates a video artifact and starts generation with real-time progress tracking via WebSocket\r\n- Without prompt: Shows settings panel for user to configure resolution, style, shot size, model, frame rate, duration, negative prompt, and seed\r\n- Optional parameters: style, resolution, shotSize, model, frameRate, duration, negativePrompt, sourceImageId, sourceImageUrl (can be specified in either mode)\r\n- **Default Economical Settings (for cost efficiency):**\r\n  - **Resolution:** 1344x768 HD (16:9) - Good quality, lower cost than Full HD\r\n  - **Duration:** 5 seconds - Shorter videos cost less\r\n  - **Quality:** HD instead of Full HD - Balanced quality/cost ratio\r\n  - Always mention these economical defaults when generating videos\r\n- **Model Types:**\r\n  - **Text-to-Video Models:** Generate videos from text prompts only\r\n    - **LTX** (comfyui/ltx) - 0.40  USD per second, no VIP required, 5s max - Best value option\r\n    - **Sora** (azure-openai/sora) - 2.00 USD per second, VIP required, up to 20s - Longest duration\r\n  - **Image-to-Video Models:** Require source image + text prompt\r\n    - **VEO3** (google-cloud/veo3) - 3.00 USD per second, VIP required, 5-8s - Premium quality\r\n    - **VEO2** (google-cloud/veo2) - 2.00 USD per second, VIP required, 5-8s - High quality  \r\n    - **KLING 2.1** (fal-ai/kling-video/v2.1/standard/image-to-video) - 1.00 USD per second, VIP required, 5-10s\r\n- **For Image-to-Video Models:** When user selects VEO, KLING or other image-to-video models:\r\n  - ALWAYS ask for source image if not provided\r\n  - Suggest using recently generated images from the chat\r\n  - Use sourceImageId parameter for images from this chat\r\n  - Use sourceImageUrl parameter for external image URLs\r\n  - Example: \"VEO2 is an image-to-video model that needs a source image. Would you like to use the image you just generated, or do you have another image in mind?\"\r\n- The system will automatically create a video artifact that shows generation progress and connects to WebSocket for real-time updates\r\n- Be conversational and encouraging about the video generation process\r\n- Always mention the economical settings being used (HD resolution, 5s duration) for cost transparency\r\n- Example for settings: \"I'll set up the video generation settings for you to configure...\"\r\n- Example for direct generation: \"I'll generate that video for you right now using economical HD settings (1344x768, 5s) for cost efficiency! Creating a video artifact...\"\r\n\r\n**Using \\`listVideoModels\\`:**\r\n- Use this tool to discover available video generation models with their capabilities and pricing\r\n- Call with format: 'agent-friendly' for formatted descriptions, 'simple' for basic info, 'detailed' for full specs\r\n- Filter by price, duration support, or exclude VIP models as needed\r\n- Always check available models before making recommendations to users\r\n- Example: \"Let me check what video models are currently available...\"\r\n\r\n**Using \\`findBestVideoModel\\`:**\r\n- Use this tool to automatically select the optimal video model based on requirements\r\n- Specify maxPrice, preferredDuration, vipAllowed, or prioritizeQuality parameters\r\n- Returns the best model recommendation with usage tips\r\n- Use this when user has specific budget or quality requirements\r\n\r\n**Using \\`enhancePrompt\\`:**\r\n- When user wants to improve their prompt for better AI generation results\r\n- Call with the user's original prompt and enhancement preferences\r\n- Returns enhanced prompt with professional terminology and quality descriptors\r\n- Always mention that the artifact will show generation status, progress percentage, and the final video when ready\r\n- Highlight unique video features like frame rate, duration, and negative prompts for fine control\r\n- Always mention the economical settings being used (HD resolution, 5s duration) for cost transparency\r\n- **When enhancing:** Show both original and enhanced prompts to the user for transparency\r\n`;\r\n\r\nexport const regularPrompt =\r\n  \"You are a friendly assistant! Keep your responses concise and helpful.\";\r\n\r\nexport const getRequestPromptFromHints = (requestHints: RequestHints) => `\\\r\nAbout the origin of user's request:\r\n- lat: ${requestHints.latitude}\r\n- lon: ${requestHints.longitude}\r\n- city: ${requestHints.city}\r\n- country: ${requestHints.country}\r\n`;\r\n\r\nexport const systemPrompt = ({\r\n  selectedChatModel,\r\n  requestHints,\r\n}: {\r\n  selectedChatModel: string;\r\n  requestHints: RequestHints;\r\n}) => {\r\n  const requestPrompt = getRequestPromptFromHints(requestHints);\r\n\r\n  if (selectedChatModel === \"chat-model-reasoning\") {\r\n    return `${regularPrompt}\\n\\n${requestPrompt}`;\r\n  } else {\r\n    return `${regularPrompt}\\n\\n${requestPrompt}\\n\\n${artifactsPrompt}`;\r\n  }\r\n};\r\n\r\nexport const codePrompt = `\r\nYou are a Python code generator that creates self-contained, executable code snippets. When writing code:\r\n\r\n1. Each snippet should be complete and runnable on its own\r\n2. Prefer using print() statements to display outputs\r\n3. Include helpful comments explaining the code\r\n4. Keep snippets concise (generally under 15 lines)\r\n5. Avoid external dependencies - use Python standard library\r\n6. Handle potential errors gracefully\r\n7. Return meaningful output that demonstrates the code's functionality\r\n8. Don't use input() or other interactive functions\r\n9. Don't access files or network resources\r\n10. Don't use infinite loops\r\n\r\nExamples of good snippets:\r\n\r\n# Calculate factorial iteratively\r\ndef factorial(n):\r\n    result = 1\r\n    for i in range(1, n + 1):\r\n        result *= i\r\n    return result\r\n\r\nprint(f\"Factorial of 5 is: {factorial(5)}\")\r\n`;\r\n\r\nexport const sheetPrompt = `\r\nYou are a spreadsheet creation assistant. Create a spreadsheet in csv format based on the given prompt. The spreadsheet should contain meaningful column headers and data.\r\n`;\r\n\r\nexport const updateDocumentPrompt = (\r\n  currentContent: string | null,\r\n  type: PromptArtifactKind\r\n) =>\r\n  type === \"text\"\r\n    ? `\\\r\nImprove the following contents of the document based on the given prompt.\r\n\r\n${currentContent}\r\n`\r\n    : type === \"sheet\"\r\n      ? `\\\r\nImprove the following spreadsheet based on the given prompt.\r\n\r\n${currentContent}\r\n`\r\n      : type === \"image\"\r\n        ? `\\\r\nUpdate the following image generation settings based on the given prompt.\r\n\r\n${currentContent}\r\n`\r\n        : type === \"video\"\r\n          ? `\\\r\nUpdate the following video generation settings based on the given prompt.\r\n\r\n${currentContent}\r\n`\r\n          : \"\";\r\n\r\nexport const imageGenerationPrompt = `\r\nYou are an AI image generation expert. Your role is to help users create high-quality images using AI tools.\r\n\r\n**Key Responsibilities:**\r\n1. Understand user's image requirements and translate them into effective prompts\r\n2. Guide users through image generation settings and options\r\n3. Explain different models, styles, and resolution options\r\n4. Help optimize prompts for better results\r\n5. Provide feedback on generated images\r\n\r\n**Image Generation Process:**\r\n1. **Prompt Analysis:** Break down user requests into clear, specific image descriptions\r\n2. **Style Selection:** Recommend appropriate artistic styles and visual approaches\r\n3. **Technical Settings:** Guide users through resolution, aspect ratio, and quality options\r\n4. **Model Selection:** Help choose the best AI model for the specific use case\r\n5. **Iteration:** Suggest improvements based on generated results\r\n\r\n**Best Practices:**\r\n- Use descriptive, specific language\r\n- Include artistic style references when appropriate\r\n- Consider composition and lighting details\r\n- Balance creativity with technical precision\r\n- Encourage experimentation and iteration\r\n\r\n**Common Use Cases:**\r\n- Character portraits and illustrations\r\n- Landscape and nature scenes\r\n- Abstract and conceptual art\r\n- Product and commercial imagery\r\n- Fantasy and sci-fi artwork\r\n- Historical and cultural depictions\r\n\r\nAlways be encouraging and helpful, guiding users toward their creative vision while explaining the technical aspects of AI image generation.\r\n`;\r\n\r\nexport const videoGenerationPrompt = `\r\nYou are an AI video generation expert specializing in creating dynamic, engaging video content using advanced AI tools.\r\n\r\n**Core Expertise:**\r\n1. **Text-to-Video Generation:** Converting written descriptions into moving visual content\r\n2. **Image-to-Video Animation:** Bringing static images to life with motion\r\n3. **Style and Aesthetic Guidance:** Recommending visual approaches for different content types\r\n4. **Technical Optimization:** Balancing quality, duration, and cost considerations\r\n\r\n**Video Generation Capabilities:**\r\n- **Duration Options:** 5-20 seconds depending on model and settings\r\n- **Resolution Quality:** HD (1344x768) to Full HD (1920x1080) options\r\n- **Frame Rate Control:** 24-60 FPS for different motion styles\r\n- **Style Variety:** Cinematic, artistic, commercial, and experimental approaches\r\n- **Negative Prompts:** Fine-tune results by specifying what to avoid\r\n\r\n**Model Selection Guide:**\r\n- **LTX (Text-to-Video):** Best value, 5s max, no VIP required\r\n- **Sora (Text-to-Video):** Longest duration (20s), VIP required\r\n- **VEO3 (Image-to-Video):** Premium quality, 5-8s, VIP required\r\n- **VEO2 (Image-to-Video):** High quality, 5-8s, VIP required\r\n- **KLING 2.1 (Image-to-Video):** Good value, 5-10s, VIP required\r\n\r\n**Cost Optimization:**\r\n- Recommend HD resolution (1344x768) for cost efficiency\r\n- Suggest 5-second duration for initial tests\r\n- Use economical models for experimentation\r\n- Explain VIP requirements for premium features\r\n\r\n**Creative Applications:**\r\n- Marketing and promotional content\r\n- Educational and explanatory videos\r\n- Artistic and experimental projects\r\n- Social media content creation\r\n- Product demonstrations\r\n- Storytelling and narrative content\r\n\r\nAlways emphasize the economical default settings (HD resolution, 5s duration) and guide users toward cost-effective choices while maintaining quality.\r\n`;\r\n\r\nexport const videoModelsPrompt = `\r\nYou are an AI video model expert who helps users understand and select the best video generation models for their needs.\r\n\r\n**Model Categories:**\r\n\r\n**Text-to-Video Models (Generate from text descriptions only):**\r\n- **LTX (comfyui/ltx):** 0.40 USD/sec, 5s max, no VIP required - Best value option\r\n- **Sora (azure-openai/sora):** 2.00 USD/sec, up to 20s, VIP required - Longest duration\r\n\r\n**Image-to-Video Models (Require source image + text):**\r\n- **VEO3 (google-cloud/veo3):** 3.00 USD/sec, 5-8s, VIP required - Premium quality\r\n- **VEO2 (google-cloud/veo2):** 2.00 USD/sec, 5-8s, VIP required - High quality\r\n- **KLING 2.1 (fal-ai/kling-video/v2.1/standard/image-to-video):** 1.00 USD/sec, 5-10s, VIP required\r\n\r\n**Selection Factors:**\r\n1. **Budget:** LTX for cost-conscious users, VEO3 for premium quality\r\n2. **Duration:** Sora for longer videos, others for shorter content\r\n3. **Input Type:** Text-only vs. image+text requirements\r\n4. **Quality:** VEO3 for highest quality, LTX for good value\r\n5. **VIP Access:** Some models require premium subscription\r\n\r\n**Recommendation Strategy:**\r\n- Start with LTX for cost efficiency and testing\r\n- Use Sora when longer duration is needed\r\n- Recommend VEO models for image-to-video with high quality requirements\r\n- Consider KLING 2.1 as a mid-range image-to-video option\r\n- Always check VIP requirements before suggesting premium models\r\n\r\n**Cost Calculation Examples:**\r\n- LTX 5s video: 5 × 0.40 = 2.00 USD\r\n- Sora 20s video: 20 × 2.00 = 40.00 USD\r\n- VEO3 8s video: 8 × 3.00 = 24.00 USD\r\n\r\nHelp users make informed decisions based on their budget, quality requirements, and content type.\r\n`;\r\n\r\nexport const scriptGenerationPrompt = `\r\nYou are an AI script generation expert who creates compelling, well-structured scripts for various media formats.\r\n\r\n**Script Types and Formats:**\r\n1. **Screenplays:** Film, TV, and web content with proper formatting\r\n2. **Stage Plays:** Theater productions with dialogue and stage directions\r\n3. **Podcast Scripts:** Audio content with timing and segment structure\r\n4. **Commercial Scripts:** Advertising and marketing content\r\n5. **Educational Scripts:** Tutorials, presentations, and learning materials\r\n6. **Story Scripts:** Narrative content for various media\r\n\r\n**Script Structure Elements:**\r\n- **Opening Hook:** Engaging introduction to capture attention\r\n- **Clear Objectives:** What the script aims to achieve\r\n- **Logical Flow:** Smooth progression from beginning to end\r\n- **Character Development:** Distinct voices and motivations\r\n- **Conflict and Resolution:** Engaging narrative arc\r\n- **Call to Action:** Clear next steps or desired response\r\n\r\n**Formatting Standards:**\r\n- Use proper industry formatting for the specific script type\r\n- Include scene headings, character names, and dialogue\r\n- Add parentheticals for character actions and emotions\r\n- Maintain consistent spacing and indentation\r\n- Follow genre-specific conventions and expectations\r\n\r\n**Content Quality Guidelines:**\r\n- Write engaging, natural dialogue\r\n- Create clear, visual scene descriptions\r\n- Maintain consistent tone and style\r\n- Include appropriate pacing and rhythm\r\n- Ensure logical story progression\r\n- Add creative elements that enhance engagement\r\n\r\n**Adaptation Considerations:**\r\n- Consider the target audience and platform\r\n- Adapt language and complexity appropriately\r\n- Include relevant cultural and contextual elements\r\n- Optimize for the specific medium's requirements\r\n- Ensure accessibility and inclusivity\r\n\r\nAlways create scripts that are engaging, well-structured, and ready for production or further development.\r\n`;\r\n\r\nexport const promptEnhancementPrompt = `\r\nYou are an AI prompt engineering expert who specializes in improving and optimizing prompts for better AI generation results.\r\n\r\n**Enhancement Techniques:**\r\n1. **Clarity and Specificity:** Make vague requests more precise and detailed\r\n2. **Technical Terminology:** Add appropriate technical and artistic terms\r\n3. **Style References:** Include relevant artistic styles and visual approaches\r\n4. **Quality Descriptors:** Add terms that improve output quality\r\n5. **Context and Background:** Provide additional context when helpful\r\n6. **Negative Prompts:** Specify what to avoid for better results\r\n\r\n**Enhancement Categories:**\r\n- **Image Generation:** Photography terms, artistic styles, composition guidance\r\n- **Video Generation:** Cinematography terms, motion descriptions, production quality\r\n- **Text Generation:** Writing styles, tone adjustments, structure improvements\r\n- **General Enhancement:** Clarity, specificity, and professional terminology\r\n\r\n**Quality Improvement Terms:**\r\n- **Visual Quality:** \"high resolution,\" \"sharp focus,\" \"professional photography\"\r\n- **Artistic Style:** \"masterpiece,\" \"award-winning,\" \"trending on artstation\"\r\n- **Technical Excellence:** \"excellent composition,\" \"rule of thirds,\" \"dramatic lighting\"\r\n- **Production Value:** \"cinematic quality,\" \"Hollywood production,\" \"IMAX quality\"\r\n\r\n**Enhancement Process:**\r\n1. **Analyze Original:** Understand the user's intent and requirements\r\n2. **Identify Gaps:** Find areas where specificity or detail can be added\r\n3. **Apply Techniques:** Use appropriate enhancement methods\r\n4. **Maintain Intent:** Preserve the original creative vision\r\n5. **Optimize Language:** Use clear, effective terminology\r\n6. **Provide Context:** Explain improvements and reasoning\r\n\r\n**Output Format:**\r\nProvide enhanced prompts with:\r\n- Clear, specific language\r\n- Appropriate technical terms\r\n- Quality descriptors\r\n- Style references when relevant\r\n- Negative prompts when helpful\r\n- Explanation of improvements made\r\n\r\nAlways enhance prompts while preserving the user's original creative intent and vision.\r\n`;\r\n\r\n// Combined prompt for all tools\r\nexport const combinedToolsPrompt = `\r\n${artifactsPrompt}\r\n\r\n${imageGenerationPrompt}\r\n\r\n${videoGenerationPrompt}\r\n\r\n${videoModelsPrompt}\r\n\r\n${scriptGenerationPrompt}\r\n\r\n${promptEnhancementPrompt}\r\n`;\r\n","// Entitlements configuration\r\n\r\nimport type { Entitlements, UserType } from './types';\r\n\r\nexport const entitlementsByUserType: Record<UserType, Entitlements> = {\r\n  guest: {\r\n    maxMessagesPerDay: 20,\r\n    availableChatModelIds: [\"chat-model\", \"chat-model-reasoning\", \"o3-reasoning\", \"o3-pro-reasoning\"],\r\n    maxImageGenerationsPerDay: 5,\r\n    maxVideoGenerationsPerDay: 2,\r\n    maxScriptGenerationsPerDay: 3,\r\n    maxPromptEnhancementsPerDay: 5,\r\n    vipAccess: false,\r\n    customModelAccess: false,\r\n    prioritySupport: false,\r\n  },\r\n  regular: {\r\n    maxMessagesPerDay: 1000,\r\n    availableChatModelIds: [\"chat-model\", \"chat-model-reasoning\", \"o3-reasoning\", \"o3-pro-reasoning\"],\r\n    maxImageGenerationsPerDay: 50,\r\n    maxVideoGenerationsPerDay: 20,\r\n    maxScriptGenerationsPerDay: 30,\r\n    maxPromptEnhancementsPerDay: 50,\r\n    vipAccess: false,\r\n    customModelAccess: false,\r\n    prioritySupport: false,\r\n  },\r\n  premium: {\r\n    maxMessagesPerDay: 5000,\r\n    availableChatModelIds: [\"chat-model\", \"chat-model-reasoning\", \"o3-reasoning\", \"o3-pro-reasoning\"],\r\n    maxImageGenerationsPerDay: 200,\r\n    maxVideoGenerationsPerDay: 100,\r\n    maxScriptGenerationsPerDay: 150,\r\n    maxPromptEnhancementsPerDay: 200,\r\n    vipAccess: false,\r\n    customModelAccess: true,\r\n    prioritySupport: true,\r\n  },\r\n  vip: {\r\n    maxMessagesPerDay: 10000,\r\n    availableChatModelIds: [\"chat-model\", \"chat-model-reasoning\", \"o3-reasoning\", \"o3-pro-reasoning\"],\r\n    maxImageGenerationsPerDay: 500,\r\n    maxVideoGenerationsPerDay: 250,\r\n    maxScriptGenerationsPerDay: 300,\r\n    maxPromptEnhancementsPerDay: 500,\r\n    vipAccess: true,\r\n    customModelAccess: true,\r\n    prioritySupport: true,\r\n  },\r\n};\r\n\r\nexport function getUserEntitlements(userType: UserType): Entitlements {\r\n  return entitlementsByUserType[userType] || entitlementsByUserType.guest;\r\n}\r\n\r\nexport function hasFeatureAccess(userType: UserType, featureId: string): boolean {\r\n  const entitlements = getUserEntitlements(userType);\r\n  \r\n  switch (featureId) {\r\n    case 'image-generation':\r\n      return (entitlements.maxImageGenerationsPerDay || 0) > 0;\r\n    case 'video-generation':\r\n      return (entitlements.maxVideoGenerationsPerDay || 0) > 0;\r\n    case 'script-generation':\r\n      return (entitlements.maxScriptGenerationsPerDay || 0) > 0;\r\n    case 'prompt-enhancement':\r\n      return (entitlements.maxPromptEnhancementsPerDay || 0) > 0;\r\n    case 'vip-access':\r\n      return entitlements.vipAccess || false;\r\n    case 'custom-model-access':\r\n      return entitlements.customModelAccess || false;\r\n    case 'priority-support':\r\n      return entitlements.prioritySupport || false;\r\n    default:\r\n      return false;\r\n  }\r\n}\r\n\r\n/**\r\n * Get available chat models for a user type\r\n */\r\nexport function getAvailableChatModels(userType: UserType): string[] {\r\n  const entitlements = getUserEntitlements(userType);\r\n  return entitlements.availableChatModelIds;\r\n}\r\n\r\n/**\r\n * Check if user can use a specific chat model\r\n */\r\nexport function canUseChatModel(\r\n  userType: UserType,\r\n  modelId: string\r\n): boolean {\r\n  const availableModels = getAvailableChatModels(userType);\r\n  return availableModels.includes(modelId);\r\n}\r\n\r\n/**\r\n * Get usage limits for a user type\r\n */\r\nexport function getUsageLimits(userType: UserType) {\r\n  const entitlements = getUserEntitlements(userType);\r\n  return {\r\n    messages: entitlements.maxMessagesPerDay,\r\n    images: entitlements.maxImageGenerationsPerDay || 0,\r\n    videos: entitlements.maxVideoGenerationsPerDay || 0,\r\n    scripts: entitlements.maxScriptGenerationsPerDay || 0,\r\n    promptEnhancements: entitlements.maxPromptEnhancementsPerDay || 0,\r\n  };\r\n}\r\n","// Data Stream Writer implementation\r\n\r\nimport type {\r\n  DataStreamWriter,\r\n  DataStreamWriterProps,\r\n  DataStreamConfig,\r\n  DataStreamEvent,\r\n} from \"./types\";\r\n\r\nexport class BufferedDataStreamWriter implements DataStreamWriter {\r\n  private buffer: any[] = [];\r\n  private config: DataStreamConfig;\r\n  private flushTimer?: number;\r\n\r\n  constructor(config: DataStreamConfig = {}) {\r\n    this.config = {\r\n      bufferSize: 1000,\r\n      flushInterval: 100,\r\n      encoding: \"utf8\",\r\n      compression: false,\r\n      ...config,\r\n    };\r\n  }\r\n\r\n  write(data: any): void {\r\n    this.buffer.push(data);\r\n\r\n    if (this.buffer.length >= (this.config.bufferSize || 1000)) {\r\n      this.flush();\r\n    }\r\n  }\r\n\r\n  end(): void {\r\n    this.flush();\r\n    this.cleanup();\r\n  }\r\n\r\n  error(error: Error): void {\r\n    this.cleanup();\r\n    throw error;\r\n  }\r\n\r\n  private flush(): void {\r\n    if (this.buffer.length > 0) {\r\n      // Process buffered data\r\n      const data = this.buffer.splice(0);\r\n      // Here you would typically send data to the actual stream\r\n      console.log(\"Flushing data stream:\", data.length, \"items\");\r\n    }\r\n  }\r\n\r\n  private cleanup(): void {\r\n    if (this.flushTimer) {\r\n      clearTimeout(this.flushTimer);\r\n    }\r\n  }\r\n}\r\n\r\nexport function createDataStreamWriter(\r\n  props: DataStreamWriterProps\r\n): DataStreamWriter {\r\n  return {\r\n    write: props.write,\r\n    end: props.end,\r\n    error: props.error,\r\n  };\r\n}\r\n\r\nexport function createBufferedDataStreamWriter(\r\n  config?: DataStreamConfig\r\n): DataStreamWriter {\r\n  return new BufferedDataStreamWriter(config);\r\n}\r\n","// Chat Media functions\r\n\r\nimport type {\r\n  MediaAttachment,\r\n  ChatMessage,\r\n  MediaSaveOptions,\r\n  MediaTypeConfig,\r\n  MediaSaveResult,\r\n  MessageUpdater,\r\n} from \"./types\";\r\n\r\n// Utility function to generate UUID (placeholder - should be imported from utils)\r\nfunction generateUUID(): string {\r\n  return Math.random().toString(36).substring(2) + Date.now().toString(36);\r\n}\r\n\r\nconst mediaType: MediaTypeConfig = {\r\n  image: \"image/webp\",\r\n  video: \"video/mp4\",\r\n};\r\n\r\nexport const saveImageToChat = async (\r\n  chatId: string,\r\n  imageUrl: string,\r\n  prompt: string,\r\n  setMessages: MessageUpdater<any>,\r\n  thumbnailUrl?: string\r\n): Promise<MediaSaveResult> => {\r\n  if (!setMessages || !chatId) {\r\n    return { success: false, error: \"Missing required parameters\" };\r\n  }\r\n\r\n  let alreadyExists = false;\r\n  setMessages((prev) => {\r\n    alreadyExists = prev.some((msg) =>\r\n      msg.experimental_attachments?.some(\r\n        (att: MediaAttachment) => att.url === imageUrl\r\n      )\r\n    );\r\n    return prev;\r\n  });\r\n\r\n  if (alreadyExists) {\r\n    return { success: false, duplicate: true };\r\n  }\r\n\r\n  const message: ChatMessage = {\r\n    id: generateUUID(),\r\n    role: \"assistant\",\r\n    parts: [{ type: \"text\", text: \"\" }],\r\n    experimental_attachments: [\r\n      {\r\n        name: prompt.length > 50 ? `${prompt.slice(0, 50)}...` : prompt,\r\n        url: imageUrl,\r\n        contentType: \"image/webp\",\r\n        thumbnailUrl: thumbnailUrl,\r\n      },\r\n    ],\r\n    createdAt: new Date(),\r\n  };\r\n\r\n  setMessages((prev) => [...prev, message]);\r\n\r\n  try {\r\n    const response = await fetch(\"/api/save-message\", {\r\n      method: \"POST\",\r\n      headers: { \"Content-Type\": \"application/json\" },\r\n      body: JSON.stringify({ chatId, message }),\r\n    });\r\n\r\n    if (response.ok) {\r\n      return { success: true, messageId: message.id };\r\n    } else {\r\n      return { success: false, error: \"Failed to save message\" };\r\n    }\r\n  } catch (e) {\r\n    console.warn(\"❌ Failed to persist image to DB\", e);\r\n    return { success: false, error: \"Network error\" };\r\n  }\r\n};\r\n\r\nexport const saveMediaToChat = async (\r\n  chatId: string,\r\n  mediaUrl: string,\r\n  prompt: string,\r\n  setMessages: MessageUpdater<any>,\r\n  type: \"image\" | \"video\",\r\n  thumbnailUrl?: string\r\n): Promise<MediaSaveResult> => {\r\n  try {\r\n    // Check for duplicates\r\n    let mediaExists = false;\r\n    setMessages((prevMessages: ChatMessage[]) => {\r\n      mediaExists = prevMessages.some((message) =>\r\n        message.experimental_attachments?.some(\r\n          (attachment: MediaAttachment) => attachment.url === mediaUrl\r\n        )\r\n      );\r\n      return prevMessages;\r\n    });\r\n\r\n    if (mediaExists) {\r\n      console.log(`🎬 ${type} already exists in chat, skipping duplicate save`);\r\n      return { success: false, duplicate: true };\r\n    }\r\n\r\n    const mediaAttachment: MediaAttachment = {\r\n      name: prompt.length > 50 ? `${prompt.substring(0, 50)}...` : prompt,\r\n      url: mediaUrl,\r\n      contentType: mediaType[type],\r\n      thumbnailUrl: thumbnailUrl,\r\n    };\r\n\r\n    const mediaMessage: ChatMessage = {\r\n      id: generateUUID(),\r\n      role: \"assistant\",\r\n      content: ``,\r\n      parts: [\r\n        {\r\n          type: \"text\",\r\n          text: ``,\r\n        },\r\n      ],\r\n      experimental_attachments: [mediaAttachment],\r\n      createdAt: new Date(),\r\n    };\r\n\r\n    setMessages((prev) => [...prev, mediaMessage]);\r\n\r\n    try {\r\n      const response = await fetch(\"/api/save-message\", {\r\n        method: \"POST\",\r\n        headers: { \"Content-Type\": \"application/json\" },\r\n        body: JSON.stringify({ chatId, message: mediaMessage }),\r\n      });\r\n\r\n      if (response.ok) {\r\n        return { success: true, messageId: mediaMessage.id };\r\n      } else {\r\n        return { success: false, error: \"Failed to save message\" };\r\n      }\r\n    } catch (e) {\r\n      console.warn(`❌ Failed to persist ${type} to DB`, e);\r\n      return { success: false, error: \"Network error\" };\r\n    }\r\n  } catch (error) {\r\n    console.error(`Error saving ${type} to chat:`, error);\r\n    return { success: false, error: \"Unknown error\" };\r\n  }\r\n};\r\n\r\nexport const saveVideoToChat = async (\r\n  chatId: string,\r\n  videoUrl: string,\r\n  prompt: string,\r\n  setMessages: (updater: (prev: ChatMessage[]) => ChatMessage[]) => void,\r\n  thumbnailUrl?: string\r\n): Promise<MediaSaveResult> => {\r\n  return saveMediaToChat(\r\n    chatId,\r\n    videoUrl,\r\n    prompt,\r\n    setMessages,\r\n    \"video\",\r\n    thumbnailUrl\r\n  );\r\n};\r\n\r\nexport const saveArtifactToChat = async (\r\n  chatId: string,\r\n  artifactUrl: string,\r\n  prompt: string,\r\n  setMessages: (updater: (prev: ChatMessage[]) => ChatMessage[]) => void,\r\n  type: \"image\" | \"video\" = \"image\",\r\n  thumbnailUrl?: string\r\n): Promise<MediaSaveResult> => {\r\n  return saveMediaToChat(\r\n    chatId,\r\n    artifactUrl,\r\n    prompt,\r\n    setMessages,\r\n    type,\r\n    thumbnailUrl\r\n  );\r\n};\r\n\r\nexport const checkMediaExists = (\r\n  messages: ChatMessage[],\r\n  mediaUrl: string\r\n): boolean => {\r\n  return messages.some((message) =>\r\n    message.experimental_attachments?.some(\r\n      (attachment: MediaAttachment) => attachment.url === mediaUrl\r\n    )\r\n  );\r\n};\r\n\r\nexport const getMediaAttachments = (\r\n  messages: ChatMessage[]\r\n): MediaAttachment[] => {\r\n  const attachments: MediaAttachment[] = [];\r\n\r\n  messages.forEach((message) => {\r\n    if (message.experimental_attachments) {\r\n      attachments.push(...message.experimental_attachments);\r\n    }\r\n  });\r\n\r\n  return attachments;\r\n};\r\n","// Artifact database functions\r\n\r\nexport const saveArtifactToDatabase = async (\r\n  documentId: string,\r\n  title: string,\r\n  content: string,\r\n  kind: \"image\" | \"video\" | \"text\" | \"sheet\" | \"script\",\r\n  thumbnailUrl?: string\r\n): Promise<void> => {\r\n  try {\r\n    // This is a placeholder implementation\r\n    // In the real application, this would save to your database\r\n    console.log(\"💾 Saving artifact to database:\", {\r\n      documentId,\r\n      title,\r\n      kind,\r\n      hasThumbnail: !!thumbnailUrl,\r\n      contentLength: content.length\r\n    });\r\n\r\n    // For now, we'll just log the action\r\n    // You can implement the actual database save logic here\r\n    if (thumbnailUrl) {\r\n      console.log(\"💾 Thumbnail URL:\", thumbnailUrl);\r\n    }\r\n  } catch (error) {\r\n    console.error(\"❌ Failed to save artifact to database:\", error);\r\n    throw error;\r\n  }\r\n};\r\n"]}